{"file_contents":{"WEBSITE_CONTENT_STRUCTURE.md":{"content":"# üõ°Ô∏è FlowTech Cybersecurity Platform - Website Content Structure\n\n## üéØ Theme: Cybersecurity & Programming Excellence\n**Visual Identity**: Live coding backgrounds, terminal windows, threat detection dashboards, matrix-style effects\n\n---\n\n## üìã Content Table\n\n### 1. **Homepage (Hero Landing)**\n**Hero Section**:\n- **Headline**: \"Secure Digital Infrastructure\"\n- **Subheadline**: \"Protecting your digital assets with enterprise-grade cybersecurity solutions. Advanced threat detection, real-time monitoring, and AI-powered defense systems.\"\n- **Visual**: Live coding terminal with threat detection scripts, security dashboard with real-time stats\n- **CTAs**: \n  - Primary: \"Start Security Audit\" \n  - Secondary: \"Watch Demo\"\n- **Trust Stats**: 99.9% Threat Detection | 2,847 Active Shields | 1,254 Threats Blocked | 24/7 Monitoring\n\n### 2. **Services Section**\n**Core Security Solutions**:\n- **Threat Detection & Response**: AI-powered monitoring with automated incident response\n- **Data Protection & Encryption**: Military-grade AES-256 encryption and data loss prevention\n- **Security Assessment**: Vulnerability scanning, penetration testing, risk assessment\n- **Network Security**: Firewall management, intrusion detection, VPN solutions\n- **Identity & Access Management**: Multi-factor authentication, SSO, privileged access\n- **Cloud Security**: Secure cloud migration, configuration management, compliance\n\n**Process Flow**:\n1. **Assessment** ‚Üí Complete security audit and risk analysis\n2. **Strategy** ‚Üí Custom security roadmap and implementation plan\n3. **Deploy** ‚Üí Implementation of security solutions and monitoring\n4. **Monitor** ‚Üí 24/7 monitoring and continuous improvement\n\n### 3. **Industries We Protect**\n- **Financial Services** üí∞: Banking, fintech, insurance\n- **Healthcare** üè•: Hospitals, clinics, pharmaceutical\n- **Manufacturing** üè≠: Industrial, automotive, aerospace\n- **Government** üèõÔ∏è: Federal, state, municipal\n- **E-commerce** üõí: Retail, marketplace, logistics\n- **Technology** üíª: Software, hardware, SaaS\n\n### 4. **Why Choose FlowTech**\n**Competitive Advantages**:\n‚úÖ **Advanced AI Detection**: Machine learning algorithms that evolve with threats\n‚úÖ **Real-time Response**: Instant threat mitigation and automated protocols\n‚úÖ **99.9% Uptime**: Enterprise-grade reliability and monitoring\n‚úÖ **Compliance Ready**: ISO 27001, SOC 2, GDPR, PCI DSS certified\n‚úÖ **Expert Team**: Certified security professionals and ethical hackers\n‚úÖ **24/7 Support**: Round-the-clock monitoring and incident response\n\n### 5. **Technology Stack**\n**Our Security Arsenal**:\n- **AI/ML Threat Detection**: TensorFlow, PyTorch for behavioral analysis\n- **Network Security**: Next-gen firewalls, IDS/IPS systems\n- **Encryption**: AES-256, RSA-4096, quantum-resistant algorithms\n- **Monitoring Tools**: SIEM, SOAR, threat intelligence platforms\n- **Cloud Security**: AWS Security Hub, Azure Sentinel, GCP Security Center\n- **Development**: DevSecOps integration, secure code analysis\n\n### 6. **Live Security Dashboard**\n**Real-time Metrics Display**:\n- Active Connections: 2,847\n- Threats Blocked Today: 1,254\n- Data Processed: 2.3TB\n- System Uptime: 99.9%\n- Security Events: Live feed\n- Vulnerability Score: Dynamic assessment\n\n### 7. **Case Studies & Results**\n**Success Stories**:\n- Financial Institution: \"Reduced security incidents by 89%\"\n- Healthcare Network: \"Achieved HIPAA compliance in 30 days\"\n- Manufacturing Plant: \"Prevented $2.3M ransomware attack\"\n- E-commerce Platform: \"Zero data breaches for 18 months\"\n\n### 8. **Contact & Security Audit**\n**Get Started**:\n- **Free Security Assessment**: Comprehensive vulnerability scan\n- **Emergency Response**: 24/7 incident response hotline\n- **Consultation**: Schedule with our security experts\n- **Demo Request**: See our platform in action\n\n**Contact Methods**:\n- Phone: +1 (555) SECURE-1\n- Email: security@flowtech.com\n- Emergency: incidents@flowtech.com\n- Chat: Live security consultant\n\n---\n\n## üé® Design Theme Implementation\n\n### **Color Palette**\n- **Primary**: Electric Blue (#6366F1) - Trust, technology\n- **Secondary**: Cyber Green (#00FF88) - Security, systems active\n- **Accent**: Cyan (#06B6D4) - Data flow, connectivity\n- **Warning**: Amber (#F59E0B) - Alerts, caution\n- **Danger**: Red (#EF4444) - Threats, critical issues\n- **Background**: Dark slate (#1E293B) - Professional, high-tech\n\n### **Visual Elements**\n- **Live Coding Terminals**: Animated Python/JavaScript security scripts\n- **Network Visualization**: Data flow lines, connection nodes\n- **Threat Detection Displays**: Real-time security monitoring panels\n- **Matrix Effects**: Digital rain, code patterns\n- **Security Icons**: Shields, locks, eyes (monitoring), activity graphs\n\n### **Typography**\n- **Headers**: Inter (modern, clean)\n- **Code/Terminal**: JetBrains Mono (authentic developer experience)\n- **Body**: Inter (professional, readable)\n\n### **Animations**\n- **Liquid Flow**: Smooth scrolling with GSAP ScrollSmoother\n- **Code Typing**: Live terminal simulation with realistic typing\n- **Particle Systems**: Floating code elements and data streams\n- **Pulse Effects**: Security status indicators and threat alerts\n- **Glass Morphism**: Translucent panels with backdrop blur\n\n---\n\n## üîß Technical Implementation\n\n### **Background Elements**\n1. **Live Coding Terminal** (Top Left): \n   - Animated Python threat detection scripts\n   - Real-time code typing simulation\n   - Terminal window with realistic UI\n\n2. **Security Dashboard** (Top Right):\n   - Network activity monitoring\n   - System statistics display\n   - Threat level indicators\n\n3. **Status Bar** (Bottom):\n   - Active sessions, threats blocked, data processed\n   - System health indicators\n   - Real-time metrics\n\n4. **Floating Elements**:\n   - Code snippets and symbols\n   - Data stream visualizations\n   - Animated grid overlays\n\n### **Interactive Features**\n- **Hover Effects**: Cards lift with glowing borders\n- **Click Animations**: Particle bursts on user interaction  \n- **Scroll Triggers**: Elements animate into view\n- **Performance Monitoring**: Adaptive animation quality\n- **Mobile Optimization**: Touch-friendly interactions\n\n---\n\n## üìä Content Strategy\n\n### **Tone & Messaging**\n- **Professional yet Approachable**: Technical expertise without intimidation\n- **Security-First**: Emphasize protection, trust, reliability\n- **Results-Driven**: Focus on measurable security improvements\n- **Innovation-Focused**: Highlight cutting-edge technology and AI\n\n### **SEO Keywords**\n- Primary: \"cybersecurity solutions\", \"threat detection\", \"security monitoring\"\n- Secondary: \"penetration testing\", \"vulnerability assessment\", \"network security\"\n- Long-tail: \"enterprise cybersecurity services\", \"AI-powered threat detection\"\n\n### **Call-to-Action Strategy**\n- **Primary CTA**: \"Start Security Audit\" (conversion-focused)\n- **Secondary CTA**: \"Watch Demo\" (education-focused)\n- **Emergency CTA**: \"Report Incident\" (urgency-focused)\n- **Consultation CTA**: \"Speak to Expert\" (relationship-focused)\n\nThis content structure transforms the original IT services concept into a premium cybersecurity platform with authentic programming and security analysis visuals, creating an engaging and trustworthy digital experience.","size_bytes":7283},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nFlowTech is now a professional IT services company website featuring Jeton.com-inspired design with GSAP ScrollSmoother for ultra-smooth scrolling and dynamic background transitions. The platform includes a raining code background similar to Jeton's aesthetic, with each section having unique themes: Hero (Jeton-style raining code), Services (digital particle network), Solutions (liquid code flow), Technology (neural network), and Contact (holographic interface). Each section smoothly transitions with scroll-triggered background changes, creating an immersive experience that demonstrates technical expertise.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nWebsite Theme: IT services company with programming backgrounds and technical aesthetics.\nVisual Requirements: Jeton.com-inspired raining code background, GSAP ScrollSmoother for entire page, programming-focused scroll sections (Hero: live coding terminal, Services: CLI commands, Solutions: database queries, Technology: deployment scripts, Contact: API integration), parallax effects, smooth transitions.\nTarget Audience: Business clients needing IT services, software development, infrastructure management.\nBrand Identity: Professional IT services company with authentic programming and technical expertise showcase.\n\n# System Architecture\n\n## Frontend Architecture\n- **React with TypeScript**: Modern component-based architecture using React 18 with TypeScript for type safety\n- **Vite Build System**: Fast development server and optimized production builds with hot module replacement\n- **Wouter Routing**: Lightweight client-side routing solution for single-page application navigation\n- **Styling Framework**: Tailwind CSS with custom design system variables and shadcn/ui component library\n- **Animation Stack**: GSAP with ScrollSmoother for liquid animations, Lenis for smooth scrolling, ScrollTrigger for scroll-based interactions, Matter.js for physics, and Rive for complex animations\n- **State Management**: TanStack Query for server state management and caching\n\n## Component Design System\n- **shadcn/ui Integration**: Comprehensive UI component library with Radix UI primitives\n- **Design Tokens**: CSS custom properties for consistent theming (colors, spacing, typography)\n- **Glass-morphism UI**: Backdrop blur effects and translucent surfaces with gradient overlays\n- **Responsive Design**: Mobile-first approach with adaptive layouts across all screen sizes\n\n## Backend Architecture\n- **Express.js Server**: RESTful API server with middleware for request logging and error handling\n- **Database Layer**: Drizzle ORM with PostgreSQL support and type-safe schema definitions\n- **Storage Interface**: Abstracted storage layer with in-memory implementation for development\n- **Development Integration**: Vite middleware integration for seamless full-stack development\n\n## Performance Optimizations\n- **Animation Performance**: Hardware acceleration, 60fps monitoring, and reduced motion fallbacks\n- **Code Splitting**: Component-level code splitting with dynamic imports\n- **Asset Optimization**: Font preloading, image optimization, and critical CSS inlining\n- **Error Boundaries**: Graceful degradation when external animation libraries fail\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection for Neon Database\n- **drizzle-orm & drizzle-kit**: Type-safe SQL ORM with migration management and PostgreSQL dialect support\n- **@tanstack/react-query**: Server state management, caching, and synchronization\n\n## Animation and Interaction Libraries\n- **@studio-freight/lenis**: Smooth scroll library for enhanced user experience\n- **gsap & ScrollTrigger**: Professional animation library with scroll-based triggers\n- **ScrollSmoother**: GSAP plugin for liquid-smooth scrolling with scroll-back animations\n- **@rive-app/react-canvas**: Interactive Rive animations for complex motion graphics\n- **matter-js**: 2D physics engine for interactive ball physics playground\n\n## Content Management\n- **@sanity/client**: Headless CMS client for dynamic content management\n- **@sanity/image-url**: Image URL generation for Sanity assets\n\n## UI and Design Libraries\n- **@radix-ui/react-**: Complete suite of accessible UI primitives (dialogs, dropdowns, forms, etc.)\n- **lucide-react**: Modern icon library with consistent design language\n\n## Development and Build Tools\n- **vite**: Fast build tool with ES modules support and development server\n- **@vitejs/plugin-react**: React integration for Vite with fast refresh\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay for Replit environment\n- **tailwindcss & autoprefixer**: Utility-first CSS framework with vendor prefixing\n\n## Form and Validation\n- **react-hook-form**: Performant forms with minimal re-renders\n- **@hookform/resolvers**: Form validation resolvers for various schema libraries\n- **zod & drizzle-zod**: TypeScript-first schema validation with ORM integration\n\n## Development Database\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n- Note: The application uses Drizzle ORM configured for PostgreSQL, though actual database connection may be added later","size_bytes":5251},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home}/>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":698},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Jeton-inspired GSAP ScrollSmoother animations */\n@keyframes typing {\n  from { width: 0; }\n  to { width: 100%; }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes liquidFlow {\n  0% { transform: translateY(0px) translateX(0px); }\n  25% { transform: translateY(-10px) translateX(5px); }\n  50% { transform: translateY(0px) translateX(10px); }\n  75% { transform: translateY(10px) translateX(5px); }\n  100% { transform: translateY(0px) translateX(0px); }\n}\n\n@keyframes pulseGlow {\n  0%, 100% { \n    opacity: 0.5;\n    box-shadow: 0 0 5px currentColor;\n  }\n  50% { \n    opacity: 1;\n    box-shadow: 0 0 25px currentColor, 0 0 50px currentColor;\n  }\n}\n\n.typing-animation {\n  white-space: nowrap;\n  overflow: hidden;\n  border-right: 2px solid #22c55e;\n  animation: typing 2s steps(40) infinite;\n}\n\n.animate-float {\n  animation: float 4s ease-in-out infinite;\n}\n\n.animate-liquid-flow {\n  animation: liquidFlow 6s ease-in-out infinite;\n}\n\n.animate-pulse-glow {\n  animation: pulseGlow 3s ease-in-out infinite;\n}\n\n/* Jeton-style smooth scrolling container */\n#smooth-wrapper {\n  position: relative;\n  overflow: hidden;\n  height: 100vh;\n  width: 100%;\n}\n\n#smooth-content {\n  position: relative;\n  will-change: transform;\n  overflow: visible;\n}\n\n/* Enhanced parallax elements with Jeton-style effects */\n.parallax-bg {\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n\n.parallax-mid {\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n\n.parallax-front {\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n\n/* Background layer transitions */\n.bg-layer {\n  transition: opacity 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  backdrop-filter: blur(0.5px);\n}\n\n/* Scroll section indicators */\n.scroll-section {\n  position: relative;\n  z-index: 10;\n}\n\n/* Ensure content is above backgrounds */\n.content-layer {\n  position: relative;\n  z-index: 100;\n}\n\n/* Force background elements to stay behind */\n.background-layer {\n  position: fixed;\n  z-index: 0;\n  pointer-events: none;\n}\n\n:root {\n  --background: hsl(215, 27.9%, 16.9%);\n  --foreground: hsl(0, 0%, 100%);\n  --card: hsl(215, 27.9%, 16.9%);\n  --card-foreground: hsl(0, 0%, 100%);\n  --popover: hsl(215, 27.9%, 16.9%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: hsl(239, 84%, 67%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(188, 95%, 43%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(215, 27.9%, 16.9%);\n  --muted-foreground: hsl(0, 0%, 70%);\n  --accent: hsl(188, 95%, 43%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(239, 84%, 67%, 0.1);\n  --input: hsl(215, 27.9%, 16.9%);\n  --ring: hsl(239, 84%, 67%);\n  --chart-1: hsl(239, 84%, 67%);\n  --chart-2: hsl(188, 95%, 43%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(215, 27.9%, 16.9%);\n  --sidebar-foreground: hsl(0, 0%, 100%);\n  --sidebar-primary: hsl(239, 84%, 67%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(188, 95%, 43%);\n  --sidebar-accent-foreground: hsl(0, 0%, 100%);\n  --sidebar-border: hsl(239, 84%, 67%, 0.1);\n  --sidebar-ring: hsl(239, 84%, 67%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 1rem;\n\n  /* FlowTech Custom Properties */\n  --flowtech-primary: hsl(239, 84%, 67%);\n  --flowtech-accent: hsl(188, 95%, 43%);\n  --flowtech-dark-bg: hsl(215, 27.9%, 16.9%);\n  --flowtech-glass-bg: hsla(215, 27.9%, 16.9%, 0.4);\n  --flowtech-glass-border: hsla(239, 84%, 67%, 0.1);\n  --flowtech-text-primary: hsl(0, 0%, 100%);\n  --flowtech-text-secondary: hsla(0, 0%, 100%, 0.7);\n  --flowtech-text-muted: hsla(0, 0%, 100%, 0.5);\n}\n\n.dark {\n  --background: hsl(215, 27.9%, 16.9%);\n  --foreground: hsl(0, 0%, 100%);\n  --card: hsl(215, 27.9%, 16.9%);\n  --card-foreground: hsl(0, 0%, 100%);\n  --popover: hsl(215, 27.9%, 16.9%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: hsl(239, 84%, 67%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(188, 95%, 43%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(215, 27.9%, 16.9%);\n  --muted-foreground: hsl(0, 0%, 70%);\n  --accent: hsl(188, 95%, 43%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(239, 84%, 67%, 0.1);\n  --input: hsl(215, 27.9%, 16.9%);\n  --ring: hsl(239, 84%, 67%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: var(--flowtech-dark-bg);\n    color: var(--flowtech-text-primary);\n    overflow-x: hidden;\n    line-height: 1.6;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  /* Liquid Background Effects */\n  .ambient-bg {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    background: \n      radial-gradient(ellipse 80% 50% at 20% 40%, hsla(239, 84%, 67%, 0.15) 0%, transparent 50%),\n      radial-gradient(ellipse 60% 80% at 80% 60%, hsla(188, 95%, 43%, 0.15) 0%, transparent 50%),\n      radial-gradient(ellipse 40% 60% at 40% 80%, hsla(239, 84%, 67%, 0.08) 0%, transparent 50%),\n      radial-gradient(ellipse 70% 40% at 60% 20%, hsla(188, 95%, 43%, 0.08) 0%, transparent 50%);\n    animation: liquidFlow 20s ease-in-out infinite alternate;\n  }\n\n  @keyframes liquidFlow {\n    0% {\n      background: \n        radial-gradient(ellipse 80% 50% at 20% 40%, hsla(239, 84%, 67%, 0.15) 0%, transparent 50%),\n        radial-gradient(ellipse 60% 80% at 80% 60%, hsla(188, 95%, 43%, 0.15) 0%, transparent 50%),\n        radial-gradient(ellipse 40% 60% at 40% 80%, hsla(239, 84%, 67%, 0.08) 0%, transparent 50%),\n        radial-gradient(ellipse 70% 40% at 60% 20%, hsla(188, 95%, 43%, 0.08) 0%, transparent 50%);\n    }\n    50% {\n      background: \n        radial-gradient(ellipse 90% 60% at 60% 30%, hsla(239, 84%, 67%, 0.18) 0%, transparent 60%),\n        radial-gradient(ellipse 50% 90% at 70% 70%, hsla(188, 95%, 43%, 0.18) 0%, transparent 60%),\n        radial-gradient(ellipse 60% 40% at 30% 60%, hsla(239, 84%, 67%, 0.12) 0%, transparent 50%),\n        radial-gradient(ellipse 80% 50% at 80% 40%, hsla(188, 95%, 43%, 0.12) 0%, transparent 50%);\n    }\n    100% {\n      background: \n        radial-gradient(ellipse 70% 80% at 80% 20%, hsla(239, 84%, 67%, 0.20) 0%, transparent 60%),\n        radial-gradient(ellipse 80% 60% at 20% 80%, hsla(188, 95%, 43%, 0.20) 0%, transparent 60%),\n        radial-gradient(ellipse 50% 70% at 60% 40%, hsla(239, 84%, 67%, 0.10) 0%, transparent 50%),\n        radial-gradient(ellipse 60% 80% at 40% 60%, hsla(188, 95%, 43%, 0.10) 0%, transparent 50%);\n    }\n  }\n\n  .floating-orb {\n    position: absolute;\n    border-radius: 50%;\n    opacity: 0.3;\n    filter: blur(1px);\n    animation: float 20s ease-in-out infinite;\n  }\n\n  .orb-1 {\n    width: 200px;\n    height: 200px;\n    background: linear-gradient(45deg, var(--flowtech-primary), var(--flowtech-accent));\n    top: 10%;\n    left: 10%;\n    animation-delay: 0s;\n  }\n\n  .orb-2 {\n    width: 150px;\n    height: 150px;\n    background: linear-gradient(135deg, var(--flowtech-accent), var(--flowtech-primary));\n    top: 70%;\n    right: 10%;\n    animation-delay: -7s;\n  }\n\n  .orb-3 {\n    width: 100px;\n    height: 100px;\n    background: linear-gradient(225deg, var(--flowtech-primary), transparent);\n    top: 40%;\n    left: 80%;\n    animation-delay: -14s;\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translate(0, 0) scale(1); }\n    33% { transform: translate(30px, -30px) scale(1.1); }\n    66% { transform: translate(-20px, 20px) scale(0.9); }\n  }\n\n  /* Glass Card Component */\n  .glass-card {\n    background: var(--flowtech-glass-bg);\n    backdrop-filter: blur(20px);\n    border: 1px solid var(--flowtech-glass-border);\n    border-radius: 20px;\n    padding: 2rem;\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .glass-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: linear-gradient(90deg, transparent, var(--flowtech-primary), transparent);\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .glass-card:hover {\n    transform: translateY(-10px);\n    border-color: hsla(239, 84%, 67%, 0.3);\n    box-shadow: 0 20px 40px hsla(239, 84%, 67%, 0.1);\n  }\n\n  .glass-card:hover::before {\n    opacity: 1;\n  }\n\n  /* Button Styles */\n  .btn-flowtech {\n    display: inline-block;\n    padding: 1rem 2rem;\n    border: none;\n    border-radius: 50px;\n    font-weight: 600;\n    text-decoration: none;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n    font-size: 1rem;\n  }\n\n  .btn-flowtech-primary {\n    background: linear-gradient(45deg, var(--flowtech-primary), var(--flowtech-accent));\n    color: var(--flowtech-text-primary);\n  }\n\n  .btn-flowtech-secondary {\n    background: transparent;\n    color: var(--flowtech-text-primary);\n    border: 2px solid var(--flowtech-primary);\n  }\n\n  .btn-flowtech:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 10px 30px hsla(239, 84%, 67%, 0.3);\n  }\n\n  .btn-flowtech::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, hsla(255, 255, 255, 0.2), transparent);\n    transition: left 0.5s ease;\n  }\n\n  .btn-flowtech:hover::before {\n    left: 100%;\n  }\n\n  /* Progress Bar Styles */\n  .progress-bar-flowtech {\n    width: 100%;\n    height: 8px;\n    background: hsla(239, 84%, 67%, 0.1);\n    border-radius: 4px;\n    overflow: hidden;\n  }\n\n  .progress-fill-flowtech {\n    height: 100%;\n    background: linear-gradient(45deg, var(--flowtech-primary), var(--flowtech-accent));\n    border-radius: 4px;\n    width: 0%;\n    transition: width 1s ease;\n  }\n\n  /* Particle Effect */\n  .particles {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    pointer-events: none;\n  }\n\n  .particle {\n    position: absolute;\n    width: 4px;\n    height: 4px;\n    background: var(--flowtech-accent);\n    border-radius: 50%;\n    opacity: 0.5;\n    animation: particle-float 15s linear infinite;\n  }\n\n  @keyframes particle-float {\n    0% {\n      transform: translateY(100vh) translateX(0);\n      opacity: 0;\n    }\n    10% {\n      opacity: 0.5;\n    }\n    90% {\n      opacity: 0.5;\n    }\n    100% {\n      transform: translateY(-100px) translateX(100px);\n      opacity: 0;\n    }\n  }\n\n  /* Liquid Animation Classes */\n  .liquid-section {\n    opacity: 0;\n    transform: scale(0.8) rotateX(-15deg);\n    filter: blur(10px);\n    transition: all 1.2s cubic-bezier(0.23, 1, 0.32, 1);\n  }\n\n  .liquid-section.animate {\n    opacity: 1;\n    transform: scale(1) rotateX(0deg);\n    filter: blur(0px);\n  }\n\n  .liquid-text {\n    overflow: hidden;\n    display: inline-block;\n  }\n\n  .liquid-text .char {\n    display: inline-block;\n    transform: translateY(100px) rotateX(-90deg);\n    opacity: 0;\n    transition: all 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n\n  .liquid-text .char.animate {\n    transform: translateY(0) rotateX(0deg);\n    opacity: 1;\n  }\n\n  .liquid-card {\n    position: relative;\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));\n    transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);\n    transform-style: preserve-3d;\n  }\n\n  .liquid-card::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    padding: 2px;\n    background: linear-gradient(135deg, rgba(99, 102, 241, 0.5), rgba(6, 182, 212, 0.5), rgba(99, 102, 241, 0.5));\n    border-radius: inherit;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: xor;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .liquid-card:hover::before {\n    opacity: 1;\n  }\n\n  .liquid-card:hover {\n    transform: translateY(-10px) rotateX(2deg) rotateY(1deg);\n    box-shadow: \n      0 25px 50px rgba(99, 102, 241, 0.15),\n      0 15px 35px rgba(6, 182, 212, 0.1),\n      inset 0 1px 0 rgba(255, 255, 255, 0.2);\n  }\n\n  /* Liquid Morphing Effects */\n  @keyframes liquidMorph {\n    0% {\n      border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;\n    }\n    50% {\n      border-radius: 30% 60% 70% 40% / 50% 60% 30% 60%;\n    }\n    100% {\n      border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;\n    }\n  }\n\n  .liquid-blob {\n    animation: liquidMorph 8s ease-in-out infinite;\n    background: linear-gradient(45deg, rgba(99, 102, 241, 0.3), rgba(6, 182, 212, 0.3));\n    filter: blur(1px);\n  }\n\n  /* Fade in animations */\n  .fade-in {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n\n  .fade-in.animate {\n    opacity: 1;\n    transform: translateY(0);\n    transition: all 0.8s ease;\n  }\n\n  .slide-in-left {\n    opacity: 0;\n    transform: translateX(-50px);\n  }\n\n  .slide-in-left.animate {\n    opacity: 1;\n    transform: translateX(0);\n    transition: all 0.8s ease;\n  }\n\n  .slide-in-right {\n    opacity: 0;\n    transform: translateX(50px);\n  }\n\n  .slide-in-right.animate {\n    opacity: 1;\n    transform: translateX(0);\n    transition: all 0.8s ease;\n  }\n\n  .scale-in {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n\n  .scale-in.animate {\n    opacity: 1;\n    transform: scale(1);\n    transition: all 0.8s ease;\n  }\n\n  /* Navigation Blur Effect */\n  .nav-blur {\n    backdrop-filter: blur(20px);\n    background: hsla(215, 27.9%, 16.9%, 0.8);\n    border-bottom: 1px solid hsla(239, 84%, 67%, 0.1);\n  }\n}\n\n@layer utilities {\n  /* ScrollSmoother fixes */\n  #smooth-wrapper {\n    overflow: hidden;\n  }\n\n  #smooth-content {\n    overflow: visible;\n  }\n\n  .text-gradient {\n    background: linear-gradient(45deg, var(--flowtech-primary), var(--flowtech-accent));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  /* Virus emoji animations */\n  @keyframes pulse {\n    0%, 100% { transform: translate(-50%, -50%) scale(1); }\n    50% { transform: translate(-50%, -50%) scale(1.1); }\n  }\n\n  .virus-emoji-overlay {\n    pointer-events: none !important;\n  }\n\n  /* Jeton-style flowing animations */\n  .flow-text {\n    perspective: 1000px;\n  }\n\n  .flow-card {\n    transform-style: preserve-3d;\n    perspective: 1000px;\n  }\n\n  .flow-section {\n    transform-style: preserve-3d;\n  }\n\n  /* Flowing particles */\n  .floating-particle {\n    will-change: transform;\n    animation: float 8s infinite ease-in-out;\n  }\n\n  @keyframes float {\n    0%, 100% { \n      transform: translateY(0px) translateX(0px) rotate(0deg);\n      opacity: 0.2;\n    }\n    25% { \n      transform: translateY(-20px) translateX(10px) rotate(90deg);\n      opacity: 0.4;\n    }\n    50% { \n      transform: translateY(-40px) translateX(-10px) rotate(180deg);\n      opacity: 0.6;\n    }\n    75% { \n      transform: translateY(-20px) translateX(-15px) rotate(270deg);\n      opacity: 0.3;\n    }\n  }\n\n  /* Enhanced liquid effects */\n  .liquid-hero {\n    animation: heroFloat 6s ease-in-out infinite;\n  }\n\n  @keyframes heroFloat {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n\n  /* Mobile optimizations */\n  @media (max-width: 768px) {\n    .flow-text {\n      font-size: clamp(1.5rem, 5vw, 2.5rem);\n    }\n\n    .floating-particle {\n      animation-duration: 12s;\n    }\n\n    .liquid-card {\n      transform: none !important;\n      perspective: none !important;\n    }\n\n    /* Reduce motion for mobile */\n    @media (prefers-reduced-motion: reduce) {\n      .floating-particle,\n      .liquid-hero,\n      .flow-card,\n      .flow-text {\n        animation: none !important;\n        transition: none !important;\n      }\n    }\n  }\n\n  /* Performance optimizations */\n  .webgl-container {\n    will-change: transform;\n    transform: translateZ(0);\n  }\n\n  /* Touch-friendly interactions */\n  @media (hover: none) and (pointer: coarse) {\n    .flow-card:hover {\n      transform: none;\n    }\n\n    .liquid-card:hover {\n      scale: 1.02;\n      transition: scale 0.2s ease;\n    }\n  }\n\n  .text-gradient-hero {\n    background: linear-gradient(45deg, var(--flowtech-text-primary), var(--flowtech-accent));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  /* Responsive Mobile Menu */\n  @media (max-width: 768px) {\n    .nav-links-mobile {\n      display: flex;\n      position: fixed;\n      top: 80px;\n      left: 0;\n      right: 0;\n      background: hsla(215, 27.9%, 16.9%, 0.98);\n      backdrop-filter: blur(20px);\n      flex-direction: column;\n      padding: 2rem;\n      border-top: 1px solid hsla(239, 84%, 67%, 0.2);\n      z-index: 999;\n    }\n\n    .mobile-menu-btn.active span:nth-child(1) {\n      transform: rotate(45deg) translate(5px, 5px);\n    }\n\n    .mobile-menu-btn.active span:nth-child(2) {\n      opacity: 0;\n    }\n\n    .mobile-menu-btn.active span:nth-child(3) {\n      transform: rotate(-45deg) translate(7px, -6px);\n    }\n  }\n\n  /* Performance optimizations */\n  .reduced-motion * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n\n  .fallback-animations .fade-in,\n  .fallback-animations .slide-in-left,\n  .fallback-animations .slide-in-right,\n  .fallback-animations .scale-in {\n    opacity: 1 !important;\n    transform: none !important;\n  }\n\n  /* Hardware acceleration */\n  .will-change-transform {\n    will-change: transform;\n  }\n\n  .will-change-opacity {\n    will-change: opacity;\n  }\n\n  .gpu-accelerated {\n    transform: translateZ(0);\n    backface-visibility: hidden;\n    perspective: 1000px;\n  }\n}","size_bytes":17935},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ambient-audio.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Volume2, VolumeX } from 'lucide-react';\n\nexport function AmbientAudio() {\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(0.3);\n  const [isMuted, setIsMuted] = useState(false);\n\n  useEffect(() => {\n    // Create Web Audio API context for ambient soundscape\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    \n    // Create oscillators for ambient tones\n    const createAmbientTone = (frequency: number, volume: number) => {\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator.type = 'sine';\n      oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      \n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(volume, audioContext.currentTime + 2);\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      return { oscillator, gainNode };\n    };\n\n    let tones: Array<{ oscillator: OscillatorNode; gainNode: GainNode }> = [];\n\n    const startAmbientAudio = () => {\n      if (audioContext.state === 'suspended') {\n        audioContext.resume();\n      }\n\n      // Create multiple ambient tones\n      const frequencies = [60, 120, 180, 240]; // Low frequency ambient tones\n      const volumes = [0.02, 0.015, 0.01, 0.008];\n\n      tones = frequencies.map((freq, index) => createAmbientTone(freq, volumes[index] * volume));\n      \n      tones.forEach(({ oscillator }) => {\n        oscillator.start();\n      });\n\n      setIsPlaying(true);\n    };\n\n    const stopAmbientAudio = () => {\n      tones.forEach(({ oscillator, gainNode }) => {\n        gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 1);\n        setTimeout(() => {\n          try {\n            oscillator.stop();\n          } catch (e) {\n            // Oscillator may already be stopped\n          }\n        }, 1000);\n      });\n      \n      setIsPlaying(false);\n    };\n\n    // Auto-start ambient audio on user interaction\n    const handleUserInteraction = () => {\n      if (!isPlaying && !isMuted) {\n        startAmbientAudio();\n      }\n      document.removeEventListener('click', handleUserInteraction);\n      document.removeEventListener('touchstart', handleUserInteraction);\n    };\n\n    document.addEventListener('click', handleUserInteraction);\n    document.addEventListener('touchstart', handleUserInteraction);\n\n    return () => {\n      stopAmbientAudio();\n      document.removeEventListener('click', handleUserInteraction);\n      document.removeEventListener('touchstart', handleUserInteraction);\n      audioContext.close();\n    };\n  }, [volume, isMuted]);\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n    if (!isMuted) {\n      setIsPlaying(false);\n    }\n  };\n\n  const handleVolumeChange = (newVolume: number) => {\n    setVolume(newVolume);\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <div className=\"bg-white/10 backdrop-blur-xl rounded-2xl border border-white/20 p-4 shadow-xl\">\n        <div className=\"flex items-center gap-3\">\n          <button\n            onClick={toggleMute}\n            className=\"p-2 rounded-full bg-white/10 hover:bg-white/20 transition-colors duration-200\"\n            data-testid=\"audio-toggle\"\n            aria-label={isMuted ? 'Unmute ambient audio' : 'Mute ambient audio'}\n          >\n            {isMuted ? (\n              <VolumeX className=\"w-5 h-5 text-white\" />\n            ) : (\n              <Volume2 className=\"w-5 h-5 text-white\" />\n            )}\n          </button>\n          \n          {!isMuted && (\n            <div className=\"flex items-center gap-2\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"1\"\n                step=\"0.1\"\n                value={volume}\n                onChange={(e) => handleVolumeChange(parseFloat(e.target.value))}\n                className=\"w-20 h-1 bg-white/20 rounded-lg appearance-none cursor-pointer\"\n                data-testid=\"volume-slider\"\n                style={{\n                  background: `linear-gradient(to right, #6366f1 0%, #6366f1 ${volume * 100}%, rgba(255,255,255,0.2) ${volume * 100}%, rgba(255,255,255,0.2) 100%)`\n                }}\n              />\n              <span className=\"text-white/70 text-xs font-medium min-w-[3ch]\">\n                {Math.round(volume * 100)}%\n              </span>\n            </div>\n          )}\n        </div>\n        \n        {isPlaying && (\n          <div className=\"flex items-center gap-1 mt-2\">\n            <div className=\"w-1 h-1 bg-green-400 rounded-full animate-pulse\"></div>\n            <span className=\"text-green-400 text-xs font-medium\">Ambient Audio Active</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":4943},"client/src/components/cta-section.tsx":{"content":"import { useState } from 'react';\nimport { Send, Phone, Mail, MapPin, Clock, CheckCircle } from 'lucide-react';\n\nexport function CTASection() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    company: '',\n    message: ''\n  });\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Handle form submission here\n    setIsSubmitted(true);\n    setTimeout(() => setIsSubmitted(false), 3000);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <section className=\"py-20 relative overflow-hidden\">\n      <div className=\"container max-w-7xl mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-6xl font-bold mb-6\">\n            <span className=\"text-gradient-hero\">Ready to Transform</span>\n            <br />\n            <span className=\"text-white\">Your Digital Future?</span>\n          </h2>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Join hundreds of companies that trust us with their digital transformation journey. \n            Let's build something extraordinary together.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12 max-w-6xl mx-auto\">\n          {/* Contact Form */}\n          <div className=\"bg-slate-800/40 backdrop-blur-lg border border-indigo-500/20 rounded-3xl p-8\">\n            <h3 className=\"text-2xl font-bold text-white mb-6\">Get Started Today</h3>\n            \n            {isSubmitted ? (\n              <div className=\"text-center py-8\">\n                <CheckCircle className=\"w-16 h-16 text-green-400 mx-auto mb-4\" />\n                <h4 className=\"text-xl font-semibold text-white mb-2\">Message Sent!</h4>\n                <p className=\"text-gray-300\">We'll get back to you within 24 hours.</p>\n              </div>\n            ) : (\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Your Name\"\n                    value={formData.name}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 bg-slate-700/50 border border-slate-600 rounded-xl text-white placeholder-gray-400 focus:border-indigo-500 focus:outline-none transition-colors\"\n                    required\n                  />\n                  <input\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Your Email\"\n                    value={formData.email}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 bg-slate-700/50 border border-slate-600 rounded-xl text-white placeholder-gray-400 focus:border-indigo-500 focus:outline-none transition-colors\"\n                    required\n                  />\n                </div>\n                <input\n                  type=\"text\"\n                  name=\"company\"\n                  placeholder=\"Company Name\"\n                  value={formData.company}\n                  onChange={handleInputChange}\n                  className=\"w-full px-4 py-3 bg-slate-700/50 border border-slate-600 rounded-xl text-white placeholder-gray-400 focus:border-indigo-500 focus:outline-none transition-colors\"\n                />\n                <textarea\n                  name=\"message\"\n                  placeholder=\"Tell us about your project...\"\n                  rows={5}\n                  value={formData.message}\n                  onChange={handleInputChange}\n                  className=\"w-full px-4 py-3 bg-slate-700/50 border border-slate-600 rounded-xl text-white placeholder-gray-400 focus:border-indigo-500 focus:outline-none transition-colors resize-none\"\n                  required\n                />\n                <button\n                  type=\"submit\"\n                  className=\"w-full btn-flowtech btn-flowtech-primary group\"\n                >\n                  <Send className=\"w-5 h-5 mr-2 group-hover:translate-x-1 transition-transform\" />\n                  Send Message\n                </button>\n              </form>\n            )}\n          </div>\n\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            <div>\n              <h3 className=\"text-2xl font-bold text-white mb-6\">Get in Touch</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-indigo-500/20 rounded-xl flex items-center justify-center\">\n                    <Mail className=\"w-6 h-6 text-indigo-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold\">Email Us</p>\n                    <p className=\"text-gray-400\">contact@flowtech.com</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-indigo-500/20 rounded-xl flex items-center justify-center\">\n                    <Phone className=\"w-6 h-6 text-indigo-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold\">Call Us</p>\n                    <p className=\"text-gray-400\">+1 (555) 123-4567</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-indigo-500/20 rounded-xl flex items-center justify-center\">\n                    <MapPin className=\"w-6 h-6 text-indigo-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold\">Visit Us</p>\n                    <p className=\"text-gray-400\">San Francisco, CA</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-indigo-500/20 rounded-xl flex items-center justify-center\">\n                    <Clock className=\"w-6 h-6 text-indigo-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold\">Business Hours</p>\n                    <p className=\"text-gray-400\">Mon-Fri, 9AM-6PM PST</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Trust Indicators */}\n            <div className=\"bg-slate-800/40 backdrop-blur-lg border border-indigo-500/20 rounded-3xl p-6\">\n              <h4 className=\"text-lg font-semibold text-white mb-4\">Why Choose FlowTech?</h4>\n              <div className=\"space-y-3\">\n                {[\n                  \"24/7 Expert Support\",\n                  \"99.9% Uptime Guarantee\",\n                  \"Enterprise Security\",\n                  \"Scalable Solutions\"\n                ].map((feature, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"w-5 h-5 text-green-400 flex-shrink-0\" />\n                    <span className=\"text-gray-300\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Background Elements */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {/* Floating geometric shapes */}\n        <div className=\"absolute top-1/4 left-10 opacity-10 animate-float\">\n          <div className=\"w-24 h-24 border-2 border-indigo-400 rounded-full\"></div>\n        </div>\n        <div className=\"absolute bottom-1/3 right-20 opacity-10 animate-float\" style={{ animationDelay: '3s' }}>\n          <div className=\"w-16 h-16 border-2 border-cyan-400 transform rotate-45\"></div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8079},"client/src/components/custom-cursor.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\nexport function CustomCursor() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isHovering, setIsHovering] = useState(false);\n  const cursorRef = useRef<HTMLDivElement>(null);\n  const trailRef = useRef<HTMLDivElement>(null);\n  const positionRef = useRef({ x: 0, y: 0 });\n  const trailPositions = useRef<Array<{ x: number; y: number }>>([]);\n\n  useEffect(() => {\n    // Only show custom cursor on desktop\n    const isMobile = window.innerWidth < 768 || 'ontouchstart' in window;\n    if (isMobile) return;\n\n    const updateCursor = (e: MouseEvent) => {\n      positionRef.current = { x: e.clientX, y: e.clientY };\n      \n      if (cursorRef.current) {\n        cursorRef.current.style.left = `${e.clientX}px`;\n        cursorRef.current.style.top = `${e.clientY}px`;\n      }\n\n      // Update trail\n      trailPositions.current.push({ x: e.clientX, y: e.clientY });\n      if (trailPositions.current.length > 20) {\n        trailPositions.current.shift();\n      }\n    };\n\n    const handleMouseEnter = () => setIsVisible(true);\n    const handleMouseLeave = () => setIsVisible(false);\n\n    const handleHoverStart = () => setIsHovering(true);\n    const handleHoverEnd = () => setIsHovering(false);\n\n    // Add hover detection for interactive elements\n    const interactiveElements = document.querySelectorAll('a, button, .flow-card, .liquid-card');\n    interactiveElements.forEach(el => {\n      el.addEventListener('mouseenter', handleHoverStart);\n      el.addEventListener('mouseleave', handleHoverEnd);\n    });\n\n    document.addEventListener('mousemove', updateCursor);\n    document.addEventListener('mouseenter', handleMouseEnter);\n    document.addEventListener('mouseleave', handleMouseLeave);\n\n    // Trail animation\n    const animateTrail = () => {\n      if (trailRef.current && trailPositions.current.length > 0) {\n        const trail = trailRef.current;\n        const positions = trailPositions.current;\n        \n        // Create trail elements\n        trail.innerHTML = '';\n        positions.forEach((pos, index) => {\n          const dot = document.createElement('div');\n          const opacity = (index + 1) / positions.length;\n          const size = 2 + (opacity * 6);\n          \n          dot.style.cssText = `\n            position: fixed;\n            left: ${pos.x - size/2}px;\n            top: ${pos.y - size/2}px;\n            width: ${size}px;\n            height: ${size}px;\n            background: radial-gradient(circle, rgba(99, 102, 241, ${opacity}) 0%, transparent 70%);\n            border-radius: 50%;\n            pointer-events: none;\n            z-index: 9999;\n            mix-blend-mode: screen;\n          `;\n          \n          trail.appendChild(dot);\n        });\n      }\n      \n      requestAnimationFrame(animateTrail);\n    };\n\n    animateTrail();\n\n    // Cleanup\n    return () => {\n      document.removeEventListener('mousemove', updateCursor);\n      document.removeEventListener('mouseenter', handleMouseEnter);\n      document.removeEventListener('mouseleave', handleMouseLeave);\n      \n      interactiveElements.forEach(el => {\n        el.removeEventListener('mouseenter', handleHoverStart);\n        el.removeEventListener('mouseleave', handleHoverEnd);\n      });\n    };\n  }, []);\n\n  // Hide default cursor\n  useEffect(() => {\n    const isMobile = window.innerWidth < 768 || 'ontouchstart' in window;\n    if (!isMobile) {\n      document.body.style.cursor = 'none';\n    }\n    \n    return () => {\n      document.body.style.cursor = 'auto';\n    };\n  }, []);\n\n  return (\n    <>\n      {/* Main cursor */}\n      <div\n        ref={cursorRef}\n        className={`fixed pointer-events-none z-[10000] transition-all duration-200 ${\n          isVisible ? 'opacity-100' : 'opacity-0'\n        } ${isHovering ? 'scale-150' : 'scale-100'}`}\n        style={{\n          width: '20px',\n          height: '20px',\n          transform: 'translate(-50%, -50%)',\n          background: isHovering \n            ? 'radial-gradient(circle, rgba(6, 182, 212, 0.8) 0%, rgba(99, 102, 241, 0.4) 50%, transparent 70%)'\n            : 'radial-gradient(circle, rgba(99, 102, 241, 0.6) 0%, transparent 70%)',\n          borderRadius: '50%',\n          mixBlendMode: 'screen',\n          filter: 'blur(0.5px)',\n        }}\n      />\n      \n      {/* Trail container */}\n      <div ref={trailRef} className=\"fixed inset-0 pointer-events-none z-[9999]\" />\n      \n      {/* Outer ring */}\n      <div\n        className={`fixed pointer-events-none z-[9998] transition-all duration-300 ${\n          isVisible ? 'opacity-100' : 'opacity-0'\n        } ${isHovering ? 'scale-200' : 'scale-100'}`}\n        style={{\n          left: `${positionRef.current.x}px`,\n          top: `${positionRef.current.y}px`,\n          width: '40px',\n          height: '40px',\n          transform: 'translate(-50%, -50%)',\n          border: '1px solid rgba(99, 102, 241, 0.3)',\n          borderRadius: '50%',\n          animation: 'pulse 2s infinite',\n        }}\n      />\n    </>\n  );\n}","size_bytes":5002},"client/src/components/cybersecurity-hero.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { Shield, Lock, Eye, Zap, Activity, Code2 } from 'lucide-react';\n\nconst securityFeatures = [\n  {\n    icon: Shield,\n    title: \"Advanced Threat Protection\",\n    description: \"AI-powered threat detection and real-time security monitoring\"\n  },\n  {\n    icon: Lock,\n    title: \"End-to-End Encryption\", \n    description: \"Military-grade AES-256 encryption for all data transactions\"\n  },\n  {\n    icon: Eye,\n    title: \"Behavioral Analysis\",\n    description: \"Machine learning algorithms detect anomalies and suspicious patterns\"\n  },\n  {\n    icon: Zap,\n    title: \"Real-time Response\",\n    description: \"Instant threat mitigation and automated security protocols\"\n  },\n  {\n    icon: Activity,\n    title: \"Network Monitoring\",\n    description: \"24/7 network surveillance with advanced intrusion detection\"\n  },\n  {\n    icon: Code2,\n    title: \"Secure Development\",\n    description: \"DevSecOps integration with continuous security validation\"\n  }\n];\n\nexport function CybersecurityHero() {\n  const heroRef = useRef<HTMLDivElement>(null);\n  const statsRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Animate security stats\n    const animateCounters = () => {\n      if (statsRef.current) {\n        const counters = statsRef.current.querySelectorAll('[data-count]');\n        counters.forEach(counter => {\n          const target = parseFloat(counter.getAttribute('data-count') || '0');\n          let current = 0;\n          const increment = target / 100;\n          \n          const updateCounter = () => {\n            if (current < target) {\n              current += increment;\n              const displayValue = target === 99.9 ? current.toFixed(1) : Math.ceil(current);\n              counter.textContent = displayValue.toString();\n              requestAnimationFrame(updateCounter);\n            } else {\n              counter.textContent = target === 99.9 ? target.toFixed(1) : target.toString();\n            }\n          };\n          \n          updateCounter();\n        });\n      }\n    };\n\n    const timer = setTimeout(animateCounters, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center pt-20 pb-10\">\n      <div className=\"container max-w-7xl mx-auto px-6\">\n        \n        {/* Main Hero Content */}\n        <div className=\"text-center mb-16\" ref={heroRef}>\n          <div className=\"mb-8 relative\">\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6\">\n              <span className=\"text-gradient-hero block\">Secure</span>\n              <span className=\"text-white block\">Digital</span>\n              <span className=\"text-gradient-hero block\">Infrastructure</span>\n            </h1>\n            \n            {/* Animated security badge */}\n            <div className=\"absolute -top-4 -right-4 md:right-20 animate-float\">\n              <div className=\"bg-green-500/20 backdrop-blur-md border border-green-500/30 rounded-full p-3\">\n                <Shield className=\"w-8 h-8 text-green-400\" />\n              </div>\n            </div>\n          </div>\n          \n          <p className=\"text-xl md:text-2xl text-gray-300 mb-12 max-w-4xl mx-auto leading-relaxed\">\n            Protecting your digital assets with enterprise-grade cybersecurity solutions. \n            Advanced threat detection, real-time monitoring, and AI-powered defense systems \n            that evolve with the threat landscape.\n          </p>\n          \n          {/* CTA Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center mb-16\">\n            <button className=\"group bg-gradient-to-r from-indigo-600 to-cyan-600 hover:from-indigo-500 hover:to-cyan-500 px-8 py-4 rounded-lg font-semibold text-white transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-indigo-500/25\">\n              <span className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5\" />\n                Start Security Audit\n                <div className=\"ml-2 w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              </span>\n            </button>\n            \n            <button className=\"group border-2 border-cyan-500/50 hover:border-cyan-400 px-8 py-4 rounded-lg font-semibold text-cyan-400 hover:text-white hover:bg-cyan-500/10 transition-all duration-300\">\n              <span className=\"flex items-center gap-2\">\n                <Eye className=\"w-5 h-5\" />\n                Watch Demo\n                <Code2 className=\"w-4 h-4 group-hover:rotate-12 transition-transform\" />\n              </span>\n            </button>\n          </div>\n          \n          {/* Security Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\" ref={statsRef}>\n            <div className=\"glass-card text-center\">\n              <div className=\"text-4xl font-bold text-green-400 mb-2\">\n                <span data-count=\"99.9\">0</span>%\n              </div>\n              <div className=\"text-gray-400 text-sm\">Threat Detection</div>\n              <div className=\"w-full bg-gray-700 rounded-full h-1 mt-3\">\n                <div className=\"bg-green-400 h-1 rounded-full animate-pulse\" style={{ width: '99%' }}></div>\n              </div>\n            </div>\n            \n            <div className=\"glass-card text-center\">\n              <div className=\"text-4xl font-bold text-cyan-400 mb-2\">\n                <span data-count=\"2847\">0</span>\n              </div>\n              <div className=\"text-gray-400 text-sm\">Active Shields</div>\n              <div className=\"w-full bg-gray-700 rounded-full h-1 mt-3\">\n                <div className=\"bg-cyan-400 h-1 rounded-full animate-pulse\" style={{ width: '85%', animationDelay: '0.5s' }}></div>\n              </div>\n            </div>\n            \n            <div className=\"glass-card text-center\">\n              <div className=\"text-4xl font-bold text-yellow-400 mb-2\">\n                <span data-count=\"1254\">0</span>\n              </div>\n              <div className=\"text-gray-400 text-sm\">Threats Blocked</div>\n              <div className=\"w-full bg-gray-700 rounded-full h-1 mt-3\">\n                <div className=\"bg-yellow-400 h-1 rounded-full animate-pulse\" style={{ width: '92%', animationDelay: '1s' }}></div>\n              </div>\n            </div>\n            \n            <div className=\"glass-card text-center\">\n              <div className=\"text-4xl font-bold text-indigo-400 mb-2\">\n                <span data-count=\"24\">0</span>/7\n              </div>\n              <div className=\"text-gray-400 text-sm\">Monitoring</div>\n              <div className=\"w-full bg-gray-700 rounded-full h-1 mt-3\">\n                <div className=\"bg-indigo-400 h-1 rounded-full animate-pulse\" style={{ width: '100%', animationDelay: '1.5s' }}></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Security Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mt-20\">\n          {securityFeatures.map((feature, index) => {\n            const IconComponent = feature.icon;\n            return (\n              <div \n                key={index}\n                className=\"glass-card group hover:scale-105 transition-all duration-500\"\n                style={{ animationDelay: `${index * 0.1}s` }}\n              >\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-gradient-to-br from-indigo-500/20 to-cyan-500/20 p-3 rounded-lg border border-indigo-500/30 group-hover:border-cyan-400/50 transition-colors duration-300\">\n                    <IconComponent className=\"w-6 h-6 text-indigo-400 group-hover:text-cyan-400 transition-colors duration-300\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-2\">{feature.title}</h3>\n                    <p className=\"text-gray-400 text-sm leading-relaxed\">{feature.description}</p>\n                  </div>\n                </div>\n                \n                {/* Animated border effect */}\n                <div className=\"absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-indigo-500 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n              </div>\n            );\n          })}\n        </div>\n        \n        {/* Trust Indicators */}\n        <div className=\"mt-20 text-center\">\n          <p className=\"text-gray-400 text-sm mb-6\">Trusted by leading organizations worldwide</p>\n          <div className=\"flex justify-center items-center gap-8 opacity-50\">\n            {/* Placeholder for trust logos */}\n            <div className=\"text-2xl font-mono text-gray-600\">ISO 27001</div>\n            <div className=\"text-2xl font-mono text-gray-600\">SOC 2</div>\n            <div className=\"text-2xl font-mono text-gray-600\">GDPR</div>\n            <div className=\"text-2xl font-mono text-gray-600\">PCI DSS</div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Background security elements */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {/* Animated shield patterns */}\n        {Array.from({ length: 3 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute opacity-5 animate-spin\"\n            style={{\n              left: `${20 + i * 30}%`,\n              top: `${20 + i * 20}%`,\n              animationDuration: `${20 + i * 5}s`,\n              transform: `scale(${0.5 + i * 0.3})`\n            }}\n          >\n            <Shield className=\"w-32 h-32 text-indigo-400\" />\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}","size_bytes":9666},"client/src/components/dynamic-charts.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { LineChart, Line, AreaChart, Area, ResponsiveContainer, XAxis, YAxis, Tooltip } from 'recharts';\n\ninterface ChartData {\n  name: string;\n  value: number;\n  growth: number;\n  volume: number;\n}\n\nexport function DynamicCharts() {\n  const [data, setData] = useState<ChartData[]>([]);\n  const [realtimeData, setRealtimeData] = useState<ChartData[]>([]);\n\n  useEffect(() => {\n    // Generate initial data\n    const generateData = () => {\n      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      return months.map((month, index) => ({\n        name: month,\n        value: 1000 + Math.random() * 5000 + index * 200,\n        growth: 50 + Math.random() * 100 + index * 10,\n        volume: 2000 + Math.random() * 3000 + index * 150\n      }));\n    };\n\n    setData(generateData());\n\n    // Real-time data simulation\n    const interval = setInterval(() => {\n      setRealtimeData(prev => {\n        const newData = [...prev];\n        const time = new Date().toLocaleTimeString();\n        \n        newData.push({\n          name: time,\n          value: 2000 + Math.random() * 2000,\n          growth: 30 + Math.random() * 70,\n          volume: 1500 + Math.random() * 2500\n        });\n\n        // Keep only last 20 data points\n        if (newData.length > 20) {\n          newData.shift();\n        }\n        \n        return newData;\n      });\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-slate-800/90 backdrop-blur-xl border border-white/20 rounded-lg p-3 shadow-xl\">\n          <p className=\"text-white font-medium\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-cyan-400 text-sm\">\n              {entry.name}: {typeof entry.value === 'number' ? entry.value.toFixed(2) : entry.value}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"flow-section py-20 relative\">\n      <div className=\"container max-w-7xl mx-auto px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"flow-text text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-white to-cyan-300 bg-clip-text text-transparent\">\n            Live Analytics Dashboard\n          </h2>\n          <p className=\"flow-text text-xl text-white/70 max-w-3xl mx-auto\">\n            Real-time financial data visualization with interactive charts and live market updates\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\">\n          {/* Growth Chart */}\n          <div className=\"flow-card bg-white/5 backdrop-blur-xl rounded-3xl border border-white/10 p-6\">\n            <h3 className=\"text-2xl font-bold text-white mb-4\">Annual Growth</h3>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={data}>\n                  <defs>\n                    <linearGradient id=\"growthGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#6366f1\" stopOpacity={0.8}/>\n                      <stop offset=\"95%\" stopColor=\"#6366f1\" stopOpacity={0.1}/>\n                    </linearGradient>\n                  </defs>\n                  <XAxis \n                    dataKey=\"name\" \n                    axisLine={false} \n                    tickLine={false} \n                    tick={{ fill: '#ffffff80', fontSize: 12 }}\n                  />\n                  <YAxis \n                    axisLine={false} \n                    tickLine={false} \n                    tick={{ fill: '#ffffff80', fontSize: 12 }}\n                  />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"growth\"\n                    stroke=\"#6366f1\"\n                    strokeWidth={2}\n                    fill=\"url(#growthGradient)\"\n                    animationDuration={1500}\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Volume Chart */}\n          <div className=\"flow-card bg-white/5 backdrop-blur-xl rounded-3xl border border-white/10 p-6\">\n            <h3 className=\"text-2xl font-bold text-white mb-4\">Transaction Volume</h3>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={data}>\n                  <XAxis \n                    dataKey=\"name\" \n                    axisLine={false} \n                    tickLine={false} \n                    tick={{ fill: '#ffffff80', fontSize: 12 }}\n                  />\n                  <YAxis \n                    axisLine={false} \n                    tickLine={false} \n                    tick={{ fill: '#ffffff80', fontSize: 12 }}\n                  />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"volume\"\n                    stroke=\"#06b6d4\"\n                    strokeWidth={3}\n                    dot={{ fill: '#06b6d4', strokeWidth: 2, r: 4 }}\n                    activeDot={{ r: 6, stroke: '#06b6d4', strokeWidth: 2 }}\n                    animationDuration={1500}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </div>\n\n        {/* Real-time Chart */}\n        <div className=\"flow-card bg-white/5 backdrop-blur-xl rounded-3xl border border-white/10 p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-2xl font-bold text-white\">Live Market Data</h3>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-green-400 text-sm font-medium\">Live</span>\n            </div>\n          </div>\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={realtimeData}>\n                <XAxis \n                  dataKey=\"name\" \n                  axisLine={false} \n                  tickLine={false} \n                  tick={{ fill: '#ffffff80', fontSize: 10 }}\n                  interval=\"preserveStartEnd\"\n                />\n                <YAxis \n                  axisLine={false} \n                  tickLine={false} \n                  tick={{ fill: '#ffffff80', fontSize: 12 }}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke=\"#10b981\"\n                  strokeWidth={2}\n                  dot={false}\n                  animationDuration={500}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"volume\"\n                  stroke=\"#f59e0b\"\n                  strokeWidth={2}\n                  dot={false}\n                  animationDuration={500}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n          \n          {/* Live Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6\">\n            <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n              <div className=\"text-2xl font-bold text-green-400\">\n                ${realtimeData.length > 0 ? realtimeData[realtimeData.length - 1]?.value.toFixed(0) : '2,459'}\n              </div>\n              <div className=\"text-sm text-white/60\">Current Value</div>\n            </div>\n            <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n              <div className=\"text-2xl font-bold text-blue-400\">\n                {realtimeData.length > 0 ? realtimeData[realtimeData.length - 1]?.volume.toFixed(0) : '1,847'}\n              </div>\n              <div className=\"text-sm text-white/60\">Volume</div>\n            </div>\n            <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n              <div className=\"text-2xl font-bold text-purple-400\">\n                +{realtimeData.length > 0 ? ((Math.random() * 10) + 2).toFixed(1) : '5.2'}%\n              </div>\n              <div className=\"text-sm text-white/60\">24h Change</div>\n            </div>\n            <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n              <div className=\"text-2xl font-bold text-yellow-400\">\n                {realtimeData.length}\n              </div>\n              <div className=\"text-sm text-white/60\">Data Points</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8843},"client/src/components/enhanced-physics-playground.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport Matter from 'matter-js';\nimport { motion } from 'framer-motion';\n\nexport function EnhancedPhysicsPlayground() {\n  const sceneRef = useRef<HTMLDivElement>(null);\n  const engineRef = useRef<Matter.Engine>();\n  const renderRef = useRef<Matter.Render>();\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    if (!sceneRef.current) return;\n\n    const { Engine, Render, World, Bodies, Mouse, MouseConstraint, Runner } = Matter;\n\n    // Create engine\n    const engine = Engine.create();\n    engineRef.current = engine;\n    engine.world.gravity.y = 0.8;\n\n    // Create renderer\n    const render = Render.create({\n      element: sceneRef.current,\n      engine: engine,\n      options: {\n        width: Math.min(800, window.innerWidth - 40),\n        height: 400,\n        wireframes: false,\n        background: 'transparent',\n        showVelocity: false,\n        showAngleIndicator: false,\n        showDebug: false\n      }\n    });\n    renderRef.current = render;\n\n    // Create walls\n    const wallOptions = { \n      isStatic: true, \n      render: { \n        fillStyle: 'rgba(99, 102, 241, 0.2)',\n        strokeStyle: 'rgba(99, 102, 241, 0.5)',\n        lineWidth: 2\n      } \n    };\n\n    const walls = [\n      Bodies.rectangle(render.options.width! / 2, render.options.height! - 10, render.options.width!, 20, wallOptions),\n      Bodies.rectangle(render.options.width! / 2, 10, render.options.width!, 20, wallOptions),\n      Bodies.rectangle(10, render.options.height! / 2, 20, render.options.height!, wallOptions),\n      Bodies.rectangle(render.options.width! - 10, render.options.height! / 2, 20, render.options.height!, wallOptions)\n    ];\n\n    // Add walls to world\n    World.add(engine.world, walls);\n\n    // Create mouse control\n    const mouse = Mouse.create(render.canvas);\n    const mouseConstraint = MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n          visible: false\n        }\n      }\n    });\n\n    World.add(engine.world, mouseConstraint);\n    render.mouse = mouse;\n\n    // Create runner\n    const runner = Runner.create();\n\n    // Function to add emoji balls\n    const addEmojiBall = (x?: number, y?: number) => {\n      const emojis = ['üí∞', 'üíé', 'üöÄ', '‚ö°', 'üåü', 'üí´', 'üî•', 'üíØ', 'üéØ', 'üèÜ'];\n      const emoji = emojis[Math.floor(Math.random() * emojis.length)];\n      \n      const ball = Bodies.circle(\n        x || Math.random() * (render.options.width! - 100) + 50,\n        y || 50,\n        20,\n        {\n          restitution: 0.7,\n          friction: 0.001,\n          render: {\n            fillStyle: 'transparent',\n            strokeStyle: 'rgba(99, 102, 241, 0.3)',\n            lineWidth: 1\n          }\n        }\n      );\n\n      // Add emoji as text overlay using encodeURIComponent\n      const svgString = `<svg width=\"40\" height=\"40\" xmlns=\"http://www.w3.org/2000/svg\"><text x=\"20\" y=\"28\" text-anchor=\"middle\" font-size=\"24\">${emoji}</text></svg>`;\n      ball.render.sprite = {\n        texture: `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svgString)}`,\n        xScale: 1,\n        yScale: 1\n      };\n\n      World.add(engine.world, ball);\n    };\n\n    // Auto-add balls\n    const addBallInterval = setInterval(() => {\n      if (engine.world.bodies.length < 20) {\n        addEmojiBall();\n      }\n    }, 2000);\n\n    // Add initial balls\n    for (let i = 0; i < 5; i++) {\n      setTimeout(() => addEmojiBall(), i * 500);\n    }\n\n    // Click to add balls\n    const handleClick = (event: MouseEvent) => {\n      const rect = render.canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      addEmojiBall(x, y);\n    };\n\n    render.canvas.addEventListener('click', handleClick);\n\n    // Start the engine and renderer\n    Render.run(render);\n    Runner.run(runner, engine);\n    setIsPlaying(true);\n\n    // Cleanup\n    return () => {\n      clearInterval(addBallInterval);\n      render.canvas.removeEventListener('click', handleClick);\n      Render.stop(render);\n      Runner.stop(runner);\n      Engine.clear(engine);\n      render.canvas.remove();\n      render.textures = {};\n    };\n  }, []);\n\n  const resetPlayground = () => {\n    if (engineRef.current) {\n      const bodies = engineRef.current.world.bodies.filter(body => !body.isStatic);\n      Matter.World.remove(engineRef.current.world, bodies);\n    }\n  };\n\n  const addRandomBalls = () => {\n    for (let i = 0; i < 3; i++) {\n      setTimeout(() => {\n        const x = Math.random() * 600 + 100;\n        const y = 50;\n        if (engineRef.current && renderRef.current) {\n          const emojis = ['üí∞', 'üíé', 'üöÄ', '‚ö°', 'üåü', 'üí´', 'üî•', 'üíØ', 'üéØ', 'üèÜ'];\n          const emoji = emojis[Math.floor(Math.random() * emojis.length)];\n          \n          const svgString = `<svg width=\"40\" height=\"40\" xmlns=\"http://www.w3.org/2000/svg\"><text x=\"20\" y=\"28\" text-anchor=\"middle\" font-size=\"24\">${emoji}</text></svg>`;\n          const ball = Matter.Bodies.circle(x, y, 20, {\n            restitution: 0.7,\n            friction: 0.001,\n            render: {\n              sprite: {\n                texture: `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svgString)}`,\n                xScale: 1,\n                yScale: 1\n              }\n            }\n          });\n\n          Matter.World.add(engineRef.current.world, ball);\n        }\n      }, i * 200);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 50 }}\n      whileInView={{ opacity: 1, y: 0 }}\n      viewport={{ once: true }}\n      transition={{ duration: 0.8 }}\n      className=\"bg-white/5 backdrop-blur-xl rounded-3xl border border-white/10 p-6 mb-12\"\n    >\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-2xl font-bold text-white mb-2\">Interactive Physics Playground</h3>\n        <p className=\"text-white/70\">Click to add emoji balls ‚Ä¢ Drag them around ‚Ä¢ Watch the physics!</p>\n      </div>\n      \n      <div className=\"flex justify-center mb-4\">\n        <div \n          ref={sceneRef} \n          className=\"rounded-2xl overflow-hidden border border-white/20\"\n          style={{ \n            background: 'linear-gradient(135deg, rgba(99, 102, 241, 0.1) 0%, rgba(6, 182, 212, 0.1) 100%)'\n          }}\n        />\n      </div>\n      \n      <div className=\"flex flex-wrap justify-center gap-4\">\n        <button\n          onClick={addRandomBalls}\n          className=\"px-6 py-2 bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-full font-medium hover:shadow-lg hover:shadow-indigo-500/25 transition-all duration-300 transform hover:scale-105\"\n          data-testid=\"add-balls-button\"\n        >\n          Add More Balls\n        </button>\n        <button\n          onClick={resetPlayground}\n          className=\"px-6 py-2 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full font-medium hover:shadow-lg hover:shadow-cyan-500/25 transition-all duration-300 transform hover:scale-105\"\n          data-testid=\"reset-playground-button\"\n        >\n          Reset Playground\n        </button>\n      </div>\n      \n      {isPlaying && (\n        <div className=\"text-center mt-4\">\n          <div className=\"inline-flex items-center gap-2 text-green-400 text-sm\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n            Physics Engine Active\n          </div>\n        </div>\n      )}\n    </motion.div>\n  );\n}","size_bytes":7492},"client/src/components/floating-orbs.tsx":{"content":"export function FloatingOrbs() {\n  return (\n    <div className=\"ambient-bg\">\n      <div className=\"floating-orb orb-1\"></div>\n      <div className=\"floating-orb orb-2\"></div>\n      <div className=\"floating-orb orb-3\"></div>\n    </div>\n  );\n}\n","size_bytes":242},"client/src/components/framer-coding-background.tsx":{"content":"import { motion, useAnimation, useMotionValue, useTransform } from 'framer-motion';\nimport { useEffect, useRef, useState } from 'react';\n\nconst codeSnippets = [\n  `# IT Infrastructure Management System\nimport os\nimport subprocess\nimport logging\nfrom datetime import datetime\n\nclass ITServiceManager:\n    def __init__(self):\n        self.logger = logging.getLogger('ITServices')\n        self.services_status = {}\n        \n    def check_server_health(self):\n        print(\"Checking server infrastructure...\")\n        servers = ['web-server-01', 'db-server-02', 'mail-server-03']\n        \n        for server in servers:\n            status = self.ping_server(server)\n            self.services_status[server] = status\n            print(f\"Server {server}: {'ONLINE' if status else 'OFFLINE'}\")\n            \n    def deploy_application(self, app_name, environment):\n        print(f\"Deploying {app_name} to {environment}...\")\n        deployment_steps = [\n            'Building application...',\n            'Running tests...',\n            'Creating backup...',\n            'Updating configuration...',\n            'Starting services...',\n            'Verifying deployment...'\n        ]\n        \n        for step in deployment_steps:\n            print(step)\n            # time.sleep(0.5)\n            \n        print(f\"‚úì {app_name} successfully deployed to {environment}\")`,\n\n  `// IT Support Ticketing System\nconst ITSupportSystem = {\n    ticketQueue: [],\n    technicians: [],\n    \n    createTicket(request) {\n        const ticket = {\n            id: this.generateTicketId(),\n            title: request.subject,\n            description: request.description,\n            priority: request.priority || 'medium',\n            status: 'open',\n            assignee: null,\n            createdAt: new Date()\n        };\n        \n        this.ticketQueue.push(ticket);\n        this.assignTicket(ticket);\n        return ticket;\n    },\n    \n    assignTicket(ticket) {\n        const availableTech = this.technicians.find(tech => \n            tech.available && tech.skills.includes(ticket.category)\n        );\n        \n        if (availableTech) {\n            ticket.assignee = availableTech.id;\n            availableTech.available = false;\n            this.notifyTechnician(availableTech, ticket);\n        }\n    }\n};`,\n\n  `# Network Configuration Manager\nimport yaml\nimport json\nfrom netmiko import ConnectHandler\n\ndef configure_network_infrastructure():\n    print(\"Starting network configuration deployment...\")\n    \n    # Load network device configurations\n    with open('network_config.yaml', 'r') as f:\n        config = yaml.safe_load(f)\n    \n    devices = config['network_devices']\n    \n    for device in devices:\n        print(f\"Configuring {device['hostname']}...\")\n        \n        connection = ConnectHandler(\n            device_type=device['device_type'],\n            host=device['ip_address'],\n            username=device['username'],\n            password=device['password']\n        )\n        \n        # Apply configurations\n        config_commands = device['commands']\n        output = connection.send_config_set(config_commands)\n        \n        print(f\"Configuration applied to {device['hostname']}\")\n        print(\"Saving configuration...\")\n        connection.save_config()\n        connection.disconnect()\n        \n    print(\"Network infrastructure configured successfully\")`,\n\n  `/* Cloud Infrastructure Management */\nclass CloudServicesManager {\n    constructor() {\n        this.awsServices = [];\n        this.azureServices = [];\n        this.gcpServices = [];\n    }\n    \n    async provisionInfrastructure(specs) {\n        console.log('Provisioning cloud infrastructure...');\n        \n        const resources = {\n            compute: specs.instances || [],\n            storage: specs.storage || [],\n            networking: specs.networking || [],\n            databases: specs.databases || []\n        };\n        \n        for (const [resourceType, configs] of Object.entries(resources)) {\n            console.log('Provisioning ' + resourceType + ' resources...');\n            \n            for (const config of configs) {\n                await this.createResource(resourceType, config);\n                console.log('‚úì ' + config.name + ' created successfully');\n            }\n        }\n        \n        console.log('Infrastructure provisioning completed');\n        return this.generateInfrastructureReport();\n    }\n}`\n];\n\n\n\nexport function FramerCodingBackground() {\n  const [currentSnippetIndex, setCurrentSnippetIndex] = useState(0);\n  const [currentText, setCurrentText] = useState('');\n  const [charIndex, setCharIndex] = useState(0);\n  const controls = useAnimation();\n  const terminalRef = useRef<HTMLDivElement>(null);\n\n  // Code typing animation\n  useEffect(() => {\n    const currentSnippet = codeSnippets[currentSnippetIndex];\n    \n    if (charIndex < currentSnippet.length) {\n      const timer = setTimeout(() => {\n        setCurrentText(currentSnippet.slice(0, charIndex + 1));\n        setCharIndex(charIndex + 1);\n      }, 20 + Math.random() * 30); // Vary typing speed\n      \n      return () => clearTimeout(timer);\n    } else {\n      // Move to next snippet after pause\n      const resetTimer = setTimeout(() => {\n        setCurrentSnippetIndex((prev) => (prev + 1) % codeSnippets.length);\n        setCurrentText('');\n        setCharIndex(0);\n      }, 3000);\n      \n      return () => clearTimeout(resetTimer);\n    }\n  }, [charIndex, currentSnippetIndex]);\n\n  // Matrix rain effect positions\n  const matrixChars = '01';\n  const matrixColumns = Array.from({ length: 50 }, (_, i) => i);\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none overflow-hidden z-0\">\n      {/* Animated background gradient */}\n      <motion.div \n        className=\"absolute inset-0\"\n        animate={{\n          background: [\n            'radial-gradient(ellipse 80% 50% at 20% 40%, rgba(99, 102, 241, 0.1) 0%, transparent 50%), radial-gradient(ellipse 60% 80% at 80% 60%, rgba(6, 182, 212, 0.1) 0%, transparent 50%)',\n            'radial-gradient(ellipse 60% 70% at 80% 20%, rgba(99, 102, 241, 0.15) 0%, transparent 60%), radial-gradient(ellipse 80% 60% at 20% 80%, rgba(6, 182, 212, 0.15) 0%, transparent 60%)',\n            'radial-gradient(ellipse 90% 40% at 40% 60%, rgba(99, 102, 241, 0.12) 0%, transparent 55%), radial-gradient(ellipse 50% 90% at 70% 30%, rgba(6, 182, 212, 0.12) 0%, transparent 55%)'\n          ]\n        }}\n        transition={{ \n          duration: 20, \n          repeat: Infinity, \n          repeatType: 'reverse',\n          ease: 'easeInOut'\n        }}\n      />\n\n      {/* Matrix rain columns */}\n      {matrixColumns.map((col) => (\n        <motion.div\n          key={col}\n          className=\"absolute top-0 font-mono text-sm text-green-400/30\"\n          style={{\n            left: `${(col / matrixColumns.length) * 100}%`,\n            width: '20px'\n          }}\n          initial={{ y: -100, opacity: 0 }}\n          animate={{ \n            y: ['0vh', '100vh'],\n            opacity: [0, 0.7, 0]\n          }}\n          transition={{\n            duration: Math.random() * 10 + 5,\n            repeat: Infinity,\n            ease: 'linear',\n            delay: Math.random() * 5\n          }}\n        >\n          {Array.from({ length: 20 }).map((_, i) => (\n            <motion.div\n              key={i}\n              animate={{ opacity: [0.2, 1, 0.2] }}\n              transition={{\n                duration: 0.5,\n                repeat: Infinity,\n                delay: i * 0.1\n              }}\n            >\n              {matrixChars[Math.floor(Math.random() * matrixChars.length)]}\n            </motion.div>\n          ))}\n        </motion.div>\n      ))}\n\n      {/* Live coding terminal - Enlarged and centered */}\n      <motion.div \n        className=\"absolute top-16 left-1/2 transform -translate-x-1/2 w-[800px] h-[500px] bg-black/95 backdrop-blur-lg rounded-xl border border-green-500/40 overflow-hidden shadow-2xl shadow-green-500/20\"\n        initial={{ scale: 0.8, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ duration: 1.2, ease: 'easeOut' }}\n      >\n        {/* Terminal header */}\n        <motion.div \n          className=\"bg-gradient-to-r from-green-500/30 to-green-400/20 px-4 py-3 border-b border-green-500/30 flex items-center gap-3\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.5 }}\n        >\n          <motion.div \n            className=\"w-3 h-3 bg-red-500 rounded-full\"\n            whileHover={{ scale: 1.2 }}\n            animate={{ opacity: [0.7, 1, 0.7] }}\n            transition={{ duration: 2, repeat: Infinity }}\n          />\n          <motion.div \n            className=\"w-3 h-3 bg-yellow-500 rounded-full\"\n            whileHover={{ scale: 1.2 }}\n            animate={{ opacity: [0.7, 1, 0.7] }}\n            transition={{ duration: 2, repeat: Infinity, delay: 0.3 }}\n          />\n          <motion.div \n            className=\"w-3 h-3 bg-green-500 rounded-full\"\n            whileHover={{ scale: 1.2 }}\n            animate={{ opacity: [0.7, 1, 0.7] }}\n            transition={{ duration: 2, repeat: Infinity, delay: 0.6 }}\n          />\n          <motion.span \n            className=\"ml-2 text-green-300 text-sm font-mono\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          >\nit-services-manager.py\n          </motion.span>\n        </motion.div>\n\n        {/* Terminal content */}\n        <div className=\"p-4 h-full overflow-auto\" ref={terminalRef}>\n          <motion.div \n            className=\"text-green-400 font-mono text-xs leading-relaxed\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1.2 }}\n          >\n            <motion.div \n              className=\"text-green-300 mb-2\"\n              initial={{ x: -20 }}\n              animate={{ x: 0 }}\n              transition={{ delay: 1.5 }}\n            >\n              $ python it-services-manager.py --deploy\n            </motion.div>\n            <div className=\"whitespace-pre-wrap\">\n              {currentText}\n              <motion.span\n                className=\"bg-green-400 w-2 h-4 inline-block ml-1\"\n                animate={{ opacity: [0, 1, 0] }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n            </div>\n          </motion.div>\n        </div>\n      </motion.div>\n\n\n\n\n\n      {/* Floating code elements */}\n      <div className=\"absolute inset-0\">\n        {['{ }', '[ ]', '( )', '//', '#', '*', '=>', '++', 'if', 'else', 'def', 'class'].map((symbol, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute font-mono text-sm text-indigo-400/20\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            initial={{ opacity: 0, scale: 0 }}\n            animate={{ \n              opacity: [0, 0.3, 0],\n              scale: [0.5, 1, 0.5],\n              rotate: [0, 360],\n              y: [-20, -40, -20]\n            }}\n            transition={{\n              duration: Math.random() * 10 + 5,\n              repeat: Infinity,\n              delay: Math.random() * 5,\n              ease: 'easeInOut'\n            }}\n          >\n            {symbol}\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Data stream lines */}\n      {[25, 50, 75].map((position, index) => (\n        <motion.div\n          key={index}\n          className=\"absolute top-0 bottom-0 w-px opacity-30\"\n          style={{ left: `${position}%` }}\n          animate={{\n            background: [\n              'linear-gradient(to bottom, transparent, #6366F1, transparent)',\n              'linear-gradient(to bottom, transparent, #06B6D4, transparent)',\n              'linear-gradient(to bottom, transparent, #10B981, transparent)'\n            ]\n          }}\n          transition={{\n            duration: 4,\n            repeat: Infinity,\n            delay: index * 1.3\n          }}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":12057},"client/src/components/framer-hero-section.tsx":{"content":"import { motion, useScroll, useTransform, useInView } from 'framer-motion';\nimport { useRef, useEffect, useState } from 'react';\nimport { Shield, Lock, Eye, Zap, Activity, Code2, Terminal, Server } from 'lucide-react';\n\nconst itServicesFeatures = [\n  {\n    icon: Server,\n    title: \"Infrastructure Management\",\n    description: \"Complete server setup, maintenance, and cloud infrastructure management\",\n    color: \"#00FF88\"\n  },\n  {\n    icon: Code2,\n    title: \"Software Development\", \n    description: \"Custom application development and system integration solutions\",\n    color: \"#6366F1\"\n  },\n  {\n    icon: Shield,\n    title: \"IT Support & Helpdesk\",\n    description: \"Technical support, troubleshooting, and user assistance services\",\n    color: \"#06B6D4\"\n  },\n  {\n    icon: Terminal,\n    title: \"System Administration\",\n    description: \"Server management, database administration, and system optimization\",\n    color: \"#10B981\"\n  },\n  {\n    icon: Activity,\n    title: \"Network Solutions\",\n    description: \"Network design, implementation, and ongoing maintenance services\",\n    color: \"#F59E0B\"\n  },\n  {\n    icon: Zap,\n    title: \"Digital Transformation\",\n    description: \"Modernizing business processes with cutting-edge technology solutions\",\n    color: \"#EF4444\"\n  }\n];\n\nexport function FramerHeroSection() {\n  const heroRef = useRef<HTMLDivElement>(null);\n  const statsRef = useRef<HTMLDivElement>(null);\n  const isInView = useInView(heroRef, { once: true, amount: 0.3 });\n  const statsInView = useInView(statsRef, { once: true, amount: 0.5 });\n  const [statsAnimated, setStatsAnimated] = useState(false);\n\n  const { scrollY } = useScroll();\n  const y = useTransform(scrollY, [0, 500], [0, 150]);\n  const opacity = useTransform(scrollY, [0, 300], [1, 0]);\n\n  // Simple stats without counters - no fake data\n  const businessStats = [\n    { label: 'Years Experience', value: '15+', color: '#00FF88' },\n    { label: 'Projects Completed', value: '500+', color: '#06B6D4' },\n    { label: 'Happy Clients', value: '200+', color: '#F59E0B' },\n    { label: 'Team Members', value: '25+', color: '#6366F1' }\n  ];\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n        delayChildren: 0.3\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { \n      y: 100, \n      opacity: 0,\n      scale: 0.8\n    },\n    visible: {\n      y: 0,\n      opacity: 1,\n      scale: 1,\n      transition: {\n        type: 'spring',\n        stiffness: 100,\n        damping: 12,\n        duration: 0.8\n      }\n    }\n  };\n\n  const floatingVariants = {\n    animate: {\n      y: [-10, 10, -10],\n      rotate: [-5, 5, -5],\n      scale: [1, 1.05, 1],\n      transition: {\n        duration: 6,\n        repeat: Infinity,\n        ease: 'easeInOut'\n      }\n    }\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center pt-20 pb-10 overflow-hidden\">\n      <motion.div \n        className=\"container max-w-7xl mx-auto px-6 relative z-10\"\n        ref={heroRef}\n        style={{ y, opacity }}\n      >\n        \n        {/* Main Hero Content */}\n        <motion.div \n          className=\"text-center mb-16\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate={isInView ? \"visible\" : \"hidden\"}\n        >\n          <motion.div \n            className=\"mb-8 relative\"\n            variants={itemVariants}\n          >\n            <motion.h1 \n              className=\"text-6xl md:text-8xl font-bold mb-6 leading-none\"\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={isInView ? { opacity: 1, scale: 1 } : { opacity: 0, scale: 0.5 }}\n              transition={{ \n                duration: 1.2,\n                type: 'spring',\n                stiffness: 50,\n                damping: 8\n              }}\n            >\n              <motion.span \n                className=\"block bg-gradient-to-r from-blue-400 via-cyan-400 to-indigo-400 bg-clip-text text-transparent\"\n                animate={{ \n                  backgroundPosition: ['0% 50%', '100% 50%', '0% 50%']\n                }}\n                transition={{ \n                  duration: 5, \n                  repeat: Infinity,\n                  ease: 'linear'\n                }}\n                style={{ backgroundSize: '200% 200%' }}\n              >\n                IT Solutions\n              </motion.span>\n              <motion.span \n                className=\"block text-white\"\n                initial={{ x: -100, opacity: 0 }}\n                animate={isInView ? { x: 0, opacity: 1 } : { x: -100, opacity: 0 }}\n                transition={{ delay: 0.3, duration: 0.8 }}\n              >\n                That Drive\n              </motion.span>\n              <motion.span \n                className=\"block bg-gradient-to-r from-indigo-400 via-purple-400 to-cyan-400 bg-clip-text text-transparent\"\n                initial={{ x: 100, opacity: 0 }}\n                animate={isInView ? { x: 0, opacity: 1 } : { x: 100, opacity: 0 }}\n                transition={{ delay: 0.6, duration: 0.8 }}\n              >\n                Success\n              </motion.span>\n            </motion.h1>\n            \n            {/* Animated security badge */}\n            <motion.div \n              className=\"absolute -top-8 -right-8 md:right-20\"\n              variants={floatingVariants}\n              initial={{ scale: 0, rotate: -180 }}\n              animate={isInView ? { scale: 1, rotate: 0 } : { scale: 0, rotate: -180 }}\n              transition={{ delay: 1, duration: 1, type: 'spring' }}\n            >\n              <motion.div \n                className=\"bg-green-500/20 backdrop-blur-md border border-green-500/40 rounded-full p-4\"\n                whileHover={{ \n                  scale: 1.1,\n                  backgroundColor: 'rgba(34, 197, 94, 0.3)',\n                  boxShadow: '0 0 30px rgba(34, 197, 94, 0.5)'\n                }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Shield className=\"w-10 h-10 text-green-400\" />\n              </motion.div>\n            </motion.div>\n          </motion.div>\n          \n          <motion.p \n            className=\"text-xl md:text-2xl text-gray-300 mb-12 max-w-4xl mx-auto leading-relaxed\"\n            variants={itemVariants}\n          >\n            Transforming businesses through innovative technology solutions and expert IT services. \n            <motion.span\n              className=\"text-cyan-400\"\n              animate={{ opacity: [0.7, 1, 0.7] }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              {\" Custom development\"}\n            </motion.span>, infrastructure management, and digital transformation \n            strategies tailored to your unique needs.\n          </motion.p>\n          \n          {/* CTA Buttons */}\n          <motion.div \n            className=\"flex flex-col sm:flex-row gap-6 justify-center mb-16\"\n            variants={itemVariants}\n          >\n            <motion.button \n              className=\"group relative overflow-hidden bg-gradient-to-r from-indigo-600 to-cyan-600 px-8 py-4 rounded-xl font-semibold text-white\"\n              whileHover={{ scale: 1.05, y: -2 }}\n              whileTap={{ scale: 0.95 }}\n              initial={{ opacity: 0, x: -50 }}\n              animate={isInView ? { opacity: 1, x: 0 } : { opacity: 0, x: -50 }}\n              transition={{ delay: 1.2, duration: 0.6 }}\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-cyan-600 to-indigo-600 opacity-0 group-hover:opacity-100\"\n                initial={false}\n                transition={{ duration: 0.3 }}\n              />\n              <span className=\"relative flex items-center gap-3\">\n                <Code2 className=\"w-5 h-5\" />\n                Get Started\n                <motion.div \n                  className=\"w-2 h-2 bg-green-400 rounded-full\"\n                  animate={{ scale: [1, 1.5, 1], opacity: [1, 0.5, 1] }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n              </span>\n            </motion.button>\n            \n            <motion.button \n              className=\"group border-2 border-cyan-500/50 hover:border-cyan-400 px-8 py-4 rounded-xl font-semibold text-cyan-400 hover:text-white hover:bg-cyan-500/10 transition-all duration-300\"\n              whileHover={{ scale: 1.05, y: -2 }}\n              whileTap={{ scale: 0.95 }}\n              initial={{ opacity: 0, x: 50 }}\n              animate={isInView ? { opacity: 1, x: 0 } : { opacity: 0, x: 50 }}\n              transition={{ delay: 1.4, duration: 0.6 }}\n            >\n              <span className=\"flex items-center gap-3\">\n                <Server className=\"w-5 h-5\" />\n                View Services\n                <motion.div\n                  animate={{ rotate: [0, 12, -12, 0] }}\n                  transition={{ duration: 2, repeat: Infinity, repeatDelay: 3 }}\n                >\n                  <Code2 className=\"w-4 h-4\" />\n                </motion.div>\n              </span>\n            </motion.button>\n          </motion.div>\n          \n          {/* Business Stats */}\n          <motion.div \n            className=\"grid grid-cols-2 md:grid-cols-4 gap-8\" \n            ref={statsRef}\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={statsInView ? \"visible\" : \"hidden\"}\n          >\n            {businessStats.map((stat, index) => (\n              <motion.div \n                key={index}\n                className=\"relative overflow-hidden bg-black/30 backdrop-blur-md border border-white/10 rounded-2xl p-6 group\"\n                variants={itemVariants}\n                whileHover={{ \n                  y: -10,\n                  scale: 1.05,\n                  borderColor: stat.color + '50',\n                  backgroundColor: 'rgba(0, 0, 0, 0.5)'\n                }}\n                transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n              >\n                <motion.div \n                  className=\"text-4xl md:text-5xl font-bold mb-2\"\n                  style={{ color: stat.color }}\n                  animate={{ \n                    textShadow: [\n                      `0 0 10px ${stat.color}40`,\n                      `0 0 20px ${stat.color}60`,\n                      `0 0 10px ${stat.color}40`\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  {stat.value}\n                </motion.div>\n                <div className=\"text-gray-400 text-sm font-medium\">{stat.label}</div>\n                \n                {/* Progress bar */}\n                <motion.div \n                  className=\"w-full bg-gray-700 rounded-full h-1 mt-3 overflow-hidden\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 2 + index * 0.2 }}\n                >\n                  <motion.div \n                    className=\"h-1 rounded-full\"\n                    style={{ backgroundColor: stat.color }}\n                    initial={{ width: 0 }}\n                    animate={{ width: '100%' }}\n                    transition={{ \n                      delay: 2.2 + index * 0.2, \n                      duration: 1.5,\n                      ease: 'easeOut'\n                    }}\n                  />\n                </motion.div>\n\n                {/* Hover effect overlay */}\n                <motion.div\n                  className=\"absolute inset-0 opacity-0 group-hover:opacity-100\"\n                  style={{\n                    background: `linear-gradient(45deg, ${stat.color}10, transparent)`\n                  }}\n                  transition={{ duration: 0.3 }}\n                />\n              </motion.div>\n            ))}\n          </motion.div>\n        </motion.div>\n        \n        {/* IT Services Grid */}\n        <motion.div \n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mt-20\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate={isInView ? \"visible\" : \"hidden\"}\n        >\n          {itServicesFeatures.map((feature, index) => {\n            const IconComponent = feature.icon;\n            return (\n              <motion.div \n                key={index}\n                className=\"relative group\"\n                variants={itemVariants}\n                whileHover={{ y: -15, rotateY: 5 }}\n                style={{ transformStyle: 'preserve-3d' }}\n              >\n                <motion.div\n                  className=\"bg-black/40 backdrop-blur-md border border-white/10 rounded-2xl p-6 h-full relative overflow-hidden\"\n                  whileHover={{ \n                    borderColor: feature.color + '50',\n                    backgroundColor: 'rgba(0, 0, 0, 0.6)'\n                  }}\n                  transition={{ duration: 0.3 }}\n                >\n                  <div className=\"flex items-start gap-4 relative z-10\">\n                    <motion.div \n                      className=\"p-3 rounded-xl border border-white/20 group-hover:border-white/40 transition-colors duration-300\"\n                      style={{ backgroundColor: feature.color + '20' }}\n                      whileHover={{ \n                        scale: 1.1,\n                        rotate: [0, -5, 5, 0],\n                        backgroundColor: feature.color + '30'\n                      }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <IconComponent \n                        className=\"w-6 h-6\"\n                        style={{ color: feature.color }}\n                      />\n                    </motion.div>\n                    <div>\n                      <motion.h3 \n                        className=\"text-lg font-semibold text-white mb-2\"\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ delay: 1.5 + index * 0.1 }}\n                      >\n                        {feature.title}\n                      </motion.h3>\n                      <motion.p \n                        className=\"text-gray-400 text-sm leading-relaxed\"\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: 1 }}\n                        transition={{ delay: 1.7 + index * 0.1 }}\n                      >\n                        {feature.description}\n                      </motion.p>\n                    </div>\n                  </div>\n                  \n                  {/* Animated glow effect */}\n                  <motion.div\n                    className=\"absolute inset-0 opacity-0 group-hover:opacity-100 pointer-events-none\"\n                    style={{\n                      background: `radial-gradient(circle at center, ${feature.color}15, transparent 70%)`\n                    }}\n                    transition={{ duration: 0.5 }}\n                  />\n                  \n                  {/* Animated border effect */}\n                  <motion.div\n                    className=\"absolute bottom-0 left-0 right-0 h-px opacity-0 group-hover:opacity-100\"\n                    style={{ \n                      background: `linear-gradient(90deg, transparent, ${feature.color}, transparent)`\n                    }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </motion.div>\n              </motion.div>\n            );\n          })}\n        </motion.div>\n        \n        {/* Trust Indicators */}\n        <motion.div \n          className=\"mt-20 text-center\"\n          initial={{ opacity: 0, y: 50 }}\n          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}\n          transition={{ delay: 2, duration: 0.8 }}\n        >\n          <p className=\"text-gray-400 text-sm mb-6\">Partnered with industry-leading technology providers</p>\n          <motion.div \n            className=\"flex justify-center items-center gap-8 opacity-50\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={isInView ? \"visible\" : \"hidden\"}\n          >\n            {['Microsoft', 'AWS', 'Google Cloud', 'VMware'].map((partner, index) => (\n              <motion.div \n                key={partner}\n                className=\"text-xl font-mono text-gray-600 hover:text-gray-400 transition-colors cursor-pointer\"\n                variants={itemVariants}\n                whileHover={{ \n                  scale: 1.1,\n                  color: '#9CA3AF'\n                }}\n              >\n                {partner}\n              </motion.div>\n            ))}\n          </motion.div>\n        </motion.div>\n      </motion.div>\n      \n      {/* Background security elements */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {Array.from({ length: 3 }).map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute opacity-5\"\n            style={{\n              left: `${20 + i * 30}%`,\n              top: `${20 + i * 20}%`,\n            }}\n            animate={{\n              rotate: [0, 360],\n              scale: [0.5 + i * 0.3, 0.8 + i * 0.3, 0.5 + i * 0.3]\n            }}\n            transition={{\n              duration: 20 + i * 5,\n              repeat: Infinity,\n              ease: 'linear'\n            }}\n          >\n            <Shield className=\"w-32 h-32 text-indigo-400\" />\n          </motion.div>\n        ))}\n      </div>\n    </section>\n  );\n}","size_bytes":17509},"client/src/components/gsap-scroll-backgrounds.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport { ScrollSmoother } from 'gsap/ScrollSmoother';\nimport { motion } from 'framer-motion';\n\ngsap.registerPlugin(ScrollTrigger, ScrollSmoother);\n\nexport function GSAPScrollBackgrounds() {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const smoothWrapperRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!containerRef.current || !smoothWrapperRef.current || !contentRef.current) return;\n\n    // Initialize ScrollSmoother\n    const smoother = ScrollSmoother.create({\n      wrapper: smoothWrapperRef.current,\n      content: contentRef.current,\n      smooth: 2,\n      effects: true,\n      smoothTouch: 0.1,\n    });\n\n    // Background transitions timeline\n    const tl = gsap.timeline({\n      scrollTrigger: {\n        trigger: containerRef.current,\n        start: \"top top\",\n        end: \"bottom bottom\",\n        scrub: 1,\n      }\n    });\n\n    // Section 1: Programming/Coding (0-25%)\n    tl.to(\".bg-programming\", {\n      opacity: 1,\n      duration: 1,\n    })\n    .to(\".bg-programming\", {\n      opacity: 0,\n      duration: 1,\n    }, 0.25)\n\n    // Section 2: Framer Motion (25-50%) \n    .to(\".bg-framer\", {\n      opacity: 1,\n      duration: 1,\n    }, 0.25)\n    .to(\".bg-framer\", {\n      opacity: 0,\n      duration: 1,\n    }, 0.5)\n\n    // Section 3: Network/Tech (50-75%)\n    .to(\".bg-network\", {\n      opacity: 1,\n      duration: 1,\n    }, 0.5)\n    .to(\".bg-network\", {\n      opacity: 0,\n      duration: 1,\n    }, 0.75)\n\n    // Section 4: Server Room (75-100%)\n    .to(\".bg-server\", {\n      opacity: 1,\n      duration: 1,\n    }, 0.75);\n\n    // Parallax effects for different layers\n    gsap.set(\".parallax-slow\", { y: 0 });\n    gsap.set(\".parallax-fast\", { y: 0 });\n\n    gsap.to(\".parallax-slow\", {\n      y: -200,\n      ease: \"none\",\n      scrollTrigger: {\n        trigger: containerRef.current,\n        start: \"top bottom\",\n        end: \"bottom top\",\n        scrub: true\n      }\n    });\n\n    gsap.to(\".parallax-fast\", {\n      y: -400,\n      ease: \"none\", \n      scrollTrigger: {\n        trigger: containerRef.current,\n        start: \"top bottom\",\n        end: \"bottom top\",\n        scrub: true\n      }\n    });\n\n    return () => {\n      smoother.kill();\n      ScrollTrigger.getAll().forEach(trigger => trigger.kill());\n    };\n  }, []);\n\n  return (\n    <div ref={containerRef} className=\"fixed inset-0 pointer-events-none\">\n      {/* Programming/Coding Background */}\n      <div className=\"bg-programming absolute inset-0 opacity-100\">\n        <ProgrammingBackground />\n      </div>\n\n      {/* Framer Motion Background */}\n      <div className=\"bg-framer absolute inset-0 opacity-0\">\n        <FramerMotionBackground />\n      </div>\n\n      {/* Network/Tech Background */}\n      <div className=\"bg-network absolute inset-0 opacity-0\">\n        <NetworkTechBackground />\n      </div>\n\n      {/* Server Room Background */}\n      <div className=\"bg-server absolute inset-0 opacity-0\">\n        <ServerRoomBackground />\n      </div>\n    </div>\n  );\n}\n\n// Programming/Coding Background Component\nfunction ProgrammingBackground() {\n  const codeSnippets = [\n    '// IT Infrastructure Management',\n    'class ServerManager {',\n    '  constructor() {',\n    '    this.servers = [];',\n    '    this.monitoring = true;',\n    '  }',\n    '',\n    '  deployApplication(app) {',\n    '    console.log(`Deploying ${app}...`);',\n    '    return this.executeDeployment(app);',\n    '  }',\n    '}'\n  ];\n\n  return (\n    <div className=\"relative w-full h-full overflow-hidden\">\n      {/* Animated gradient */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-950 via-slate-900 to-indigo-950\" />\n      \n      {/* Large terminal window */}\n      <div className=\"absolute top-20 left-1/2 transform -translate-x-1/2 w-[900px] h-[500px] bg-black/95 backdrop-blur-lg rounded-xl border border-green-500/40 overflow-hidden shadow-2xl parallax-slow\">\n        {/* Terminal header */}\n        <div className=\"bg-gradient-to-r from-green-500/30 to-green-400/20 px-4 py-3 border-b border-green-500/30 flex items-center gap-3\">\n          <div className=\"flex gap-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n          </div>\n          <span className=\"ml-2 text-green-300 text-sm font-mono\">it-services-manager.js</span>\n        </div>\n\n        {/* Terminal content */}\n        <div className=\"p-6 h-full overflow-hidden\">\n          <div className=\"text-green-400 font-mono text-sm leading-relaxed\">\n            <div className=\"text-green-300 mb-4\">$ node it-services-manager.js --deploy</div>\n            {codeSnippets.map((line, index) => (\n              <div key={index} className=\"mb-1 typing-animation\" style={{ animationDelay: `${index * 0.1}s` }}>\n                {line}\n              </div>\n            ))}\n            <div className=\"inline-block w-2 h-5 bg-green-400 animate-pulse ml-1\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Floating code elements */}\n      <div className=\"parallax-fast\">\n        {['{ }', '[ ]', '( )', '//', '#', '*', '=>', '++'].map((symbol, i) => (\n          <div\n            key={i}\n            className=\"absolute font-mono text-lg text-indigo-400/20 animate-float\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animationDelay: `${i * 0.5}s`,\n              animationDuration: `${4 + Math.random() * 2}s`\n            }}\n          >\n            {symbol}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Framer Motion Background Component\nfunction FramerMotionBackground() {\n  return (\n    <div className=\"relative w-full h-full overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-purple-950 via-indigo-900 to-blue-950\" />\n      \n      {/* Animated particles with Framer Motion style */}\n      <motion.div className=\"absolute inset-0 parallax-slow\">\n        {Array.from({ length: 20 }).map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute w-4 h-4 bg-purple-400/30 rounded-full\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            animate={{\n              scale: [1, 1.5, 1],\n              opacity: [0.3, 1, 0.3],\n              rotate: [0, 180, 360],\n            }}\n            transition={{\n              duration: 3 + Math.random() * 2,\n              repeat: Infinity,\n              delay: i * 0.2,\n              ease: \"easeInOut\"\n            }}\n          />\n        ))}\n      </motion.div>\n\n      {/* Motion graphics elements */}\n      <div className=\"absolute inset-0 parallax-fast\">\n        {['motion.div', 'animate={}', 'transition={}', 'variants={}'].map((text, i) => (\n          <div\n            key={i}\n            className=\"absolute font-mono text-sm text-purple-400/40 animate-bounce\"\n            style={{\n              left: `${20 + i * 20}%`,\n              top: `${30 + i * 15}%`,\n              animationDelay: `${i * 0.5}s`,\n              animationDuration: '3s'\n            }}\n          >\n            {text}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Network/Tech Background Component\nfunction NetworkTechBackground() {\n  return (\n    <div className=\"relative w-full h-full overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-950 via-teal-900 to-green-950\" />\n      \n      {/* Network nodes */}\n      <div className=\"parallax-slow\">\n        {Array.from({ length: 12 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-6 h-6 bg-cyan-400/50 rounded-full border border-cyan-300/70 animate-pulse\"\n            style={{\n              left: `${15 + (i % 4) * 20}%`,\n              top: `${20 + Math.floor(i / 4) * 25}%`,\n              animationDelay: `${i * 0.3}s`,\n              animationDuration: '2s'\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Connecting lines */}\n      <div className=\"parallax-fast\">\n        {Array.from({ length: 8 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute h-px bg-gradient-to-r from-transparent via-cyan-400/40 to-transparent animate-pulse\"\n            style={{\n              left: `${10 + (i % 3) * 25}%`,\n              top: `${30 + Math.floor(i / 3) * 20}%`,\n              width: '25%',\n              transform: `rotate(${i * 45}deg)`,\n              animationDelay: `${i * 0.4}s`\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Data packets */}\n      <div className=\"parallax-slow\">\n        {Array.from({ length: 6 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-3 h-3 bg-green-400 rounded-full animate-ping\"\n            style={{\n              left: `${20 + i * 15}%`,\n              top: `${40 + (i % 2) * 20}%`,\n              animationDelay: `${i * 0.6}s`,\n              animationDuration: '3s'\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Server Room Background Component\nfunction ServerRoomBackground() {\n  return (\n    <div className=\"relative w-full h-full overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-950 via-gray-900 to-slate-800\" />\n      \n      {/* Server rack lights */}\n      <div className=\"parallax-slow\">\n        {Array.from({ length: 8 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-2 h-12 rounded-full bg-gradient-to-b from-green-400 to-green-600 animate-pulse\"\n            style={{\n              left: `${15 + i * 10}%`,\n              top: '25%',\n              animationDelay: `${i * 0.2}s`,\n              animationDuration: '2s',\n              boxShadow: '0 0 10px #22c55e'\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Blinking status indicators */}\n      <div className=\"parallax-fast\">\n        {Array.from({ length: 16 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-2 h-2 rounded-full animate-ping\"\n            style={{\n              left: `${10 + (i % 8) * 10}%`,\n              top: `${50 + Math.floor(i / 8) * 25}%`,\n              backgroundColor: i % 3 === 0 ? '#22c55e' : i % 3 === 1 ? '#3b82f6' : '#f59e0b',\n              animationDelay: `${i * 0.3}s`,\n              animationDuration: '1.5s'\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Data flow lines */}\n      <div className=\"parallax-slow\">\n        {[20, 40, 60, 80].map((position, index) => (\n          <div\n            key={index}\n            className=\"absolute top-0 bottom-0 w-px bg-gradient-to-b from-transparent via-blue-400/30 to-transparent animate-pulse\"\n            style={{ \n              left: `${position}%`,\n              animationDelay: `${index * 0.5}s`,\n              animationDuration: '3s'\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Smooth wrapper components for GSAP ScrollSmoother\nexport function SmoothWrapper({ children }: { children: React.ReactNode }) {\n  return (\n    <div id=\"smooth-wrapper\" className=\"overflow-hidden\">\n      <div id=\"smooth-content\">\n        {children}\n      </div>\n    </div>\n  );\n}","size_bytes":11447},"client/src/components/hero-section.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { useLenis } from '@/hooks/use-lenis';\n\nexport function HeroSection() {\n  const { scrollTo } = useLenis();\n  const particlesRef = useRef<HTMLDivElement>(null);\n  const statsRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Create particles\n    if (particlesRef.current) {\n      const particleCount = 50;\n      for (let i = 0; i < particleCount; i++) {\n        const particle = document.createElement('div');\n        particle.className = 'particle';\n        particle.style.left = Math.random() * 100 + '%';\n        particle.style.animationDelay = Math.random() * 15 + 's';\n        particle.style.animationDuration = (Math.random() * 10 + 10) + 's';\n        particlesRef.current.appendChild(particle);\n      }\n    }\n\n    // Animate counters when visible\n    const animateCounters = () => {\n      if (typeof window !== 'undefined' && window.gsap && statsRef.current) {\n        const counters = statsRef.current.querySelectorAll('[data-count]');\n        counters.forEach(counter => {\n          const target = parseFloat(counter.getAttribute('data-count') || '0');\n          window.gsap.fromTo(counter, \n            { innerText: 0 },\n            {\n              duration: 2,\n              innerText: target,\n              snap: { innerText: target === 99.9 ? 0.1 : 1 },\n              scrollTrigger: {\n                trigger: counter,\n                start: 'top 80%',\n              },\n              onUpdate: function() {\n                const element = this.targets()[0] as HTMLElement;\n                if (target === 99.9) {\n                  element.innerText = parseFloat(element.innerText).toFixed(1);\n                } else {\n                  element.innerText = Math.ceil(parseFloat(element.innerText)).toString();\n                }\n              }\n            }\n          );\n        });\n      }\n    };\n\n    const timer = setTimeout(animateCounters, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleCTAClick = (e: React.MouseEvent<HTMLAnchorElement>, target: string) => {\n    e.preventDefault();\n    const targetElement = document.getElementById(target);\n    if (targetElement) {\n      scrollTo(targetElement, { offset: -80 });\n    }\n  };\n\n  return (\n    <section className=\"hero min-h-screen flex items-center relative pt-20\">\n      <div className=\"particles absolute w-full h-full overflow-hidden pointer-events-none\" ref={particlesRef}>\n        {/* Particles will be generated by useEffect */}\n      </div>\n      \n      <div className=\"container max-w-6xl mx-auto px-8\">\n        <div className=\"hero-content text-center max-w-4xl mx-auto fade-in\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6 text-white drop-shadow-2xl\">\n            <span className=\"bg-gradient-to-r from-cyan-400 via-blue-500 to-indigo-600 bg-clip-text text-transparent\">\n              Secure Digital Infrastructure\n            </span>\n          </h1>\n          <p className=\"text-xl md:text-xl text-white/90 mb-12 leading-relaxed drop-shadow-lg\">\n            Protecting your digital assets with enterprise-grade cybersecurity solutions. Advanced threat detection, real-time monitoring, and AI-powered defense systems.\n          </p>\n          \n          <div className=\"hero-actions flex flex-col sm:flex-row gap-4 justify-center mb-16\">\n            <a \n              href=\"#services\" \n              onClick={(e) => handleCTAClick(e, 'services')}\n              className=\"bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-500 hover:to-orange-500 px-8 py-4 rounded-lg font-bold text-white transition-all duration-300 transform hover:scale-105 shadow-2xl\"\n              data-testid=\"hero-get-started\"\n            >\n              üõ°Ô∏è Start Security Audit\n            </a>\n            <a \n              href=\"#contact\" \n              onClick={(e) => handleCTAClick(e, 'contact')}\n              className=\"bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 px-8 py-4 rounded-lg font-bold text-white transition-all duration-300 transform hover:scale-105 shadow-2xl\"\n              data-testid=\"hero-watch-demo\"\n            >\n              üì∫ Watch Demo\n            </a>\n          </div>\n          \n          <div className=\"stats-grid grid grid-cols-1 md:grid-cols-4 gap-6\" ref={statsRef}>\n            <div className=\"stat-item text-center p-6 bg-black/50 backdrop-blur-md rounded-2xl border border-green-500/30 shadow-2xl\" data-testid=\"stat-threat-detection\">\n              <span className=\"stat-number text-4xl font-bold text-green-400 block\" data-count=\"99.9\">0</span>%\n              <div className=\"stat-label text-white/90 text-sm mt-2\">Threat Detection</div>\n            </div>\n            <div className=\"stat-item text-center p-6 bg-black/50 backdrop-blur-md rounded-2xl border border-cyan-500/30 shadow-2xl\" data-testid=\"stat-systems-protected\">\n              <span className=\"stat-number text-4xl font-bold text-cyan-400 block\" data-count=\"2847\">0</span>\n              <div className=\"stat-label text-white/90 text-sm mt-2\">Active Shields</div>\n            </div>\n            <div className=\"stat-item text-center p-6 bg-black/50 backdrop-blur-md rounded-2xl border border-red-500/30 shadow-2xl\" data-testid=\"stat-threats-blocked\">\n              <span className=\"stat-number text-4xl font-bold text-red-400 block\" data-count=\"1254\">0</span>\n              <div className=\"stat-label text-white/90 text-sm mt-2\">Threats Blocked</div>\n            </div>\n            <div className=\"stat-item text-center p-6 bg-black/50 backdrop-blur-md rounded-2xl border border-yellow-500/30 shadow-2xl\" data-testid=\"stat-monitoring\">\n              <span className=\"stat-number text-4xl font-bold text-yellow-400 block\" data-count=\"24\">0</span>/7\n              <div className=\"stat-label text-white/90 text-sm mt-2\">Monitoring</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5927},"client/src/components/jeton-inspired-backgrounds.tsx":{"content":"\nimport { useEffect, useRef, useState } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport { ScrollSmoother } from 'gsap/ScrollSmoother';\n\ngsap.registerPlugin(ScrollTrigger, ScrollSmoother);\n\nexport function JetonInspiredBackgrounds() {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Background transitions with scroll triggers\n    const sections = [\n      { selector: '.hero-section', background: 'hero' },\n      { selector: '.services-section', background: 'services' },\n      { selector: '.solutions-section', background: 'solutions' },\n      { selector: '.technology-section', background: 'technology' },\n      { selector: '.contact-section', background: 'contact' }\n    ];\n\n    sections.forEach((section, index) => {\n      const element = document.querySelector(section.selector);\n      if (!element) return;\n\n      ScrollTrigger.create({\n        trigger: element,\n        start: \"top 80%\",\n        end: \"bottom 20%\",\n        onEnter: () => {\n          gsap.to(`.bg-${section.background}`, { opacity: 1, duration: 1.5, ease: \"power2.out\" });\n          gsap.to(`.bg-layer:not(.bg-${section.background})`, { opacity: 0, duration: 1.5, ease: \"power2.out\" });\n        },\n        onLeave: () => {\n          if (index < sections.length - 1) {\n            gsap.to(`.bg-${section.background}`, { opacity: 0, duration: 1.5, ease: \"power2.out\" });\n          }\n        },\n        onEnterBack: () => {\n          gsap.to(`.bg-${section.background}`, { opacity: 1, duration: 1.5, ease: \"power2.out\" });\n          gsap.to(`.bg-layer:not(.bg-${section.background})`, { opacity: 0, duration: 1.5, ease: \"power2.out\" });\n        },\n      });\n    });\n\n    // Parallax effects\n    gsap.to(\".parallax-bg\", {\n      y: -100,\n      ease: \"none\",\n      scrollTrigger: {\n        trigger: containerRef.current,\n        start: \"top bottom\",\n        end: \"bottom top\",\n        scrub: 0.5\n      }\n    });\n\n    gsap.to(\".parallax-mid\", {\n      y: -200,\n      ease: \"none\", \n      scrollTrigger: {\n        trigger: containerRef.current,\n        start: \"top bottom\",\n        end: \"bottom top\",\n        scrub: 1\n      }\n    });\n\n    gsap.to(\".parallax-front\", {\n      y: -300,\n      ease: \"none\",\n      scrollTrigger: {\n        trigger: containerRef.current,\n        start: \"top bottom\",\n        end: \"bottom top\",\n        scrub: 1.5\n      }\n    });\n\n    return () => {\n      ScrollTrigger.getAll().forEach(trigger => trigger.kill());\n    };\n  }, []);\n\n  return (\n    <div ref={containerRef} className=\"fixed inset-0 pointer-events-none z-0\">\n      {/* Hero Section - Jeton-style Raining Code */}\n      <div className=\"bg-layer bg-hero absolute inset-0 opacity-100\">\n        <JetonRainingCodeBackground />\n      </div>\n\n      {/* Services Section - CLI Terminal */}\n      <div className=\"bg-layer bg-services absolute inset-0 opacity-0\">\n        <CLICommandBackground />\n      </div>\n\n      {/* Solutions Section - Database Queries */}\n      <div className=\"bg-layer bg-solutions absolute inset-0 opacity-0\">\n        <DatabaseQueryBackground />\n      </div>\n\n      {/* Technology Section - DevOps Deployment */}\n      <div className=\"bg-layer bg-technology absolute inset-0 opacity-0\">\n        <DevOpsDeploymentBackground />\n      </div>\n\n      {/* Contact Section - API Integration */}\n      <div className=\"bg-layer bg-contact absolute inset-0 opacity-0\">\n        <APIIntegrationBackground />\n      </div>\n    </div>\n  );\n}\n\n// Hero: Jeton-style Raining Code Background\nfunction JetonRainingCodeBackground() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Jeton-style programming characters and code snippets\n    const characters = 'class(){};function[]=>import{}/\\\\<>const let var if else return async await try catch';\n    const codeWords = ['function', 'class', 'const', 'let', 'var', 'if', 'else', 'return', 'async', 'await', 'import', 'export'];\n    const fontSize = 14;\n    const columns = Math.floor(canvas.width / fontSize);\n    \n    const drops: Array<{y: number, speed: number, opacity: number, isWord: boolean, content: string}> = [];\n    for (let i = 0; i < columns; i++) {\n      drops[i] = {\n        y: Math.random() * -500,\n        speed: Math.random() * 3 + 1,\n        opacity: Math.random() * 0.8 + 0.2,\n        isWord: Math.random() > 0.8,\n        content: Math.random() > 0.8 ? codeWords[Math.floor(Math.random() * codeWords.length)] : characters[Math.floor(Math.random() * characters.length)]\n      };\n    }\n\n    const animate = () => {\n      // Jeton-style dark background with slight transparency\n      ctx.fillStyle = 'rgba(15, 23, 42, 0.08)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = `${fontSize}px 'JetBrains Mono', monospace`;\n      \n      for (let i = 0; i < drops.length; i++) {\n        const drop = drops[i];\n        const hue = (drop.y * 0.5 + i * 30) % 360;\n        \n        // Jeton-inspired color scheme\n        if (drop.y < canvas.height * 0.2) {\n          ctx.fillStyle = `hsla(${hue}, 90%, 75%, ${drop.opacity})`;\n        } else if (drop.y < canvas.height * 0.5) {\n          ctx.fillStyle = `hsla(180, 100%, 60%, ${drop.opacity * 0.8})`;\n        } else {\n          ctx.fillStyle = `hsla(240, 70%, 50%, ${drop.opacity * 0.6})`;\n        }\n        \n        // Add glow effect for words\n        if (drop.isWord) {\n          ctx.shadowColor = ctx.fillStyle;\n          ctx.shadowBlur = 5;\n        } else {\n          ctx.shadowBlur = 0;\n        }\n        \n        ctx.fillText(drop.content, i * fontSize, drop.y);\n        \n        drop.y += drop.speed;\n        \n        if (drop.y > canvas.height && Math.random() > 0.975) {\n          drop.y = Math.random() * -200;\n          drop.isWord = Math.random() > 0.8;\n          drop.content = drop.isWord ? codeWords[Math.floor(Math.random() * codeWords.length)] : characters[Math.floor(Math.random() * characters.length)];\n          drop.opacity = Math.random() * 0.8 + 0.2;\n        }\n      }\n      \n      requestAnimationFrame(animate);\n    };\n    \n    animate();\n    return () => window.removeEventListener('resize', resizeCanvas);\n  }, []);\n\n  return (\n    <div className=\"relative w-full h-full overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-950 via-indigo-950 to-purple-950\" />\n      <canvas ref={canvasRef} className=\"absolute inset-0 w-full h-full parallax-bg\" />\n      \n      {/* Live coding terminal */}\n      <div className=\"absolute top-20 left-1/2 transform -translate-x-1/2 w-[900px] h-[400px] bg-black/90 backdrop-blur-lg rounded-xl border border-green-500/40 overflow-hidden shadow-2xl parallax-mid\">\n        <div className=\"bg-gradient-to-r from-green-500/30 to-green-400/20 px-4 py-3 border-b border-green-500/30 flex items-center gap-3\">\n          <div className=\"flex gap-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n          </div>\n          <span className=\"ml-2 text-green-300 text-sm font-mono\">live-coding-session.js</span>\n        </div>\n        <LiveCodingTerminal />\n      </div>\n    </div>\n  );\n}\n\n// Services: CLI Command Terminal Background\nfunction CLICommandBackground() {\n  const [currentCommand, setCurrentCommand] = useState('');\n  const [charIndex, setCharIndex] = useState(0);\n  \n  const commands = [\n    '$ docker-compose up -d --scale web=3',\n    '$ kubectl apply -f k8s/deployment.yaml', \n    '$ terraform apply -auto-approve -parallelism=10',\n    '$ npm install --production --silent',\n    '$ git push origin main --force-with-lease',\n    '$ pm2 start ecosystem.config.js --env production',\n    '$ nginx -t && systemctl reload nginx',\n    '$ ansible-playbook deploy.yml --limit production'\n  ];\n  \n  useEffect(() => {\n    const command = commands[Math.floor(Date.now() / 4000) % commands.length];\n    if (charIndex < command.length) {\n      const timer = setTimeout(() => {\n        setCurrentCommand(command.slice(0, charIndex + 1));\n        setCharIndex(charIndex + 1);\n      }, 50 + Math.random() * 50);\n      return () => clearTimeout(timer);\n    } else {\n      const resetTimer = setTimeout(() => {\n        setCurrentCommand('');\n        setCharIndex(0);\n      }, 2000);\n      return () => clearTimeout(resetTimer);\n    }\n  }, [charIndex, commands]);\n\n  return (\n    <div className=\"relative w-full h-full overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-emerald-950 via-teal-900 to-cyan-950\" />\n      <MatrixRain characters=\"$>|#\" color=\"emerald\" />\n      \n      {/* CLI Terminal */}\n      <div className=\"absolute top-20 left-1/2 transform -translate-x-1/2 w-[900px] h-[400px] bg-black/95 backdrop-blur-lg rounded-xl border border-cyan-500/40 overflow-hidden shadow-2xl parallax-mid\">\n        <div className=\"bg-gradient-to-r from-cyan-500/30 to-cyan-400/20 px-4 py-3 border-b border-cyan-500/30 flex items-center gap-3\">\n          <div className=\"flex gap-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n          </div>\n          <span className=\"ml-2 text-cyan-300 text-sm font-mono\">production-server:/home/admin</span>\n        </div>\n        <div className=\"p-6 h-full\">\n          <div className=\"text-cyan-400 font-mono text-sm leading-relaxed\">\n            <div className=\"mb-2\">admin@production-server:~</div>\n            <div className=\"mb-4\">\n              {currentCommand}\n              <span className=\"inline-block w-2 h-5 bg-cyan-400 animate-pulse ml-1\" />\n            </div>\n            <div className=\"text-green-300 text-xs space-y-1 opacity-60\">\n              <div>‚úì Services: nginx, docker, postgresql running</div>\n              <div>‚úì SSL certificates: valid until 2025-12-31</div>\n              <div>‚úì Disk usage: 45% of 500GB</div>\n              <div>‚úì Memory usage: 2.1GB / 8GB</div>\n              <div>‚úì Load average: 0.85, 0.92, 1.05</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Solutions: Database Query Background  \nfunction DatabaseQueryBackground() {\n  const [currentQuery, setCurrentQuery] = useState('');\n  const [charIndex, setCharIndex] = useState(0);\n  \n  const queries = [\n    'SELECT users.*, profiles.avatar FROM users JOIN profiles ON users.id = profiles.user_id WHERE users.active = true ORDER BY users.created_at DESC;',\n    'CREATE TABLE deployments (id SERIAL PRIMARY KEY, app_name VARCHAR(255), status VARCHAR(50), created_at TIMESTAMP DEFAULT NOW());',\n    'UPDATE servers SET status = \"healthy\", last_check = NOW(), cpu_usage = 23.5 WHERE environment = \"production\";',\n    'INSERT INTO audit_logs (action, user_id, timestamp, details) VALUES (\"deploy\", 1, NOW(), \"App deployed successfully to production\");'\n  ];\n  \n  useEffect(() => {\n    const query = queries[Math.floor(Date.now() / 5000) % queries.length];\n    if (charIndex < query.length) {\n      const timer = setTimeout(() => {\n        setCurrentQuery(query.slice(0, charIndex + 1));\n        setCharIndex(charIndex + 1);\n      }, 30 + Math.random() * 40);\n      return () => clearTimeout(timer);\n    } else {\n      const resetTimer = setTimeout(() => {\n        setCurrentQuery('');\n        setCharIndex(0);\n      }, 3000);\n      return () => clearTimeout(resetTimer);\n    }\n  }, [charIndex, queries]);\n\n  return (\n    <div className=\"relative w-full h-full overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-violet-950 via-purple-900 to-indigo-950\" />\n      <MatrixRain characters=\"SELECT[](){}\" color=\"purple\" />\n      \n      {/* Database Query Terminal */}\n      <div className=\"absolute top-20 left-1/2 transform -translate-x-1/2 w-[900px] h-[400px] bg-black/95 backdrop-blur-lg rounded-xl border border-purple-500/40 overflow-hidden shadow-2xl parallax-mid\">\n        <div className=\"bg-gradient-to-r from-purple-500/30 to-purple-400/20 px-4 py-3 border-b border-purple-500/30 flex items-center gap-3\">\n          <div className=\"flex gap-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n          </div>\n          <span className=\"ml-2 text-purple-300 text-sm font-mono\">database-management.sql</span>\n        </div>\n        <div className=\"p-6 h-full\">\n          <div className=\"text-purple-400 font-mono text-sm leading-relaxed\">\n            <div className=\"text-purple-300 mb-4\">postgres=# \\\\l</div>\n            <div className=\"text-gray-400 text-xs mb-4\">\n              Connected to database \"production_db\" as user \"admin\"<br/>\n              SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384)\n            </div>\n            <div className=\"mb-4\">\n              postgres=# {currentQuery}\n              <span className=\"inline-block w-2 h-5 bg-purple-400 animate-pulse ml-1\" />\n            </div>\n            <div className=\"text-green-300 text-xs opacity-60\">\n              <div>Query executed successfully</div>\n              <div>Rows affected: 1,247 | Execution time: 0.052s</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Technology: DevOps Deployment Background\nfunction DevOpsDeploymentBackground() {\n  const [currentScript, setCurrentScript] = useState('');\n  const [charIndex, setCharIndex] = useState(0);\n  \n  const deploymentScript = `#!/bin/bash\necho \"Starting deployment pipeline...\"\n\n# Build and test\nnpm run build --production\nnpm run test:coverage --silent\n\n# Docker deployment\ndocker build -t myapp:latest .\ndocker tag myapp:latest registry.company.com/myapp:v1.2.3\ndocker push registry.company.com/myapp:v1.2.3\n\n# Deploy to Kubernetes\nkubectl set image deployment/myapp myapp=registry.company.com/myapp:v1.2.3\nkubectl rollout status deployment/myapp --timeout=300s\n\necho \"‚úì Deployment completed successfully\"\necho \"‚úì Health checks passing\"\necho \"‚úì Application ready to serve traffic\"`;\n  \n  useEffect(() => {\n    if (charIndex < deploymentScript.length) {\n      const timer = setTimeout(() => {\n        setCurrentScript(deploymentScript.slice(0, charIndex + 1));\n        setCharIndex(charIndex + 1);\n      }, 25 + Math.random() * 35);\n      return () => clearTimeout(timer);\n    } else {\n      const resetTimer = setTimeout(() => {\n        setCurrentScript('');\n        setCharIndex(0);\n      }, 4000);\n      return () => clearTimeout(resetTimer);\n    }\n  }, [charIndex, deploymentScript]);\n\n  return (\n    <div className=\"relative w-full h-full overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-amber-950 via-orange-900 to-red-950\" />\n      <MatrixRain characters=\"#!/bin/bash\" color=\"amber\" />\n      \n      {/* DevOps Terminal */}\n      <div className=\"absolute top-20 left-1/2 transform -translate-x-1/2 w-[900px] h-[400px] bg-black/95 backdrop-blur-lg rounded-xl border border-amber-500/40 overflow-hidden shadow-2xl parallax-mid\">\n        <div className=\"bg-gradient-to-r from-amber-500/30 to-amber-400/20 px-4 py-3 border-b border-amber-500/30 flex items-center gap-3\">\n          <div className=\"flex gap-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n          </div>\n          <span className=\"ml-2 text-amber-300 text-sm font-mono\">deploy.sh</span>\n        </div>\n        <div className=\"p-6 h-full overflow-auto\">\n          <div className=\"text-amber-400 font-mono text-sm leading-relaxed\">\n            <div className=\"text-amber-300 mb-4\">$ chmod +x deploy.sh && ./deploy.sh</div>\n            <div className=\"whitespace-pre-wrap\">\n              {currentScript}\n              <span className=\"inline-block w-2 h-5 bg-amber-400 animate-pulse ml-1\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Contact: API Integration Background\nfunction APIIntegrationBackground() {\n  const [currentCode, setCurrentCode] = useState('');\n  const [charIndex, setCharIndex] = useState(0);\n  \n  const apiIntegration = `// API Integration & Monitoring Dashboard\nconst apiClient = {\n  baseURL: 'https://api.company.com/v1',\n  \n  async healthCheck() {\n    const response = await fetch(this.baseURL + '/health');\n    const data = await response.json();\n    console.log('API Health:', data.status);\n    return data;\n  },\n  \n  async deployService(config) {\n    console.log('Deploying microservice...');\n    \n    const deployment = await fetch(this.baseURL + '/deploy', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(config)\n    });\n    \n    if (deployment.ok) {\n      console.log('‚úì Service deployed successfully');\n      this.monitorHealth(config.serviceName);\n    }\n  },\n  \n  monitorHealth(serviceName) {\n    setInterval(async () => {\n      const health = await this.healthCheck();\n      console.log(\\`Service \\${serviceName}: \\${health.status}\\`);\n    }, 30000);\n  }\n};\n\n// Start monitoring\napiClient.deployService({\n  serviceName: 'user-auth-service',\n  replicas: 3,\n  environment: 'production'\n});`;\n  \n  useEffect(() => {\n    if (charIndex < apiIntegration.length) {\n      const timer = setTimeout(() => {\n        setCurrentCode(apiIntegration.slice(0, charIndex + 1));\n        setCharIndex(charIndex + 1);\n      }, 20 + Math.random() * 30);\n      return () => clearTimeout(timer);\n    } else {\n      const resetTimer = setTimeout(() => {\n        setCurrentCode('');\n        setCharIndex(0);\n      }, 5000);\n      return () => clearTimeout(resetTimer);\n    }\n  }, [charIndex, apiIntegration]);\n\n  return (\n    <div className=\"relative w-full h-full overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-950 via-blue-900 to-indigo-950\" />\n      <MatrixRain characters=\"API{}/\\\\<>\" color=\"cyan\" />\n      \n      {/* API Integration Terminal */}\n      <div className=\"absolute top-20 left-1/2 transform -translate-x-1/2 w-[900px] h-[400px] bg-black/95 backdrop-blur-lg rounded-xl border border-cyan-500/40 overflow-hidden shadow-2xl parallax-mid\">\n        <div className=\"bg-gradient-to-r from-cyan-500/30 to-cyan-400/20 px-4 py-3 border-b border-cyan-500/30 flex items-center gap-3\">\n          <div className=\"flex gap-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full animate-pulse\" />\n            <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n          </div>\n          <span className=\"ml-2 text-cyan-300 text-sm font-mono\">api-integration.js</span>\n        </div>\n        <div className=\"p-6 h-full overflow-auto\">\n          <div className=\"text-cyan-400 font-mono text-sm leading-relaxed\">\n            <div className=\"text-cyan-300 mb-4\">$ node api-integration.js</div>\n            <div className=\"whitespace-pre-wrap\">\n              {currentCode}\n              <span className=\"inline-block w-2 h-5 bg-cyan-400 animate-pulse ml-1\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Reusable Matrix Rain Component\nfunction MatrixRain({ characters, color }: { characters: string; color: string }) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    const fontSize = 12;\n    const columns = Math.floor(canvas.width / fontSize);\n    const drops: number[] = [];\n    \n    for (let i = 0; i < columns; i++) {\n      drops[i] = Math.random() * -100;\n    }\n\n    const animate = () => {\n      ctx.fillStyle = 'rgba(15, 23, 42, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = `${fontSize}px 'JetBrains Mono', monospace`;\n      \n      const colorMap: Record<string, string> = {\n        emerald: '#10b981',\n        purple: '#8b5cf6',\n        amber: '#f59e0b',\n        cyan: '#06b6d4'\n      };\n      \n      for (let i = 0; i < drops.length; i++) {\n        const char = characters[Math.floor(Math.random() * characters.length)];\n        const alpha = Math.max(0.1, 1 - (drops[i] / canvas.height) * 2);\n        \n        ctx.fillStyle = colorMap[color] + Math.floor(alpha * 255).toString(16).padStart(2, '0');\n        ctx.fillText(char, i * fontSize, drops[i]);\n        \n        drops[i] += Math.random() * 2 + 1;\n        \n        if (drops[i] > canvas.height && Math.random() > 0.975) {\n          drops[i] = Math.random() * -100;\n        }\n      }\n      \n      requestAnimationFrame(animate);\n    };\n    \n    animate();\n    return () => window.removeEventListener('resize', resizeCanvas);\n  }, [characters, color]);\n\n  return <canvas ref={canvasRef} className=\"absolute inset-0 w-full h-full opacity-20 parallax-bg\" />;\n}\n\n// Live Coding Terminal Component\nfunction LiveCodingTerminal() {\n  const [currentText, setCurrentText] = useState('');\n  const [charIndex, setCharIndex] = useState(0);\n  \n  const codeSnippet = `const ITServiceManager = {\n  deployApp: async (config) => {\n    console.log('Starting deployment...');\n    const result = await docker.deploy(config);\n    return { success: true, url: result.url };\n  },\n  \n  monitorServices: () => {\n    setInterval(() => {\n      const health = checkSystemHealth();\n      if (health.status === 'critical') {\n        alertTeam(health.message);\n      }\n    }, 5000);\n  }\n};`;\n\n  useEffect(() => {\n    if (charIndex < codeSnippet.length) {\n      const timer = setTimeout(() => {\n        setCurrentText(codeSnippet.slice(0, charIndex + 1));\n        setCharIndex(charIndex + 1);\n      }, 30 + Math.random() * 40);\n      return () => clearTimeout(timer);\n    } else {\n      const resetTimer = setTimeout(() => {\n        setCurrentText('');\n        setCharIndex(0);\n      }, 3000);\n      return () => clearTimeout(resetTimer);\n    }\n  }, [charIndex, codeSnippet]);\n\n  return (\n    <div className=\"p-6 h-full overflow-hidden\">\n      <div className=\"text-green-400 font-mono text-sm leading-relaxed\">\n        <div className=\"text-green-300 mb-4\">$ npm run dev</div>\n        <div className=\"whitespace-pre-wrap\">\n          {currentText}\n          <span className=\"inline-block w-2 h-5 bg-green-400 animate-pulse ml-1\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Smooth wrapper for GSAP ScrollSmoother\nexport function JetonSmoothWrapper({ children }: { children: React.ReactNode }) {\n  return (\n    <div id=\"smooth-wrapper\" className=\"overflow-hidden\">\n      <div id=\"smooth-content\" className=\"relative\">\n        {children}\n      </div>\n    </div>\n  );\n}\n","size_bytes":23538},"client/src/components/liquid-canvas.tsx":{"content":"import { useEffect, useRef } from 'react';\n\nexport function LiquidCanvas() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Liquid blob properties\n    const blobs: Array<{\n      x: number;\n      y: number;\n      radius: number;\n      vx: number;\n      vy: number;\n      color: string;\n      alpha: number;\n    }> = [];\n\n    // Initialize blobs\n    for (let i = 0; i < 5; i++) {\n      blobs.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        radius: Math.random() * 150 + 100,\n        vx: (Math.random() - 0.5) * 0.5,\n        vy: (Math.random() - 0.5) * 0.5,\n        color: i % 2 === 0 ? '#6366f1' : '#06b6d4',\n        alpha: Math.random() * 0.3 + 0.1\n      });\n    }\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Update and draw blobs\n      blobs.forEach(blob => {\n        blob.x += blob.vx;\n        blob.y += blob.vy;\n\n        // Bounce off edges\n        if (blob.x < 0 || blob.x > canvas.width) blob.vx *= -1;\n        if (blob.y < 0 || blob.y > canvas.height) blob.vy *= -1;\n\n        // Create gradient\n        const gradient = ctx.createRadialGradient(\n          blob.x, blob.y, 0,\n          blob.x, blob.y, blob.radius\n        );\n        gradient.addColorStop(0, `${blob.color}${Math.floor(blob.alpha * 255).toString(16).padStart(2, '0')}`);\n        gradient.addColorStop(1, 'transparent');\n\n        // Draw blob\n        ctx.globalCompositeOperation = 'screen';\n        ctx.fillStyle = gradient;\n        ctx.beginPath();\n        ctx.arc(blob.x, blob.y, blob.radius, 0, Math.PI * 2);\n        ctx.fill();\n      });\n\n      requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"fixed inset-0 pointer-events-none z-0\"\n      style={{ mixBlendMode: 'screen' }}\n    />\n  );\n}","size_bytes":2329},"client/src/components/liquid-cta.tsx":{"content":"import { ArrowRight, Sparkles } from 'lucide-react';\n\nexport function LiquidCTA() {\n  return (\n    <section id=\"contact\" className=\"liquid-section py-32 relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-r from-indigo-900/30 via-purple-900/20 to-cyan-900/30\"></div>\n      \n      <div className=\"container max-w-6xl mx-auto px-8 relative z-10\">\n        <div className=\"liquid-card text-center p-16 bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-2xl rounded-3xl border border-white/20 relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-indigo-500/10 via-purple-500/10 to-cyan-500/10 rounded-3xl\"></div>\n          <div className=\"absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-white/30 to-transparent\"></div>\n          \n          <div className=\"relative z-10\">\n            <div className=\"flex items-center justify-center mb-6\">\n              <Sparkles className=\"w-8 h-8 text-cyan-400 mr-3\" />\n              <h2 className=\"liquid-text text-5xl md:text-6xl font-bold bg-gradient-to-r from-white via-cyan-200 to-indigo-300 bg-clip-text text-transparent\">\n                Ready to Flow?\n              </h2>\n              <Sparkles className=\"w-8 h-8 text-indigo-400 ml-3\" />\n            </div>\n            \n            <p className=\"liquid-text text-xl md:text-2xl text-white/80 mb-12 max-w-4xl mx-auto leading-relaxed\">\n              Experience the seamless integration of cutting-edge fintech solutions that adapt and flow with your business needs\n            </p>\n            \n            <div className=\"cta-actions flex flex-col sm:flex-row gap-6 justify-center\">\n              <a \n                href=\"#\" \n                className=\"liquid-card group inline-flex items-center px-10 py-5 bg-gradient-to-r from-indigo-500 to-cyan-500 rounded-full text-white font-bold text-xl transition-all duration-500 hover:shadow-2xl hover:shadow-indigo-500/30 hover:scale-105\"\n                data-testid=\"cta-start-journey\"\n              >\n                Start Your Journey\n                <ArrowRight className=\"ml-3 w-6 h-6 group-hover:translate-x-1 transition-transform duration-300\" />\n              </a>\n              <a \n                href=\"#\" \n                className=\"liquid-card group inline-flex items-center px-10 py-5 bg-transparent border-2 border-gradient-to-r from-indigo-500 to-cyan-500 rounded-full text-white font-bold text-xl backdrop-blur-lg hover:bg-white/10 transition-all duration-500 hover:scale-105\"\n                data-testid=\"cta-schedule-demo\"\n              >\n                Schedule Demo\n                <Sparkles className=\"ml-3 w-6 h-6 group-hover:rotate-12 transition-transform duration-300\" />\n              </a>\n            </div>\n            \n            <div className=\"mt-12 text-white/60\">\n              <p className=\"text-sm\">Trusted by 10,000+ companies worldwide</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2998},"client/src/components/liquid-hero.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useLenis } from '@/hooks/use-lenis';\nimport { getHeroContent, type HeroContent } from '@/lib/sanity';\nimport { RivePlaceholder } from './rive-animation';\n\nexport function LiquidHero() {\n  const { scrollTo } = useLenis();\n  const heroRef = useRef<HTMLElement>(null);\n  const statsRef = useRef<HTMLDivElement>(null);\n  const [heroContent, setHeroContent] = useState<HeroContent | null>(null);\n\n  useEffect(() => {\n    // Load hero content from Sanity\n    getHeroContent().then(setHeroContent);\n    \n    // Animate counters when visible\n    const animateCounters = () => {\n      if (typeof window !== 'undefined' && window.gsap && statsRef.current) {\n        const counters = statsRef.current.querySelectorAll('[data-count]');\n        counters.forEach(counter => {\n          const target = parseFloat(counter.getAttribute('data-count') || '0');\n          window.gsap.fromTo(counter, \n            { innerText: 0 },\n            {\n              duration: 2,\n              innerText: target,\n              snap: { innerText: target === 99.9 ? 0.1 : 1 },\n              scrollTrigger: {\n                trigger: counter,\n                start: 'top 80%',\n              },\n              onUpdate: function() {\n                const element = this.targets()[0] as HTMLElement;\n                if (target === 99.9) {\n                  element.innerText = parseFloat(element.innerText).toFixed(1);\n                } else {\n                  element.innerText = Math.ceil(parseFloat(element.innerText)).toString();\n                }\n              }\n            }\n          );\n        });\n      }\n    };\n\n    const timer = setTimeout(animateCounters, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleCTAClick = (e: React.MouseEvent<HTMLAnchorElement>, target: string) => {\n    e.preventDefault();\n    const targetElement = document.getElementById(target);\n    if (targetElement) {\n      scrollTo(targetElement, { offset: -80 });\n    }\n  };\n\n  return (\n    <section ref={heroRef} className=\"liquid-section min-h-screen flex items-center relative pt-20 overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900/50 via-indigo-900/30 to-cyan-900/50 backdrop-blur-sm\"></div>\n      \n      <div className=\"container max-w-6xl mx-auto px-8 relative z-10\">\n        <div className=\"hero-content text-center max-w-4xl mx-auto\">\n          <h1 className=\"hero-title flow-text text-4xl md:text-7xl font-bold mb-8 bg-gradient-to-r from-white via-cyan-200 to-indigo-300 bg-clip-text text-transparent leading-tight\">\n            {heroContent?.title || 'Digital Innovation Flows Through Everything'}\n          </h1>\n          <p className=\"hero-subtitle flow-text text-xl md:text-2xl text-white/80 mb-12 leading-relaxed\">\n            {heroContent?.subtitle || 'Experience the future of fintech with liquid-smooth interactions and revolutionary digital solutions'}\n          </p>\n          \n          <div className=\"hero-actions flex flex-col sm:flex-row gap-6 justify-center mb-16\">\n            <a \n              href=\"#contact\" \n              onClick={(e) => handleCTAClick(e, 'contact')}\n              className=\"hero-cta flow-card px-8 py-4 bg-gradient-to-r from-indigo-500 to-cyan-500 rounded-full text-white font-semibold text-lg hover:shadow-xl hover:shadow-indigo-500/25 transform hover:scale-105 transition-all duration-500\"\n              data-testid=\"hero-get-started\"\n            >\n              {heroContent?.ctaText || 'Experience the Flow'}\n            </a>\n            <a \n              href=\"#services\" \n              onClick={(e) => handleCTAClick(e, 'services')}\n              className=\"liquid-card px-8 py-4 bg-transparent border-2 border-gradient-to-r from-indigo-500 to-cyan-500 rounded-full text-white font-semibold text-lg backdrop-blur-lg hover:bg-white/10 transform hover:scale-105 transition-all duration-500\"\n              data-testid=\"hero-explore-services\"\n            >\n              Discover Solutions\n            </a>\n          </div>\n          \n          <div className=\"stats-grid grid grid-cols-1 md:grid-cols-3 gap-8\" ref={statsRef}>\n            <div className=\"liquid-card stat-item text-center p-8 bg-white/5 backdrop-blur-xl rounded-3xl border border-white/10 hover:border-indigo-400/50 transition-all duration-500\" data-testid=\"stat-uptime\">\n              <span className=\"stat-number text-5xl font-bold bg-gradient-to-r from-cyan-400 to-indigo-400 bg-clip-text text-transparent block\" data-count=\"99.9\">0</span>%\n              <div className=\"stat-label text-white/70 text-lg mt-3 font-medium\">Uptime Excellence</div>\n            </div>\n            <div className=\"liquid-card stat-item text-center p-8 bg-white/5 backdrop-blur-xl rounded-3xl border border-white/10 hover:border-cyan-400/50 transition-all duration-500\" data-testid=\"stat-transactions\">\n              <span className=\"stat-number text-5xl font-bold bg-gradient-to-r from-indigo-400 to-cyan-400 bg-clip-text text-transparent block\" data-count=\"50\">0</span>M+\n              <div className=\"stat-label text-white/70 text-lg mt-3 font-medium\">Transactions Processed</div>\n            </div>\n            <div className=\"liquid-card stat-item text-center p-8 bg-white/5 backdrop-blur-xl rounded-3xl border border-white/10 hover:border-indigo-400/50 transition-all duration-500\" data-testid=\"stat-support\">\n              <span className=\"stat-number text-5xl font-bold bg-gradient-to-r from-cyan-400 to-indigo-400 bg-clip-text text-transparent block\" data-count=\"24\">0</span>/7\n              <div className=\"stat-label text-white/70 text-lg mt-3 font-medium\">Global Support</div>\n            </div>\n          </div>\n          \n          {/* Rive Animation Element */}\n          <div className=\"mt-16 flex justify-center\">\n            <RivePlaceholder className=\"w-64 h-32\" />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5925},"client/src/components/liquid-navigation.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLenis } from '@/hooks/use-lenis';\n\nexport function LiquidNavigation() {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [scrolled, setScrolled] = useState(false);\n  const { scrollTo } = useLenis();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrolled(window.scrollY > 100);\n    };\n    \n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const handleNavClick = (e: React.MouseEvent<HTMLAnchorElement>, target: string) => {\n    e.preventDefault();\n    const targetElement = document.getElementById(target);\n    if (targetElement) {\n      scrollTo(targetElement, { offset: -80 });\n    }\n    setMobileMenuOpen(false);\n  };\n\n  return (\n    <nav className={`liquid-nav fixed top-0 left-0 right-0 z-50 py-6 px-8 transition-all duration-700 ${scrolled ? 'py-4 backdrop-blur-2xl bg-slate-900/30 border-b border-white/10' : 'bg-transparent'}`}>\n      <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n        <div className=\"logo text-3xl font-bold\">\n          <span className=\"bg-gradient-to-r from-white to-cyan-300 bg-clip-text text-transparent\">Flow</span>\n          <span className=\"bg-gradient-to-r from-cyan-400 to-indigo-400 bg-clip-text text-transparent\">Tech</span>\n        </div>\n        \n        <ul className={`nav-links hidden md:flex list-none gap-12 ${mobileMenuOpen ? 'nav-links-mobile' : ''}`}>\n          {[\n            { label: 'Services', target: 'services' },\n            { label: 'Solutions', target: 'solutions' },\n            { label: 'Technology', target: 'technology' },\n            { label: 'Contact', target: 'contact' }\n          ].map((item, index) => (\n            <li key={index}>\n              <a \n                href={`#${item.target}`}\n                onClick={(e) => handleNavClick(e, item.target)}\n                className=\"relative text-white/80 hover:text-white font-medium text-lg transition-all duration-500 group\"\n                data-testid={`nav-${item.target}`}\n              >\n                {item.label}\n                <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-gradient-to-r from-cyan-400 to-indigo-400 group-hover:w-full transition-all duration-500\"></span>\n              </a>\n            </li>\n          ))}\n        </ul>\n        \n        <div \n          className={`mobile-menu-btn md:hidden flex flex-col cursor-pointer gap-1.5 ${mobileMenuOpen ? 'active' : ''}`}\n          onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n          data-testid=\"mobile-menu-toggle\"\n        >\n          <span className={`w-8 h-0.5 bg-white transition-all duration-300 ${mobileMenuOpen ? 'rotate-45 translate-y-2' : ''}`}></span>\n          <span className={`w-8 h-0.5 bg-white transition-all duration-300 ${mobileMenuOpen ? 'opacity-0' : ''}`}></span>\n          <span className={`w-8 h-0.5 bg-white transition-all duration-300 ${mobileMenuOpen ? '-rotate-45 -translate-y-2' : ''}`}></span>\n        </div>\n      </div>\n      \n      {/* Mobile Menu */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden absolute top-full left-0 right-0 bg-slate-900/95 backdrop-blur-2xl border-t border-white/10 p-8\">\n          <ul className=\"space-y-6\">\n            {[\n              { label: 'Services', target: 'services' },\n              { label: 'Solutions', target: 'solutions' },\n              { label: 'Technology', target: 'technology' },\n              { label: 'Contact', target: 'contact' }\n            ].map((item, index) => (\n              <li key={index}>\n                <a \n                  href={`#${item.target}`}\n                  onClick={(e) => handleNavClick(e, item.target)}\n                  className=\"text-white/80 hover:text-white font-medium text-xl transition-colors duration-300\"\n                  data-testid={`mobile-nav-${item.target}`}\n                >\n                  {item.label}\n                </a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </nav>\n  );\n}","size_bytes":4071},"client/src/components/liquid-services.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { CreditCard, Shield, TrendingUp, Zap, Globe, Lock } from 'lucide-react';\nimport { getServicesContent, type ServiceContent } from '@/lib/sanity';\nimport { CardTransition, StaggerContainer, StaggerItem } from '@/components/page-transitions';\n\nexport function LiquidServices() {\n  const [services, setServices] = useState<ServiceContent[]>([]);\n\n  useEffect(() => {\n    getServicesContent().then(setServices);\n  }, []);\n\n  const fallbackServices = [\n    {\n      icon: <CreditCard className=\"w-10 h-10\" />,\n      title: \"Quantum Payments\",\n      description: \"Lightning-fast payment processing with quantum-encrypted security and real-time global settlement.\",\n      gradient: \"from-indigo-500 to-purple-600\"\n    },\n    {\n      icon: <Shield className=\"w-10 h-10\" />,\n      title: \"Neural Security\",\n      description: \"AI-powered threat detection with blockchain immutability and quantum-resistant encryption.\",\n      gradient: \"from-cyan-500 to-blue-600\"\n    },\n    {\n      icon: <TrendingUp className=\"w-10 h-10\" />,\n      title: \"Liquid Analytics\",\n      description: \"Real-time insights that flow seamlessly through predictive AI and interactive visualizations.\",\n      gradient: \"from-purple-500 to-pink-600\"\n    },\n    {\n      icon: <Zap className=\"w-10 h-10\" />,\n      title: \"Flow APIs\",\n      description: \"Ultra-responsive APIs that adapt to demand with microsecond latency and infinite scalability.\",\n      gradient: \"from-yellow-500 to-orange-600\"\n    },\n    {\n      icon: <Globe className=\"w-10 h-10\" />,\n      title: \"Global Sync\",\n      description: \"Synchronized financial ecosystems across continents with zero-latency data replication.\",\n      gradient: \"from-green-500 to-teal-600\"\n    },\n    {\n      icon: <Lock className=\"w-10 h-10\" />,\n      title: \"Vault Protection\",\n      description: \"Military-grade digital vaults with biometric access and distributed security protocols.\",\n      gradient: \"from-red-500 to-pink-600\"\n    }\n  ];\n\n  return (\n    <section id=\"services\" className=\"liquid-section py-32 relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-indigo-950/20 to-transparent\"></div>\n      \n      <div className=\"container max-w-7xl mx-auto px-8 relative z-10\">\n        <div className=\"section-header text-center mb-20\">\n          <h2 className=\"flow-text text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-white to-cyan-300 bg-clip-text text-transparent\">\n            Fluid Services\n          </h2>\n          <p className=\"flow-text text-xl md:text-2xl text-white/70 max-w-4xl mx-auto leading-relaxed\">\n            Revolutionary financial technology that flows through every aspect of your digital transformation journey\n          </p>\n        </div>\n        \n        <StaggerContainer>\n          <div className=\"services-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {(services.length > 0 ? services : fallbackServices).map((service, index) => {\n            const IconComponent = service.icon === 'CreditCard' ? CreditCard : \n                               service.icon === 'Shield' ? Shield : \n                               service.icon === 'TrendingUp' ? TrendingUp :\n                               service.icon === 'Zap' ? Zap :\n                               service.icon === 'Globe' ? Globe : Lock;\n            \n            return (\n              <StaggerItem key={index}>\n                <CardTransition index={index}>\n                  <div \n                    className=\"flow-card liquid-card group relative p-8 bg-white/5 backdrop-blur-2xl rounded-3xl border border-white/10 hover:border-white/30 transition-all duration-700 hover:shadow-2xl hover:shadow-indigo-500/20\"\n                    data-testid={`service-${index}`}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-white/5 to-transparent rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                    \n                    <div className={`relative z-10 w-20 h-20 bg-gradient-to-br ${service.gradient} rounded-2xl flex items-center justify-center mb-6 text-white group-hover:scale-110 transform transition-transform duration-500`}>\n                      <IconComponent className=\"w-10 h-10\" />\n                    </div>\n                    \n                    <h3 className=\"text-2xl font-bold mb-4 text-white group-hover:text-cyan-200 transition-colors duration-500\">\n                      {service.title}\n                    </h3>\n                    \n                    <p className=\"text-white/70 leading-relaxed text-lg group-hover:text-white/90 transition-colors duration-500\">\n                      {service.description}\n                    </p>\n                    \n                    <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-transparent via-cyan-500 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                  </div>\n                </CardTransition>\n              </StaggerItem>\n            );\n            })}\n          </div>\n        </StaggerContainer>\n      </div>\n    </section>\n  );\n}","size_bytes":5209},"client/src/components/liquid-solutions.tsx":{"content":"import { Network, Database, Cloud, Cpu, Layers, Activity } from 'lucide-react';\nimport { EnhancedPhysicsPlayground } from './enhanced-physics-playground';\n\nexport function LiquidSolutions() {\n  const solutions = [\n    { icon: <Network className=\"w-8 h-8\" />, title: \"Neural Networks\", desc: \"Adaptive AI-driven infrastructure\" },\n    { icon: <Database className=\"w-8 h-8\" />, title: \"Quantum Storage\", desc: \"Infinite scalability with quantum compression\" },\n    { icon: <Cloud className=\"w-8 h-8\" />, title: \"Fluid Cloud\", desc: \"Seamless multi-cloud orchestration\" },\n    { icon: <Cpu className=\"w-8 h-8\" />, title: \"Edge Computing\", desc: \"Ultra-low latency processing nodes\" },\n    { icon: <Layers className=\"w-8 h-8\" />, title: \"Smart Layers\", desc: \"Intelligent service mesh architecture\" },\n    { icon: <Activity className=\"w-8 h-8\" />, title: \"Live Monitoring\", desc: \"Real-time system health analytics\" }\n  ];\n\n  return (\n    <section id=\"solutions\" className=\"liquid-section py-32 relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-r from-indigo-900/10 via-transparent to-cyan-900/10\"></div>\n      \n      <div className=\"container max-w-7xl mx-auto px-8 relative z-10\">\n        <div className=\"section-header text-center mb-20\">\n          <h2 className=\"liquid-text text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-cyan-300 to-indigo-300 bg-clip-text text-transparent\">\n            Liquid Architecture\n          </h2>\n          <p className=\"liquid-text text-xl md:text-2xl text-white/70 max-w-4xl mx-auto leading-relaxed\">\n            Infrastructure that flows and adapts in real-time to meet your evolving business demands\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-20\">\n          {solutions.map((solution, index) => (\n            <div \n              key={index}\n              className=\"liquid-card group relative p-6 bg-white/5 backdrop-blur-2xl rounded-2xl border border-white/10 hover:border-cyan-400/50 transition-all duration-500 hover:shadow-xl hover:shadow-cyan-500/20\"\n              data-testid={`solution-${index}`}\n            >\n              <div className={`w-16 h-16 bg-gradient-to-br from-cyan-400 to-indigo-500 rounded-xl flex items-center justify-center mb-4 text-white group-hover:scale-110 transform transition-transform duration-500`}>\n                {solution.icon}\n              </div>\n              \n              <h3 className=\"text-xl font-bold mb-3 text-white group-hover:text-cyan-200 transition-colors duration-500\">\n                {solution.title}\n              </h3>\n              \n              <p className=\"text-white/70 text-sm leading-relaxed group-hover:text-white/90 transition-colors duration-500\">\n                {solution.desc}\n              </p>\n              \n              <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-indigo-500/10 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n            </div>\n          ))}\n        </div>\n\n        {/* Enhanced Physics Playground */}\n        <div className=\"liquid-card p-8 bg-white/5 backdrop-blur-2xl rounded-3xl border border-white/10 max-w-6xl mx-auto\">\n          <EnhancedPhysicsPlayground />\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":3323},"client/src/components/liquid-technology.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { GitBranch, Activity, Cpu, Zap } from 'lucide-react';\nimport { EnhancedPhysicsPlayground } from '@/components/enhanced-physics-playground';\n\nexport function LiquidTechnology() {\n  const progressBarsRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Animate progress bars when visible\n    const animateProgressBars = () => {\n      if (typeof window !== 'undefined' && window.gsap && progressBarsRef.current) {\n        const progressBars = progressBarsRef.current.querySelectorAll('.progress-fill');\n        progressBars.forEach(bar => {\n          const width = bar.getAttribute('data-width');\n          window.gsap.to(bar, {\n            width: width + '%',\n            duration: 2,\n            ease: 'power2.out',\n            scrollTrigger: {\n              trigger: bar,\n              start: 'top 80%',\n            }\n          });\n        });\n      }\n    };\n\n    const timer = setTimeout(animateProgressBars, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const technologies = [\n    { name: \"Quantum Processing\", progress: 95, icon: <Cpu className=\"w-6 h-6\" /> },\n    { name: \"Neural Networks\", progress: 88, icon: <GitBranch className=\"w-6 h-6\" /> },\n    { name: \"Real-time Analytics\", progress: 92, icon: <Activity className=\"w-6 h-6\" /> },\n    { name: \"Lightning Speed\", progress: 99, icon: <Zap className=\"w-6 h-6\" /> }\n  ];\n\n  return (\n    <section id=\"technology\" className=\"liquid-section py-32 relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-transparent to-cyan-900/20\"></div>\n      \n      <div className=\"container max-w-7xl mx-auto px-8 relative z-10\">\n        <div className=\"section-header text-center mb-20\">\n          <h2 className=\"liquid-text text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-purple-300 to-cyan-300 bg-clip-text text-transparent\">\n            Liquid Technology\n          </h2>\n          <p className=\"liquid-text text-xl md:text-2xl text-white/70 max-w-4xl mx-auto leading-relaxed\">\n            Advanced systems that flow seamlessly through complex operations with unmatched precision\n          </p>\n        </div>\n        \n        <div className=\"tech-content grid grid-cols-1 lg:grid-cols-2 gap-20 items-center\">\n          <div className=\"liquid-card p-10 bg-white/5 backdrop-blur-2xl rounded-3xl border border-white/10\">\n            <h3 className=\"text-3xl font-bold mb-8 text-white\">Performance Metrics</h3>\n            <div className=\"space-y-8\" ref={progressBarsRef}>\n              {technologies.map((tech, index) => (\n                <div key={index} className=\"technology-item\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center gap-3 text-white\">\n                      <div className=\"p-2 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-lg\">\n                        {tech.icon}\n                      </div>\n                      <span className=\"font-semibold text-lg\">{tech.name}</span>\n                    </div>\n                    <span className=\"text-cyan-400 font-bold text-lg\">{tech.progress}%</span>\n                  </div>\n                  <div className=\"w-full h-3 bg-white/10 rounded-full overflow-hidden\">\n                    <div \n                      className=\"progress-fill h-full bg-gradient-to-r from-purple-500 to-cyan-500 rounded-full transition-all duration-1000 ease-out\"\n                      data-width={tech.progress}\n                      style={{ width: '0%' }}\n                    ></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"liquid-card relative h-96 bg-gradient-to-br from-purple-500/10 to-cyan-500/10 backdrop-blur-2xl rounded-3xl border border-white/10 overflow-hidden\">\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"relative\">\n                <div className=\"w-32 h-32 bg-gradient-to-r from-purple-400 to-cyan-400 rounded-full opacity-20 animate-pulse\"></div>\n                <div className=\"absolute inset-0 w-32 h-32 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-full opacity-30 animate-ping\"></div>\n                <div className=\"absolute inset-4 w-24 h-24 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-full opacity-60 animate-spin\"></div>\n                <GitBranch className=\"absolute inset-0 w-32 h-32 text-white/40 m-auto\" />\n              </div>\n            </div>\n            <div className=\"absolute top-4 left-4 right-4 bottom-4 border border-white/20 rounded-2xl\"></div>\n            <div className=\"absolute top-8 left-8 right-8 bottom-8 border border-white/10 rounded-xl\"></div>\n          </div>\n        </div>\n\n        {/* Interactive Physics Playground */}\n        <div className=\"container max-w-4xl mx-auto px-8 mt-20\">\n          <EnhancedPhysicsPlayground />\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5012},"client/src/components/live-coding-background.tsx":{"content":"import { useEffect, useRef } from 'react';\n\nconst codeSnippets = [\n  `// Security Analysis Running...\nfunction detectThreats(networkTraffic) {\n  const threats = [];\n  networkTraffic.forEach(packet => {\n    if (packet.suspicious) {\n      threats.push({\n        type: 'MALWARE_DETECTED',\n        severity: 'HIGH',\n        source: packet.src\n      });\n    }\n  });\n  return threats;\n}`,\n\n  `# Cybersecurity Monitor\nimport hashlib\nimport socket\n\ndef scan_ports(target_ip, port_range):\n    open_ports = []\n    for port in range(*port_range):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        result = sock.connect_ex((target_ip, port))\n        if result == 0:\n            open_ports.append(port)\n        sock.close()\n    return open_ports`,\n\n  `/* Financial Security Protocol */\nclass SecurityEngine {\n  constructor() {\n    this.threatLevel = 'LOW';\n    this.activeConnections = [];\n  }\n  \n  async monitorTransactions() {\n    const transactions = await this.fetchTransactions();\n    return transactions.filter(tx => \n      this.validateTransaction(tx) && \n      this.checkFraudPattern(tx)\n    );\n  }\n}`,\n\n  `// Real-time Network Analysis\nconst networkAnalyzer = {\n  activeConnections: 847,\n  threatsBlocked: 1254,\n  dataProcessed: '2.3TB',\n  \n  analyze: function(packet) {\n    if (packet.encrypted) {\n      return this.decryptAndAnalyze(packet);\n    }\n    return this.patternMatch(packet);\n  }\n};`,\n\n  `# Machine Learning Threat Detection\nimport tensorflow as tf\nimport numpy as np\n\nclass ThreatDetector:\n    def __init__(self):\n        self.model = tf.keras.Sequential([\n            tf.keras.layers.Dense(128, activation='relu'),\n            tf.keras.layers.Dropout(0.3),\n            tf.keras.layers.Dense(64, activation='relu'),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n    \n    def predict_threat(self, network_data):\n        prediction = self.model.predict(network_data)\n        return prediction > 0.7`\n];\n\nconst systemStats = [\n  { label: 'Active Connections', value: '2,847', status: 'secure' },\n  { label: 'Threats Blocked', value: '1,254', status: 'warning' },\n  { label: 'Data Processed', value: '2.3TB', status: 'active' },\n  { label: 'System Uptime', value: '99.9%', status: 'secure' },\n  { label: 'Firewall Status', value: 'ACTIVE', status: 'secure' },\n  { label: 'Encryption Level', value: 'AES-256', status: 'secure' }\n];\n\nexport function LiveCodingBackground() {\n  const terminalRef = useRef<HTMLDivElement>(null);\n  const codeRef = useRef<HTMLDivElement>(null);\n  const currentSnippetIndex = useRef(0);\n  const typingSpeed = 30;\n\n  useEffect(() => {\n    let typingInterval: NodeJS.Timeout;\n    let currentCharIndex = 0;\n\n    const typeCode = () => {\n      if (!codeRef.current) return;\n\n      const currentSnippet = codeSnippets[currentSnippetIndex.current];\n      \n      if (currentCharIndex < currentSnippet.length) {\n        const char = currentSnippet[currentCharIndex];\n        codeRef.current.textContent += char;\n        currentCharIndex++;\n        \n        // Scroll to bottom\n        if (codeRef.current.parentElement) {\n          codeRef.current.parentElement.scrollTop = codeRef.current.parentElement.scrollHeight;\n        }\n      } else {\n        // Move to next snippet after a pause\n        setTimeout(() => {\n          currentSnippetIndex.current = (currentSnippetIndex.current + 1) % codeSnippets.length;\n          currentCharIndex = 0;\n          if (codeRef.current) {\n            codeRef.current.textContent = '';\n          }\n        }, 2000);\n      }\n    };\n\n    typingInterval = setInterval(typeCode, typingSpeed);\n\n    return () => {\n      clearInterval(typingInterval);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Animate system stats\n    const animateStats = () => {\n      const statElements = document.querySelectorAll('.stat-value');\n      statElements.forEach((element, index) => {\n        setTimeout(() => {\n          element.classList.add('animate-pulse');\n          setTimeout(() => element.classList.remove('animate-pulse'), 1000);\n        }, index * 200);\n      });\n    };\n\n    const interval = setInterval(animateStats, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none overflow-hidden\">\n      {/* Matrix-style background effect */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-950 via-slate-900 to-indigo-950 opacity-90\"></div>\n      \n      {/* Animated grid overlay */}\n      <div className=\"absolute inset-0 opacity-10\">\n        <div \n          className=\"absolute inset-0 bg-grid-pattern animate-pulse\"\n          style={{\n            backgroundImage: `\n              linear-gradient(rgba(99, 102, 241, 0.3) 1px, transparent 1px),\n              linear-gradient(90deg, rgba(99, 102, 241, 0.3) 1px, transparent 1px)\n            `,\n            backgroundSize: '50px 50px'\n          }}\n        ></div>\n      </div>\n\n      {/* Live coding terminal - Top Left */}\n      <div className=\"absolute top-20 left-8 w-96 h-64 bg-black/80 backdrop-blur-md rounded-lg border border-green-500/30 overflow-hidden\">\n        <div className=\"bg-green-500/20 px-4 py-2 border-b border-green-500/30 flex items-center gap-2\">\n          <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n          <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n          <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n          <span className=\"ml-2 text-green-400 text-sm font-mono\">threat-detector.py</span>\n        </div>\n        <div className=\"p-4 h-full overflow-auto\">\n          <div className=\"text-green-400 font-mono text-xs leading-relaxed\">\n            <div className=\"text-green-300 mb-2\">$ python threat-detector.py</div>\n            <div ref={codeRef} className=\"whitespace-pre-wrap\"></div>\n            <span className=\"animate-pulse\">‚ñà</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Security Dashboard - Top Right */}\n      <div className=\"absolute top-20 right-8 w-80 bg-black/80 backdrop-blur-md rounded-lg border border-cyan-500/30 p-4\">\n        <div className=\"text-cyan-400 font-mono text-sm mb-4 flex items-center gap-2\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n          Security Dashboard\n        </div>\n        <div className=\"space-y-3\">\n          {systemStats.map((stat, index) => (\n            <div key={index} className=\"flex justify-between items-center text-xs\">\n              <span className=\"text-gray-300\">{stat.label}:</span>\n              <span className={`stat-value font-mono ${\n                stat.status === 'secure' ? 'text-green-400' :\n                stat.status === 'warning' ? 'text-yellow-400' :\n                'text-cyan-400'\n              }`}>\n                {stat.value}\n              </span>\n            </div>\n          ))}\n        </div>\n        \n        {/* Mini threat visualization */}\n        <div className=\"mt-4 pt-4 border-t border-cyan-500/20\">\n          <div className=\"text-cyan-400 font-mono text-xs mb-2\">Network Activity</div>\n          <div className=\"space-y-1\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <div key={i} className=\"flex items-center gap-2\">\n                <div className=\"w-1 h-1 bg-green-500 rounded-full animate-pulse\" \n                     style={{ animationDelay: `${i * 0.2}s` }}></div>\n                <div className=\"h-1 bg-gradient-to-r from-green-500/50 to-transparent rounded flex-1\"\n                     style={{ width: `${Math.random() * 100}%` }}></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Bottom monitoring panel */}\n      <div className=\"absolute bottom-8 left-8 right-8 bg-black/60 backdrop-blur-md rounded-lg border border-indigo-500/30 p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-xs font-mono\">\n          <div className=\"text-center\">\n            <div className=\"text-green-400 font-bold text-lg\">847</div>\n            <div className=\"text-gray-400\">Active Sessions</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-red-400 font-bold text-lg\">23</div>\n            <div className=\"text-gray-400\">Threats Blocked</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-cyan-400 font-bold text-lg\">2.3TB</div>\n            <div className=\"text-gray-400\">Data Processed</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-yellow-400 font-bold text-lg\">99.9%</div>\n            <div className=\"text-gray-400\">System Health</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Floating code elements */}\n      <div className=\"absolute inset-0\">\n        {Array.from({ length: 8 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute font-mono text-xs text-green-400/30 animate-bounce\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animationDelay: `${i * 0.5}s`,\n              animationDuration: `${3 + Math.random() * 2}s`\n            }}\n          >\n            {['{ }', '[ ]', '( )', '//', '#', '*', '=>', '++'][i]}\n          </div>\n        ))}\n      </div>\n\n      {/* Data streams */}\n      <div className=\"absolute left-1/4 top-0 bottom-0 w-px bg-gradient-to-b from-transparent via-cyan-500/50 to-transparent animate-pulse\"></div>\n      <div className=\"absolute right-1/4 top-0 bottom-0 w-px bg-gradient-to-b from-transparent via-green-500/50 to-transparent animate-pulse\" style={{ animationDelay: '1s' }}></div>\n      <div className=\"absolute left-1/2 top-0 bottom-0 w-px bg-gradient-to-b from-transparent via-indigo-500/50 to-transparent animate-pulse\" style={{ animationDelay: '2s' }}></div>\n    </div>\n  );\n}","size_bytes":9819},"client/src/components/navigation.tsx":{"content":"import { useState } from 'react';\nimport { useLenis } from '@/hooks/use-lenis';\n\nexport function Navigation() {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const { scrollTo } = useLenis();\n\n  const handleNavClick = (e: React.MouseEvent<HTMLAnchorElement>, target: string) => {\n    e.preventDefault();\n    const targetElement = document.getElementById(target);\n    if (targetElement) {\n      scrollTo(targetElement, { offset: -80 });\n    }\n    setMobileMenuOpen(false);\n  };\n\n  return (\n    <nav className=\"nav fixed top-0 left-0 right-0 z-50 py-4 transition-all duration-300 ease-in-out\">\n      <div className=\"max-w-6xl mx-auto px-8 flex justify-between items-center\">\n        <div className=\"text-2xl font-bold text-gradient\">\n          Flow<span className=\"text-cyan-400\">Tech</span>\n        </div>\n        \n        <ul className={`nav-links hidden md:flex list-none gap-8 ${mobileMenuOpen ? 'nav-links-mobile' : ''}`}>\n          <li>\n            <a \n              href=\"#services\" \n              onClick={(e) => handleNavClick(e, 'services')}\n              className=\"text-white/70 hover:text-white font-medium transition-all duration-300 relative hover:-translate-y-0.5\"\n              data-testid=\"nav-services\"\n            >\n              Services\n            </a>\n          </li>\n          <li>\n            <a \n              href=\"#solutions\" \n              onClick={(e) => handleNavClick(e, 'solutions')}\n              className=\"text-white/70 hover:text-white font-medium transition-all duration-300 relative hover:-translate-y-0.5\"\n              data-testid=\"nav-solutions\"\n            >\n              Solutions\n            </a>\n          </li>\n          <li>\n            <a \n              href=\"#technology\" \n              onClick={(e) => handleNavClick(e, 'technology')}\n              className=\"text-white/70 hover:text-white font-medium transition-all duration-300 relative hover:-translate-y-0.5\"\n              data-testid=\"nav-technology\"\n            >\n              Technology\n            </a>\n          </li>\n          <li>\n            <a \n              href=\"#contact\" \n              onClick={(e) => handleNavClick(e, 'contact')}\n              className=\"text-white/70 hover:text-white font-medium transition-all duration-300 relative hover:-translate-y-0.5\"\n              data-testid=\"nav-contact\"\n            >\n              Contact\n            </a>\n          </li>\n        </ul>\n        \n        <div \n          className={`mobile-menu-btn md:hidden flex flex-col cursor-pointer gap-1 ${mobileMenuOpen ? 'active' : ''}`}\n          onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n          data-testid=\"mobile-menu-toggle\"\n        >\n          <span className=\"w-6 h-0.5 bg-white transition-all duration-300\"></span>\n          <span className=\"w-6 h-0.5 bg-white transition-all duration-300\"></span>\n          <span className=\"w-6 h-0.5 bg-white transition-all duration-300\"></span>\n        </div>\n      </div>\n      \n      {/* Mobile Menu */}\n      {mobileMenuOpen && (\n        <ul className=\"nav-links-mobile md:hidden\">\n          <li className=\"mb-4\">\n            <a \n              href=\"#services\" \n              onClick={(e) => handleNavClick(e, 'services')}\n              className=\"text-white/70 hover:text-white font-medium transition-all duration-300\"\n              data-testid=\"mobile-nav-services\"\n            >\n              Services\n            </a>\n          </li>\n          <li className=\"mb-4\">\n            <a \n              href=\"#solutions\" \n              onClick={(e) => handleNavClick(e, 'solutions')}\n              className=\"text-white/70 hover:text-white font-medium transition-all duration-300\"\n              data-testid=\"mobile-nav-solutions\"\n            >\n              Solutions\n            </a>\n          </li>\n          <li className=\"mb-4\">\n            <a \n              href=\"#technology\" \n              onClick={(e) => handleNavClick(e, 'technology')}\n              className=\"text-white/70 hover:text-white font-medium transition-all duration-300\"\n              data-testid=\"mobile-nav-technology\"\n            >\n              Technology\n            </a>\n          </li>\n          <li>\n            <a \n              href=\"#contact\" \n              onClick={(e) => handleNavClick(e, 'contact')}\n              className=\"text-white/70 hover:text-white font-medium transition-all duration-300\"\n              data-testid=\"mobile-nav-contact\"\n            >\n              Contact\n            </a>\n          </li>\n        </ul>\n      )}\n    </nav>\n  );\n}\n","size_bytes":4523},"client/src/components/page-transitions.tsx":{"content":"import { motion, AnimatePresence } from 'framer-motion';\nimport { ReactNode } from 'react';\n\ninterface PageTransitionProps {\n  children: ReactNode;\n  className?: string;\n}\n\nexport function PageTransition({ children, className = '' }: PageTransitionProps) {\n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: -20 }}\n        transition={{\n          duration: 0.8,\n          ease: [0.6, -0.05, 0.01, 0.99]\n        }}\n        className={className}\n      >\n        {children}\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n\nexport function SectionTransition({ children, delay = 0 }: { children: ReactNode; delay?: number }) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 50 }}\n      whileInView={{ opacity: 1, y: 0 }}\n      viewport={{ once: true, margin: \"-10%\" }}\n      transition={{\n        duration: 1,\n        delay,\n        ease: [0.6, -0.05, 0.01, 0.99]\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\nexport function CardTransition({ children, index = 0 }: { children: ReactNode; index?: number }) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.8, rotateY: -25 }}\n      whileInView={{ opacity: 1, scale: 1, rotateY: 0 }}\n      whileHover={{ \n        scale: 1.05, \n        rotateY: 5,\n        transition: { duration: 0.3 }\n      }}\n      viewport={{ once: true }}\n      transition={{\n        duration: 0.8,\n        delay: index * 0.1,\n        ease: [0.6, -0.05, 0.01, 0.99]\n      }}\n      style={{ transformStyle: 'preserve-3d' }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\nexport function TextReveal({ children, delay = 0 }: { children: ReactNode; delay?: number }) {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      whileInView={{ opacity: 1 }}\n      viewport={{ once: true }}\n      transition={{ duration: 0.1, delay }}\n    >\n      <motion.div\n        initial={{ y: 100 }}\n        whileInView={{ y: 0 }}\n        viewport={{ once: true }}\n        transition={{\n          duration: 0.8,\n          delay,\n          ease: [0.6, -0.05, 0.01, 0.99]\n        }}\n      >\n        {children}\n      </motion.div>\n    </motion.div>\n  );\n}\n\nexport function StaggerContainer({ children }: { children: ReactNode }) {\n  return (\n    <motion.div\n      initial=\"hidden\"\n      whileInView=\"visible\"\n      viewport={{ once: true }}\n      variants={{\n        hidden: {},\n        visible: {\n          transition: {\n            staggerChildren: 0.1\n          }\n        }\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\nexport function StaggerItem({ children }: { children: ReactNode }) {\n  return (\n    <motion.div\n      variants={{\n        hidden: { opacity: 0, y: 50 },\n        visible: { \n          opacity: 1, \n          y: 0,\n          transition: {\n            duration: 0.8,\n            ease: [0.6, -0.05, 0.01, 0.99]\n          }\n        }\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}","size_bytes":2984},"client/src/components/particle-burst.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface ParticleBurstProps {\n  trigger?: boolean;\n  x?: number;\n  y?: number;\n  color?: string;\n  particleCount?: number;\n}\n\nexport function ParticleBurst({ \n  trigger = false, \n  x = 0, \n  y = 0, \n  color = '#6366f1',\n  particleCount = 15 \n}: ParticleBurstProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const particles = useRef<Array<{\n    x: number;\n    y: number;\n    vx: number;\n    vy: number;\n    life: number;\n    maxLife: number;\n    size: number;\n    color: string;\n  }>>([]);\n\n  useEffect(() => {\n    if (!trigger || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear previous particles\n    particles.current = [];\n\n    // Create new particles\n    for (let i = 0; i < particleCount; i++) {\n      const angle = (Math.PI * 2 * i) / particleCount + Math.random() * 0.5;\n      const speed = 2 + Math.random() * 4;\n      \n      particles.current.push({\n        x,\n        y,\n        vx: Math.cos(angle) * speed,\n        vy: Math.sin(angle) * speed,\n        life: 60 + Math.random() * 30,\n        maxLife: 60 + Math.random() * 30,\n        size: 2 + Math.random() * 4,\n        color\n      });\n    }\n\n    let animationId: number;\n\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      particles.current = particles.current.filter(particle => {\n        // Update particle\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n        particle.vy += 0.1; // Gravity\n        particle.vx *= 0.99; // Air resistance\n        particle.life--;\n\n        // Draw particle\n        const alpha = particle.life / particle.maxLife;\n        ctx.save();\n        ctx.globalAlpha = alpha;\n        ctx.fillStyle = particle.color;\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size * alpha, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.restore();\n\n        return particle.life > 0;\n      });\n\n      if (particles.current.length > 0) {\n        animationId = requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [trigger, x, y, color, particleCount]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={window.innerWidth}\n      height={window.innerHeight}\n      className=\"fixed inset-0 pointer-events-none z-50\"\n      style={{ mixBlendMode: 'screen' }}\n    />\n  );\n}\n\nexport function useParticleBurst() {\n  const [burst, setBurst] = useState({ trigger: false, x: 0, y: 0 });\n\n  const triggerBurst = (x: number, y: number) => {\n    setBurst({ trigger: true, x, y });\n    setTimeout(() => setBurst(prev => ({ ...prev, trigger: false })), 100);\n  };\n\n  return { burst, triggerBurst };\n}","size_bytes":2841},"client/src/components/physics-playground.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport Matter from 'matter-js';\n\nexport function PhysicsPlayground() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const engineRef = useRef<Matter.Engine | null>(null);\n  const renderRef = useRef<Matter.Render | null>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Create Matter.js engine and world\n    const engine = Matter.Engine.create();\n    const world = engine.world;\n    \n    // Disable gravity initially for floating effect\n    engine.world.gravity.y = 0.3;\n    \n    engineRef.current = engine;\n\n    // Create renderer\n    const render = Matter.Render.create({\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width: 800,\n        height: 400,\n        wireframes: false,\n        background: 'transparent',\n        showVelocity: false,\n        showAngleIndicator: false,\n        showDebug: false,\n      }\n    });\n    \n    renderRef.current = render;\n\n    // Create boundaries (invisible walls)\n    const boundaries = [\n      Matter.Bodies.rectangle(400, 0, 800, 20, { isStatic: true, render: { fillStyle: 'transparent' } }),\n      Matter.Bodies.rectangle(400, 400, 800, 20, { isStatic: true, render: { fillStyle: 'transparent' } }),\n      Matter.Bodies.rectangle(0, 200, 20, 400, { isStatic: true, render: { fillStyle: 'transparent' } }),\n      Matter.Bodies.rectangle(800, 200, 20, 400, { isStatic: true, render: { fillStyle: 'transparent' } })\n    ];\n\n    // Create interactive balls with gradients\n    const balls: Matter.Body[] = [];\n    const colors = [\n      '#6366f1', '#06b6d4', '#8b5cf6', '#f59e0b', \n      '#ef4444', '#10b981', '#f97316', '#3b82f6'\n    ];\n\n    for (let i = 0; i < 8; i++) {\n      const ball = Matter.Bodies.circle(\n        Math.random() * 600 + 100,\n        Math.random() * 200 + 100,\n        20 + Math.random() * 15,\n        {\n          restitution: 0.8,\n          friction: 0.001,\n          frictionAir: 0.01,\n          render: {\n            fillStyle: colors[i],\n            strokeStyle: colors[i],\n            lineWidth: 2\n          }\n        }\n      );\n      balls.push(ball);\n    }\n\n    // Add all bodies to world\n    Matter.World.add(world, [...boundaries, ...balls]);\n\n    // Mouse control\n    const mouse = Matter.Mouse.create(render.canvas);\n    const mouseConstraint = Matter.MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n          visible: false\n        }\n      }\n    });\n\n    Matter.World.add(world, mouseConstraint);\n\n    // Run the renderer\n    Matter.Render.run(render);\n\n    // Create runner\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    // Add click event for fun interactions\n    const handleClick = (event: MouseEvent) => {\n      const rect = canvasRef.current?.getBoundingClientRect();\n      if (!rect) return;\n\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n      // Add impulse to nearby balls\n      balls.forEach(ball => {\n        const distance = Math.sqrt(\n          Math.pow(ball.position.x - x, 2) + Math.pow(ball.position.y - y, 2)\n        );\n        \n        if (distance < 100) {\n          const force = {\n            x: (ball.position.x - x) * 0.001,\n            y: (ball.position.y - y) * 0.001\n          };\n          Matter.Body.applyForce(ball, ball.position, force);\n        }\n      });\n    };\n\n    canvasRef.current.addEventListener('click', handleClick);\n\n    // Cleanup\n    return () => {\n      if (renderRef.current) {\n        Matter.Render.stop(renderRef.current);\n        renderRef.current.canvas.removeEventListener('click', handleClick);\n      }\n      if (engineRef.current) {\n        Matter.World.clear(engineRef.current.world, false);\n        Matter.Engine.clear(engineRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"physics-playground relative\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-2xl font-bold text-white mb-2\">Interactive Physics</h3>\n        <p className=\"text-white/70\">Click and drag the balls around!</p>\n      </div>\n      <div className=\"relative border border-white/20 rounded-2xl overflow-hidden bg-gradient-to-br from-indigo-500/10 to-cyan-500/10 backdrop-blur-lg\">\n        <canvas\n          ref={canvasRef}\n          width={800}\n          height={400}\n          className=\"w-full h-full cursor-pointer\"\n          data-testid=\"physics-canvas\"\n        />\n        <div className=\"absolute inset-0 pointer-events-none border border-white/10 rounded-2xl\"></div>\n      </div>\n    </div>\n  );\n}","size_bytes":4595},"client/src/components/rive-animation.tsx":{"content":"import { useEffect, useRef } from 'react';\n\nexport function RiveAnimation({ src, className }: { src: string; className?: string }) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const riveInstanceRef = useRef<any>(null);\n\n  useEffect(() => {\n    const loadRive = async () => {\n      try {\n        // Check if Rive is available\n        if (typeof window !== 'undefined' && (window as any).rive) {\n          const rive = (window as any).rive;\n          \n          if (canvasRef.current) {\n            riveInstanceRef.current = new rive.Rive({\n              src: src,\n              canvas: canvasRef.current,\n              autoplay: true,\n              stateMachines: 'State Machine 1',\n              fit: rive.Fit.Cover,\n              alignment: rive.Alignment.Center,\n            });\n          }\n        }\n      } catch (error) {\n        console.warn('Rive animation failed to load:', error);\n      }\n    };\n\n    loadRive();\n\n    return () => {\n      if (riveInstanceRef.current) {\n        riveInstanceRef.current.cleanup();\n      }\n    };\n  }, [src]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={`rive-canvas ${className || ''}`}\n      data-testid=\"rive-animation\"\n    />\n  );\n}\n\n// Placeholder component for when Rive files aren't available\nexport function RivePlaceholder({ className }: { className?: string }) {\n  return (\n    <div className={`rive-placeholder bg-gradient-to-br from-indigo-500/20 to-cyan-500/20 rounded-2xl flex items-center justify-center ${className || ''}`}>\n      <div className=\"text-center text-white/60\">\n        <div className=\"w-16 h-16 bg-gradient-to-r from-indigo-400 to-cyan-400 rounded-full mx-auto mb-4 animate-pulse\"></div>\n        <p className=\"text-sm\">Interactive Animation</p>\n      </div>\n    </div>\n  );\n}","size_bytes":1776},"client/src/components/section-backgrounds.tsx":{"content":"import { motion, useScroll, useTransform } from 'framer-motion';\nimport { useEffect, useRef, useState } from 'react';\n\n// Hero Section Background - Live Coding Terminal\nexport function HeroBackground() {\n  const [currentText, setCurrentText] = useState('');\n  const [charIndex, setCharIndex] = useState(0);\n  \n  const codeSnippet = `# IT Infrastructure Management System\nimport os\nimport subprocess\nimport logging\nfrom datetime import datetime\n\nclass ITServiceManager:\n    def __init__(self):\n        self.logger = logging.getLogger('ITServices')\n        self.services_status = {}\n        \n    def check_server_health(self):\n        print(\"Checking server infrastructure...\")\n        servers = ['web-server-01', 'db-server-02', 'mail-server-03']\n        \n        for server in servers:\n            status = self.ping_server(server)\n            self.services_status[server] = status\n            print(f\"Server {server}: {'ONLINE' if status else 'OFFLINE'}\")\n            \n    def deploy_application(self, app_name, environment):\n        print(f\"Deploying {app_name} to {environment}...\")\n        deployment_steps = [\n            'Building application...',\n            'Running tests...',\n            'Creating backup...',\n            'Updating configuration...',\n            'Starting services...',\n            'Verifying deployment...'\n        ]\n        \n        for step in deployment_steps:\n            print(step)\n            \n        print(f\"‚úì {app_name} successfully deployed to {environment}\")`;\n\n  // Code typing animation\n  useEffect(() => {\n    if (charIndex < codeSnippet.length) {\n      const timer = setTimeout(() => {\n        setCurrentText(codeSnippet.slice(0, charIndex + 1));\n        setCharIndex(charIndex + 1);\n      }, 15 + Math.random() * 25);\n      \n      return () => clearTimeout(timer);\n    } else {\n      const resetTimer = setTimeout(() => {\n        setCurrentText('');\n        setCharIndex(0);\n      }, 3000);\n      \n      return () => clearTimeout(resetTimer);\n    }\n  }, [charIndex, codeSnippet]);\n\n  return (\n    <div className=\"absolute inset-0 overflow-hidden\">\n      {/* Animated gradient background */}\n      <motion.div \n        className=\"absolute inset-0\"\n        animate={{\n          background: [\n            'radial-gradient(ellipse 80% 50% at 20% 40%, rgba(99, 102, 241, 0.1) 0%, transparent 50%), radial-gradient(ellipse 60% 80% at 80% 60%, rgba(6, 182, 212, 0.1) 0%, transparent 50%)',\n            'radial-gradient(ellipse 60% 70% at 80% 20%, rgba(99, 102, 241, 0.15) 0%, transparent 60%), radial-gradient(ellipse 80% 60% at 20% 80%, rgba(6, 182, 212, 0.15) 0%, transparent 60%)',\n            'radial-gradient(ellipse 90% 40% at 40% 60%, rgba(99, 102, 241, 0.12) 0%, transparent 55%), radial-gradient(ellipse 50% 90% at 70% 30%, rgba(6, 182, 212, 0.12) 0%, transparent 55%)'\n          ]\n        }}\n        transition={{ \n          duration: 20, \n          repeat: Infinity, \n          repeatType: 'reverse',\n          ease: 'easeInOut'\n        }}\n      />\n\n      {/* Live coding terminal - Large and centered */}\n      <motion.div \n        className=\"absolute top-20 left-1/2 transform -translate-x-1/2 w-[900px] h-[550px] bg-black/95 backdrop-blur-lg rounded-xl border border-green-500/40 overflow-hidden shadow-2xl shadow-green-500/20\"\n        initial={{ scale: 0.8, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ duration: 1.2, ease: 'easeOut' }}\n      >\n        {/* Terminal header */}\n        <motion.div \n          className=\"bg-gradient-to-r from-green-500/30 to-green-400/20 px-4 py-3 border-b border-green-500/30 flex items-center gap-3\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.5 }}\n        >\n          <div className=\"flex gap-2\">\n            <motion.div \n              className=\"w-3 h-3 bg-red-500 rounded-full\"\n              animate={{ opacity: [0.7, 1, 0.7] }}\n              transition={{ duration: 2, repeat: Infinity }}\n            />\n            <motion.div \n              className=\"w-3 h-3 bg-yellow-500 rounded-full\"\n              animate={{ opacity: [0.7, 1, 0.7] }}\n              transition={{ duration: 2, repeat: Infinity, delay: 0.3 }}\n            />\n            <motion.div \n              className=\"w-3 h-3 bg-green-500 rounded-full\"\n              animate={{ opacity: [0.7, 1, 0.7] }}\n              transition={{ duration: 2, repeat: Infinity, delay: 0.6 }}\n            />\n          </div>\n          <span className=\"ml-2 text-green-300 text-sm font-mono\">\n            it-services-manager.py\n          </span>\n        </motion.div>\n\n        {/* Terminal content */}\n        <div className=\"p-6 h-full overflow-auto\">\n          <div className=\"text-green-400 font-mono text-sm leading-relaxed\">\n            <div className=\"text-green-300 mb-2\">\n              $ python it-services-manager.py --deploy\n            </div>\n            <div className=\"whitespace-pre-wrap\">\n              {currentText}\n              <motion.span\n                className=\"bg-green-400 w-2 h-5 inline-block ml-1\"\n                animate={{ opacity: [0, 1, 0] }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n            </div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Floating code elements */}\n      <div className=\"absolute inset-0\">\n        {['{ }', '[ ]', '( )', '//', '#', '*', '=>', '++', 'if', 'else', 'def', 'class'].map((symbol, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute font-mono text-sm text-indigo-400/20\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            initial={{ opacity: 0, scale: 0 }}\n            animate={{ \n              opacity: [0, 0.3, 0],\n              scale: [0.5, 1, 0.5],\n              rotate: [0, 360],\n              y: [-20, -40, -20]\n            }}\n            transition={{\n              duration: Math.random() * 10 + 5,\n              repeat: Infinity,\n              delay: Math.random() * 5,\n              ease: 'easeInOut'\n            }}\n          >\n            {symbol}\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Services Section Background - Network Visualization\nexport function ServicesBackground() {\n  return (\n    <div className=\"absolute inset-0 overflow-hidden\">\n      {/* Network-inspired gradient */}\n      <motion.div \n        className=\"absolute inset-0\"\n        animate={{\n          background: [\n            'radial-gradient(circle at 25% 25%, rgba(34, 197, 94, 0.1) 0%, transparent 50%), radial-gradient(circle at 75% 75%, rgba(59, 130, 246, 0.1) 0%, transparent 50%)',\n            'radial-gradient(circle at 75% 25%, rgba(34, 197, 94, 0.15) 0%, transparent 60%), radial-gradient(circle at 25% 75%, rgba(59, 130, 246, 0.15) 0%, transparent 60%)',\n            'radial-gradient(circle at 50% 50%, rgba(34, 197, 94, 0.12) 0%, transparent 55%), radial-gradient(circle at 80% 20%, rgba(59, 130, 246, 0.12) 0%, transparent 55%)'\n          ]\n        }}\n        transition={{ \n          duration: 15, \n          repeat: Infinity, \n          repeatType: 'reverse'\n        }}\n      />\n\n      {/* Network nodes */}\n      {Array.from({ length: 8 }).map((_, i) => (\n        <motion.div\n          key={i}\n          className=\"absolute w-4 h-4 bg-cyan-400/40 rounded-full border border-cyan-300/60\"\n          style={{\n            left: `${20 + (i % 4) * 20}%`,\n            top: `${30 + Math.floor(i / 4) * 40}%`,\n          }}\n          initial={{ scale: 0, opacity: 0 }}\n          animate={{ \n            scale: [1, 1.5, 1],\n            opacity: [0.4, 1, 0.4]\n          }}\n          transition={{\n            duration: 3,\n            repeat: Infinity,\n            delay: i * 0.5,\n            ease: 'easeInOut'\n          }}\n        />\n      ))}\n\n      {/* Connecting lines */}\n      {Array.from({ length: 6 }).map((_, i) => (\n        <motion.div\n          key={i}\n          className=\"absolute h-px bg-gradient-to-r from-transparent via-cyan-400/30 to-transparent\"\n          style={{\n            left: `${20 + (i % 3) * 20}%`,\n            top: `${40 + Math.floor(i / 3) * 30}%`,\n            width: '20%',\n            transform: `rotate(${i * 30}deg)`,\n          }}\n          initial={{ scaleX: 0 }}\n          animate={{ scaleX: [0, 1, 0] }}\n          transition={{\n            duration: 4,\n            repeat: Infinity,\n            delay: i * 0.7,\n            ease: 'easeInOut'\n          }}\n        />\n      ))}\n\n      {/* Data packets */}\n      {Array.from({ length: 4 }).map((_, i) => (\n        <motion.div\n          key={i}\n          className=\"absolute w-2 h-2 bg-green-400 rounded-full\"\n          style={{\n            left: `${10 + i * 25}%`,\n            top: '50%',\n          }}\n          animate={{\n            x: [0, 100, 200, 300, 0],\n            y: [0, -20, 20, -10, 0],\n            opacity: [0, 1, 1, 1, 0]\n          }}\n          transition={{\n            duration: 8,\n            repeat: Infinity,\n            delay: i * 2,\n            ease: 'linear'\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n\n// About/Team Section Background - Code Matrix\nexport function AboutBackground() {\n  const matrixChars = '01ABCDEF';\n  const columns = Array.from({ length: 30 }, (_, i) => i);\n\n  return (\n    <div className=\"absolute inset-0 overflow-hidden\">\n      {/* Dark tech gradient */}\n      <motion.div \n        className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-slate-800 to-indigo-900\"\n        animate={{\n          opacity: [0.8, 1, 0.8]\n        }}\n        transition={{ \n          duration: 10, \n          repeat: Infinity,\n          ease: 'easeInOut'\n        }}\n      />\n\n      {/* Matrix rain effect */}\n      {columns.map((col) => (\n        <motion.div\n          key={col}\n          className=\"absolute top-0 font-mono text-xs text-green-400/20\"\n          style={{\n            left: `${(col / columns.length) * 100}%`,\n            width: '20px'\n          }}\n          initial={{ y: -100, opacity: 0 }}\n          animate={{ \n            y: ['0vh', '100vh'],\n            opacity: [0, 0.6, 0]\n          }}\n          transition={{\n            duration: Math.random() * 8 + 4,\n            repeat: Infinity,\n            ease: 'linear',\n            delay: Math.random() * 5\n          }}\n        >\n          {Array.from({ length: 15 }).map((_, i) => (\n            <motion.div\n              key={i}\n              animate={{ opacity: [0.2, 1, 0.2] }}\n              transition={{\n                duration: 0.5,\n                repeat: Infinity,\n                delay: i * 0.1\n              }}\n            >\n              {matrixChars[Math.floor(Math.random() * matrixChars.length)]}\n            </motion.div>\n          ))}\n        </motion.div>\n      ))}\n\n      {/* Floating tech icons */}\n      {['</>', '{}', '[]', '()', '&&', '||', '!=', '=='].map((symbol, i) => (\n        <motion.div\n          key={i}\n          className=\"absolute font-mono text-lg text-blue-400/20\"\n          style={{\n            left: `${Math.random() * 100}%`,\n            top: `${Math.random() * 100}%`,\n          }}\n          animate={{\n            y: [0, -30, 0],\n            rotate: [0, 180, 360],\n            scale: [0.8, 1.2, 0.8],\n            opacity: [0.1, 0.3, 0.1]\n          }}\n          transition={{\n            duration: Math.random() * 8 + 6,\n            repeat: Infinity,\n            delay: Math.random() * 3,\n            ease: 'easeInOut'\n          }}\n        >\n          {symbol}\n        </motion.div>\n      ))}\n    </div>\n  );\n}\n\n// Contact Section Background - Server Room\nexport function ContactBackground() {\n  return (\n    <div className=\"absolute inset-0 overflow-hidden\">\n      {/* Server room ambiance */}\n      <motion.div \n        className=\"absolute inset-0\"\n        animate={{\n          background: [\n            'linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.8) 50%, rgba(51, 65, 85, 0.9) 100%)',\n            'linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(51, 65, 85, 0.8) 50%, rgba(71, 85, 105, 0.9) 100%)',\n            'linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.8) 50%, rgba(51, 65, 85, 0.9) 100%)'\n          ]\n        }}\n        transition={{ \n          duration: 12, \n          repeat: Infinity, \n          repeatType: 'reverse'\n        }}\n      />\n\n      {/* Server rack lights */}\n      {Array.from({ length: 6 }).map((_, i) => (\n        <motion.div\n          key={i}\n          className=\"absolute w-1 h-8 rounded-full\"\n          style={{\n            left: `${20 + i * 12}%`,\n            top: '20%',\n            background: 'linear-gradient(to bottom, #22c55e, #16a34a, #15803d)'\n          }}\n          animate={{\n            opacity: [0.3, 1, 0.3],\n            boxShadow: [\n              '0 0 5px #22c55e',\n              '0 0 20px #22c55e',\n              '0 0 5px #22c55e'\n            ]\n          }}\n          transition={{\n            duration: 2,\n            repeat: Infinity,\n            delay: i * 0.3,\n            ease: 'easeInOut'\n          }}\n        />\n      ))}\n\n      {/* Data flow lines */}\n      {[20, 40, 60, 80].map((position, index) => (\n        <motion.div\n          key={index}\n          className=\"absolute top-0 bottom-0 w-px opacity-20\"\n          style={{ left: `${position}%` }}\n          animate={{\n            background: [\n              'linear-gradient(to bottom, transparent, #3b82f6, transparent)',\n              'linear-gradient(to bottom, transparent, #06b6d4, transparent)',\n              'linear-gradient(to bottom, transparent, #10b981, transparent)'\n            ]\n          }}\n          transition={{\n            duration: 4,\n            repeat: Infinity,\n            delay: index * 1\n          }}\n        />\n      ))}\n\n      {/* Blinking status indicators */}\n      {Array.from({ length: 12 }).map((_, i) => (\n        <motion.div\n          key={i}\n          className=\"absolute w-2 h-2 rounded-full\"\n          style={{\n            left: `${15 + (i % 6) * 12}%`,\n            top: `${60 + Math.floor(i / 6) * 20}%`,\n            backgroundColor: i % 3 === 0 ? '#22c55e' : i % 3 === 1 ? '#3b82f6' : '#f59e0b'\n          }}\n          animate={{\n            opacity: [0.2, 1, 0.2],\n            scale: [0.8, 1.2, 0.8]\n          }}\n          transition={{\n            duration: 1.5,\n            repeat: Infinity,\n            delay: i * 0.2,\n            ease: 'easeInOut'\n          }}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":14425},"client/src/components/services-cybersec.tsx":{"content":"import { Shield, Eye, Lock, Zap, Activity, Users, Globe, Server } from 'lucide-react';\n\nconst services = [\n  {\n    icon: Shield,\n    title: \"Threat Detection & Response\",\n    description: \"24/7 monitoring with AI-powered threat detection and automated incident response protocols.\",\n    features: [\"Real-time monitoring\", \"AI threat analysis\", \"Automated response\", \"Incident reporting\"],\n    color: \"from-red-500 to-orange-500\"\n  },\n  {\n    icon: Lock,\n    title: \"Data Protection & Encryption\",\n    description: \"Military-grade encryption and data loss prevention systems to secure your sensitive information.\",\n    features: [\"AES-256 encryption\", \"Data masking\", \"Access controls\", \"Backup security\"],\n    color: \"from-green-500 to-teal-500\"\n  },\n  {\n    icon: Eye,\n    title: \"Security Assessment\", \n    description: \"Comprehensive security audits and penetration testing to identify vulnerabilities.\",\n    features: [\"Vulnerability scanning\", \"Penetration testing\", \"Risk assessment\", \"Compliance audit\"],\n    color: \"from-blue-500 to-cyan-500\"\n  },\n  {\n    icon: Globe,\n    title: \"Network Security\",\n    description: \"Advanced firewall management, intrusion detection, and network traffic analysis.\",\n    features: [\"Firewall management\", \"IDS/IPS systems\", \"VPN solutions\", \"Traffic analysis\"],\n    color: \"from-purple-500 to-indigo-500\"\n  },\n  {\n    icon: Users,\n    title: \"Identity & Access Management\",\n    description: \"Secure authentication systems, single sign-on, and privileged access management.\",\n    features: [\"Multi-factor auth\", \"SSO integration\", \"Access controls\", \"User monitoring\"],\n    color: \"from-yellow-500 to-orange-500\"\n  },\n  {\n    icon: Server,\n    title: \"Cloud Security\",\n    description: \"Secure cloud migration, configuration management, and continuous compliance monitoring.\",\n    features: [\"Cloud migration\", \"Config management\", \"Compliance\", \"Monitoring\"],\n    color: \"from-pink-500 to-rose-500\"\n  }\n];\n\nconst industries = [\n  { name: \"Financial Services\", icon: \"üí∞\", description: \"Banking, fintech, insurance\" },\n  { name: \"Healthcare\", icon: \"üè•\", description: \"Hospitals, clinics, pharma\" },\n  { name: \"Manufacturing\", icon: \"üè≠\", description: \"Industrial, automotive, aerospace\" },\n  { name: \"Government\", icon: \"üèõÔ∏è\", description: \"Federal, state, municipal\" },\n  { name: \"E-commerce\", icon: \"üõí\", description: \"Retail, marketplace, logistics\" },\n  { name: \"Technology\", icon: \"üíª\", description: \"Software, hardware, SaaS\" }\n];\n\nexport function ServicesCybersec() {\n  return (\n    <section className=\"py-20 relative\">\n      <div className=\"container max-w-7xl mx-auto px-6\">\n        \n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            <span className=\"text-gradient-hero\">Comprehensive</span>\n            <span className=\"text-white block\">Security Solutions</span>\n          </h2>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            From threat detection to compliance management, our cybersecurity services \n            provide complete protection for your digital infrastructure.\n          </p>\n        </div>\n\n        {/* Services Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-20\">\n          {services.map((service, index) => {\n            const IconComponent = service.icon;\n            return (\n              <div \n                key={index}\n                className=\"glass-card group hover:scale-105 transition-all duration-500 relative overflow-hidden\"\n              >\n                {/* Service Header */}\n                <div className=\"flex items-center gap-4 mb-4\">\n                  <div className={`bg-gradient-to-br ${service.color} p-3 rounded-lg opacity-80 group-hover:opacity-100 transition-opacity`}>\n                    <IconComponent className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-white\">{service.title}</h3>\n                </div>\n                \n                {/* Service Description */}\n                <p className=\"text-gray-400 mb-6 leading-relaxed\">\n                  {service.description}\n                </p>\n                \n                {/* Service Features */}\n                <div className=\"space-y-2\">\n                  {service.features.map((feature, featureIndex) => (\n                    <div key={featureIndex} className=\"flex items-center gap-2\">\n                      <div className=\"w-2 h-2 bg-indigo-400 rounded-full animate-pulse\" \n                           style={{ animationDelay: `${featureIndex * 0.2}s` }}></div>\n                      <span className=\"text-gray-300 text-sm\">{feature}</span>\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Hover Effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-indigo-600/10 to-cyan-600/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none\"></div>\n                \n                {/* Animated border */}\n                <div className=\"absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-indigo-500 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Process Flow */}\n        <div className=\"mb-20\">\n          <h3 className=\"text-3xl font-bold text-center text-white mb-12\">How We Secure Your Business</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            {[\n              { step: \"01\", title: \"Assessment\", desc: \"Complete security audit and risk analysis\" },\n              { step: \"02\", title: \"Strategy\", desc: \"Custom security roadmap and implementation plan\" },\n              { step: \"03\", title: \"Deploy\", desc: \"Implementation of security solutions and monitoring\" },\n              { step: \"04\", title: \"Monitor\", desc: \"24/7 monitoring and continuous improvement\" }\n            ].map((phase, index) => (\n              <div key={index} className=\"text-center relative\">\n                <div className=\"bg-gradient-to-br from-indigo-600 to-cyan-600 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 font-bold text-white text-lg\">\n                  {phase.step}\n                </div>\n                <h4 className=\"text-xl font-semibold text-white mb-2\">{phase.title}</h4>\n                <p className=\"text-gray-400 text-sm\">{phase.desc}</p>\n                \n                {/* Connecting line */}\n                {index < 3 && (\n                  <div className=\"hidden md:block absolute top-8 left-full w-full h-px bg-gradient-to-r from-indigo-500 to-transparent\"></div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Industries We Serve */}\n        <div>\n          <h3 className=\"text-3xl font-bold text-center text-white mb-12\">Industries We Protect</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6\">\n            {industries.map((industry, index) => (\n              <div key={index} className=\"glass-card text-center hover:scale-105 transition-all duration-300 group\">\n                <div className=\"text-4xl mb-3\">{industry.icon}</div>\n                <h4 className=\"text-white font-semibold mb-2 text-sm\">{industry.name}</h4>\n                <p className=\"text-gray-400 text-xs\">{industry.description}</p>\n                \n                {/* Pulse effect on hover */}\n                <div className=\"absolute inset-0 border border-indigo-500/30 rounded-2xl opacity-0 group-hover:opacity-100 group-hover:animate-pulse transition-opacity duration-300\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Call-to-Action */}\n        <div className=\"text-center mt-16\">\n          <div className=\"glass-card max-w-2xl mx-auto\">\n            <h3 className=\"text-2xl font-bold text-white mb-4\">Ready to Secure Your Business?</h3>\n            <p className=\"text-gray-400 mb-6\">\n              Get a free security assessment and personalized recommendations for your organization.\n            </p>\n            <button className=\"bg-gradient-to-r from-indigo-600 to-cyan-600 hover:from-indigo-500 hover:to-cyan-500 px-8 py-3 rounded-lg font-semibold text-white transition-all duration-300 transform hover:scale-105\">\n              <span className=\"flex items-center gap-2 mx-auto w-fit\">\n                <Activity className=\"w-5 h-5\" />\n                Start Free Assessment\n              </span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Background Elements */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {/* Security pattern overlay */}\n        <div className=\"absolute top-1/4 right-10 opacity-5\">\n          <div className=\"grid grid-cols-3 gap-4\">\n            {Array.from({ length: 9 }).map((_, i) => (\n              <div key={i} className=\"w-8 h-8 border border-indigo-400 rounded animate-pulse\" style={{ animationDelay: `${i * 0.2}s` }}></div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Floating security icons */}\n        <div className=\"absolute left-10 top-1/3 animate-float\">\n          <Lock className=\"w-12 h-12 text-indigo-400/20\" />\n        </div>\n        <div className=\"absolute right-20 bottom-1/4 animate-float\" style={{ animationDelay: '2s' }}>\n          <Shield className=\"w-16 h-16 text-cyan-400/20\" />\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":9623},"client/src/components/services-section.tsx":{"content":"import { CreditCard, Shield, TrendingUp } from 'lucide-react';\n\nexport function ServicesSection() {\n  return (\n    <section id=\"services\" className=\"py-24 relative\">\n      <div className=\"container max-w-6xl mx-auto px-8\">\n        <div className=\"section-header text-center mb-12 fade-in\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 text-gradient\">Our Services</h2>\n          <p className=\"text-lg text-white/70 max-w-3xl mx-auto\">\n            Revolutionary financial technology services designed to accelerate your digital transformation and enhance user experiences.\n          </p>\n        </div>\n        \n        <div className=\"services-grid grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"glass-card service-card slide-in-left\" data-testid=\"service-payments\">\n            <div className=\"service-icon w-15 h-15 bg-gradient-to-br from-indigo-500 to-cyan-400 rounded-2xl flex items-center justify-center mb-6\">\n              <CreditCard className=\"w-8 h-8 text-white\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-4 text-white\">Digital Payments</h3>\n            <p className=\"text-white/70 leading-relaxed\">\n              Seamless payment processing with advanced security, real-time transactions, and multi-currency support. Built for scale with enterprise-grade reliability and lightning-fast processing speeds.\n            </p>\n          </div>\n          \n          <div className=\"glass-card service-card fade-in\" data-testid=\"service-security\">\n            <div className=\"service-icon w-15 h-15 bg-gradient-to-br from-indigo-500 to-cyan-400 rounded-2xl flex items-center justify-center mb-6\">\n              <Shield className=\"w-8 h-8 text-white\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-4 text-white\">Blockchain Security</h3>\n            <p className=\"text-white/70 leading-relaxed\">\n              Military-grade encryption and blockchain-powered security infrastructure that protects transactions and user data with immutable ledger technology and advanced threat detection.\n            </p>\n          </div>\n          \n          <div className=\"glass-card service-card slide-in-right\" data-testid=\"service-analytics\">\n            <div className=\"service-icon w-15 h-15 bg-gradient-to-br from-indigo-500 to-cyan-400 rounded-2xl flex items-center justify-center mb-6\">\n              <TrendingUp className=\"w-8 h-8 text-white\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-4 text-white\">Analytics Dashboard</h3>\n            <p className=\"text-white/70 leading-relaxed\">\n              Real-time insights and comprehensive analytics with AI-powered predictive modeling, custom reporting, and interactive visualizations that drive informed business decisions.\n            </p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2874},"client/src/components/solutions-section.tsx":{"content":"import { Network, Box, Scale, Database, Lock, Rocket } from 'lucide-react';\n\nexport function SolutionsSection() {\n  return (\n    <section id=\"solutions\" className=\"py-24 relative\">\n      <div className=\"container max-w-6xl mx-auto px-8\">\n        <div className=\"section-header text-center mb-12 fade-in\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 text-gradient\">Cloud Architecture</h2>\n          <p className=\"text-lg text-white/70 max-w-3xl mx-auto\">\n            Scalable, secure, and resilient cloud infrastructure that powers the next generation of financial applications.\n          </p>\n        </div>\n        \n        <div className=\"tech-cards grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <div className=\"tech-card bg-slate-800/40 backdrop-blur-lg border border-indigo-500/10 rounded-2xl p-6 text-center transition-all duration-300 relative overflow-hidden hover:-translate-y-2 hover:border-indigo-500/30 fade-in\" data-testid=\"tech-api-gateway\">\n            <Network className=\"w-8 h-8 text-cyan-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2 text-white\">API Gateway</h3>\n            <p className=\"text-white/70 text-sm\">High-performance API management with rate limiting, authentication, and real-time monitoring.</p>\n          </div>\n          \n          <div className=\"tech-card bg-slate-800/40 backdrop-blur-lg border border-indigo-500/10 rounded-2xl p-6 text-center transition-all duration-300 relative overflow-hidden hover:-translate-y-2 hover:border-indigo-500/30 fade-in\" data-testid=\"tech-microservices\">\n            <Box className=\"w-8 h-8 text-cyan-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2 text-white\">Microservices</h3>\n            <p className=\"text-white/70 text-sm\">Modular architecture enabling rapid deployment, seamless scaling, and independent service management.</p>\n          </div>\n          \n          <div className=\"tech-card bg-slate-800/40 backdrop-blur-lg border border-indigo-500/10 rounded-2xl p-6 text-center transition-all duration-300 relative overflow-hidden hover:-translate-y-2 hover:border-indigo-500/30 fade-in\" data-testid=\"tech-load-balancer\">\n            <Scale className=\"w-8 h-8 text-cyan-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2 text-white\">Load Balancer</h3>\n            <p className=\"text-white/70 text-sm\">Intelligent traffic distribution ensuring optimal performance and 99.9% uptime across all services.</p>\n          </div>\n          \n          <div className=\"tech-card bg-slate-800/40 backdrop-blur-lg border border-indigo-500/10 rounded-2xl p-6 text-center transition-all duration-300 relative overflow-hidden hover:-translate-y-2 hover:border-indigo-500/30 fade-in\" data-testid=\"tech-data-lake\">\n            <Database className=\"w-8 h-8 text-cyan-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2 text-white\">Data Lake</h3>\n            <p className=\"text-white/70 text-sm\">Centralized data storage with real-time processing capabilities and advanced analytics integration.</p>\n          </div>\n          \n          <div className=\"tech-card bg-slate-800/40 backdrop-blur-lg border border-indigo-500/10 rounded-2xl p-6 text-center transition-all duration-300 relative overflow-hidden hover:-translate-y-2 hover:border-indigo-500/30 fade-in\" data-testid=\"tech-security-hub\">\n            <Lock className=\"w-8 h-8 text-cyan-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2 text-white\">Security Hub</h3>\n            <p className=\"text-white/70 text-sm\">Comprehensive security monitoring with AI-powered threat detection and automated response systems.</p>\n          </div>\n          \n          <div className=\"tech-card bg-slate-800/40 backdrop-blur-lg border border-indigo-500/10 rounded-2xl p-6 text-center transition-all duration-300 relative overflow-hidden hover:-translate-y-2 hover:border-indigo-500/30 fade-in\" data-testid=\"tech-auto-scaling\">\n            <Rocket className=\"w-8 h-8 text-cyan-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2 text-white\">Auto Scaling</h3>\n            <p className=\"text-white/70 text-sm\">Dynamic resource allocation that automatically adapts to traffic demands and optimizes costs.</p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4363},"client/src/components/technology-section.tsx":{"content":"import { useState } from 'react';\nimport { Code2, Database, Shield, Zap, Cloud, Cpu, Network, Globe } from 'lucide-react';\n\nconst technologies = [\n  {\n    category: \"Frontend\",\n    icon: Code2,\n    color: \"from-blue-500 to-cyan-500\",\n    items: [\"React\", \"TypeScript\", \"Next.js\", \"Tailwind CSS\"]\n  },\n  {\n    category: \"Backend\",\n    icon: Database,\n    color: \"from-green-500 to-emerald-500\",\n    items: [\"Node.js\", \"Python\", \"PostgreSQL\", \"Redis\"]\n  },\n  {\n    category: \"Cloud\",\n    icon: Cloud,\n    color: \"from-purple-500 to-pink-500\",\n    items: [\"AWS\", \"Docker\", \"Kubernetes\", \"Serverless\"]\n  },\n  {\n    category: \"Security\",\n    icon: Shield,\n    color: \"from-orange-500 to-red-500\",\n    items: [\"OAuth\", \"JWT\", \"Encryption\", \"Monitoring\"]\n  }\n];\n\nconst features = [\n  {\n    icon: Zap,\n    title: \"Lightning Fast\",\n    description: \"Optimized performance with sub-second response times\"\n  },\n  {\n    icon: Shield,\n    title: \"Bank-Grade Security\",\n    description: \"Military-level encryption and security protocols\"\n  },\n  {\n    icon: Cpu,\n    title: \"AI-Powered\",\n    description: \"Machine learning algorithms for intelligent automation\"\n  },\n  {\n    icon: Network,\n    title: \"Distributed Architecture\",\n    description: \"Microservices architecture for maximum scalability\"\n  },\n  {\n    icon: Globe,\n    title: \"Global CDN\",\n    description: \"Worldwide content delivery for optimal performance\"\n  },\n  {\n    icon: Database,\n    title: \"Real-time Sync\",\n    description: \"Instant data synchronization across all platforms\"\n  }\n];\n\nexport function TechnologySection() {\n  const [selectedTech, setSelectedTech] = useState(0);\n\n  return (\n    <section className=\"py-20 relative overflow-hidden\">\n      <div className=\"container max-w-7xl mx-auto px-6\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-6xl font-bold mb-6\">\n            <span className=\"text-white\">Cutting-Edge</span>\n            <br />\n            <span className=\"text-gradient-hero\">Technology Stack</span>\n          </h2>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Built with the most advanced technologies to ensure scalability,\n            security, and performance that exceeds industry standards.\n          </p>\n        </div>\n\n        {/* Technology Cards */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          {technologies.map((tech, index) => (\n            <div\n              key={index}\n              className={`tech-card bg-slate-800/40 backdrop-blur-lg border border-indigo-500/20 rounded-2xl p-6 cursor-pointer transition-all duration-300 hover:-translate-y-2 hover:border-indigo-500/40 ${\n                selectedTech === index ? 'border-indigo-500/60 scale-105' : ''\n              }`}\n              onClick={() => setSelectedTech(index)}\n            >\n              <div className={`w-12 h-12 bg-gradient-to-r ${tech.color} rounded-xl flex items-center justify-center mb-4`}>\n                <tech.icon className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-3\">{tech.category}</h3>\n              <div className=\"space-y-2\">\n                {tech.items.map((item, itemIndex) => (\n                  <div key={itemIndex} className=\"text-sm text-gray-400 flex items-center\">\n                    <div className=\"w-2 h-2 bg-indigo-400 rounded-full mr-2\"></div>\n                    {item}\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          {features.map((feature, index) => (\n            <div key={index} className=\"feature-card group\">\n              <div className=\"bg-slate-800/40 backdrop-blur-lg border border-indigo-500/20 rounded-2xl p-6 h-full transition-all duration-300 hover:-translate-y-2 hover:border-indigo-500/40\">\n                <div className=\"w-12 h-12 bg-indigo-500/20 rounded-xl flex items-center justify-center mb-4 group-hover:bg-indigo-500/30 transition-colors\">\n                  <feature.icon className=\"w-6 h-6 text-indigo-400\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-white mb-2\">{feature.title}</h3>\n                <p className=\"text-gray-400 text-sm\">{feature.description}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Architecture Diagram */}\n        <div className=\"bg-slate-800/40 backdrop-blur-lg border border-indigo-500/20 rounded-3xl p-8\">\n          <h3 className=\"text-2xl font-bold text-white text-center mb-8\">System Architecture</h3>\n\n          <div className=\"relative\">\n            {/* Architecture Flow */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 items-center\">\n              {/* Client Layer */}\n              <div className=\"text-center\">\n                <div className=\"w-20 h-20 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Globe className=\"w-10 h-10 text-white\" />\n                </div>\n                <h4 className=\"text-lg font-semibold text-white mb-2\">Client Layer</h4>\n                <p className=\"text-sm text-gray-400\">Web, Mobile & API clients with real-time communication</p>\n              </div>\n\n              {/* Arrow */}\n              <div className=\"hidden md:flex justify-center\">\n                <div className=\"flex items-center\">\n                  <div className=\"h-px bg-gradient-to-r from-transparent via-indigo-500 to-transparent w-full\"></div>\n                  <div className=\"w-3 h-3 bg-indigo-500 rounded-full mx-2\"></div>\n                  <div className=\"h-px bg-gradient-to-r from-transparent via-indigo-500 to-transparent w-full\"></div>\n                </div>\n              </div>\n\n              {/* Service Layer */}\n              <div className=\"text-center\">\n                <div className=\"w-20 h-20 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Network className=\"w-10 h-10 text-white\" />\n                </div>\n                <h4 className=\"text-lg font-semibold text-white mb-2\">Service Layer</h4>\n                <p className=\"text-sm text-gray-400\">Microservices with auto-scaling and load balancing</p>\n              </div>\n            </div>\n\n            {/* Data Layer */}\n            <div className=\"mt-12 text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Database className=\"w-10 h-10 text-white\" />\n              </div>\n              <h4 className=\"text-lg font-semibold text-white mb-2\">Data Layer</h4>\n              <p className=\"text-sm text-gray-400\">Distributed databases with real-time replication and backup</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Background Elements */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {/* Tech grid pattern */}\n        <div className=\"absolute top-10 right-10 opacity-5\">\n          <div className=\"grid grid-cols-4 gap-2\">\n            {Array.from({ length: 16 }).map((_, i) => (\n              <div key={i} className=\"w-4 h-4 border border-indigo-400 rounded animate-pulse\" style={{ animationDelay: `${i * 0.1}s` }}></div>\n            ))}\n          </div>\n        </div>\n\n        {/* Floating tech icons */}\n        <div className=\"absolute left-20 top-1/2 animate-float\">\n          <Code2 className=\"w-16 h-16 text-indigo-400/20\" />\n        </div>\n        <div className=\"absolute right-10 bottom-20 animate-float\" style={{ animationDelay: '4s' }}>\n          <Cpu className=\"w-12 h-12 text-cyan-400/20\" />\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7915},"client/src/components/three-animations.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nexport function ThreeAnimations() {\n  const mountRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n    \n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.setClearColor(0x000000, 0);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create floating geometric shapes\n    const geometries = [\n      new THREE.OctahedronGeometry(0.5),\n      new THREE.TetrahedronGeometry(0.7),\n      new THREE.IcosahedronGeometry(0.6),\n      new THREE.DodecahedronGeometry(0.5)\n    ];\n\n    const materials = [\n      new THREE.MeshBasicMaterial({ \n        color: 0x6366f1, \n        wireframe: true, \n        transparent: true, \n        opacity: 0.3 \n      }),\n      new THREE.MeshBasicMaterial({ \n        color: 0x06b6d4, \n        wireframe: true, \n        transparent: true, \n        opacity: 0.4 \n      }),\n      new THREE.MeshBasicMaterial({ \n        color: 0x8b5cf6, \n        wireframe: true, \n        transparent: true, \n        opacity: 0.3 \n      }),\n      new THREE.MeshBasicMaterial({ \n        color: 0x10b981, \n        wireframe: true, \n        transparent: true, \n        opacity: 0.35 \n      })\n    ];\n\n    const shapes: Array<{ mesh: THREE.Mesh; speed: number; axis: THREE.Vector3 }> = [];\n    const shapeCount = window.innerWidth < 768 ? 3 : 6;\n\n    for (let i = 0; i < shapeCount; i++) {\n      const geometry = geometries[i % geometries.length];\n      const material = materials[i % materials.length];\n      const mesh = new THREE.Mesh(geometry, material);\n      \n      // Random position\n      mesh.position.set(\n        (Math.random() - 0.5) * 20,\n        (Math.random() - 0.5) * 20,\n        (Math.random() - 0.5) * 20\n      );\n      \n      // Random rotation axis\n      const axis = new THREE.Vector3(\n        Math.random() - 0.5,\n        Math.random() - 0.5,\n        Math.random() - 0.5\n      ).normalize();\n      \n      shapes.push({\n        mesh,\n        speed: 0.01 + Math.random() * 0.02,\n        axis\n      });\n      \n      scene.add(mesh);\n    }\n\n    camera.position.z = 15;\n\n    // Animation loop\n    const animate = () => {\n      // Rotate shapes\n      shapes.forEach(({ mesh, speed, axis }) => {\n        mesh.rotateOnAxis(axis, speed);\n        \n        // Floating motion\n        mesh.position.y += Math.sin(Date.now() * 0.001 + mesh.position.x) * 0.01;\n        mesh.position.x += Math.cos(Date.now() * 0.0008 + mesh.position.z) * 0.005;\n      });\n\n      // Camera gentle movement\n      camera.position.x = Math.sin(Date.now() * 0.0005) * 2;\n      camera.position.y = Math.cos(Date.now() * 0.0003) * 1;\n      camera.lookAt(0, 0, 0);\n\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n\n    // Handle resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n      geometries.forEach(geo => geo.dispose());\n      materials.forEach(mat => mat.dispose());\n    };\n  }, []);\n\n  return <div ref={mountRef} className=\"fixed inset-0 pointer-events-none z-[1]\" />;\n}","size_bytes":3817},"client/src/components/webgl-loading-spinner.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\ninterface WebGLLoadingSpinnerProps {\n  size?: number;\n  color?: number;\n  isLoading?: boolean;\n}\n\nexport function WebGLLoadingSpinner({ \n  size = 100, \n  color = 0x6366f1, \n  isLoading = true \n}: WebGLLoadingSpinnerProps) {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const meshRef = useRef<THREE.Mesh | null>(null);\n\n  useEffect(() => {\n    if (!mountRef.current || !isLoading) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n    renderer.setSize(size, size);\n    renderer.setClearColor(0x000000, 0);\n    mountRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Create torus knot geometry\n    const geometry = new THREE.TorusKnotGeometry(1, 0.3, 100, 16);\n    const material = new THREE.MeshBasicMaterial({ \n      color, \n      wireframe: true,\n      transparent: true,\n      opacity: 0.8\n    });\n    \n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n    meshRef.current = mesh;\n\n    // Animation loop\n    const animate = () => {\n      if (!mesh || !renderer || !scene) return;\n\n      mesh.rotation.x += 0.02;\n      mesh.rotation.y += 0.03;\n      mesh.rotation.z += 0.01;\n\n      // Pulsing effect\n      const scale = 1 + Math.sin(Date.now() * 0.005) * 0.2;\n      mesh.scale.setScalar(scale);\n\n      renderer.render(scene, camera);\n      \n      if (isLoading) {\n        requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n\n    // Cleanup\n    return () => {\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n      geometry.dispose();\n      material.dispose();\n    };\n  }, [size, color, isLoading]);\n\n  if (!isLoading) return null;\n\n  return (\n    <div className=\"flex items-center justify-center\">\n      <div ref={mountRef} />\n    </div>\n  );\n}\n\nexport function PageLoadingSpinner() {\n  return (\n    <div className=\"fixed inset-0 bg-slate-900/90 backdrop-blur-sm z-50 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <WebGLLoadingSpinner size={120} color={0x6366f1} />\n        <div className=\"mt-6 text-white text-lg font-medium\">\n          Initializing FlowTech Experience...\n        </div>\n        <div className=\"mt-2 text-white/60 text-sm\">\n          Loading advanced graphics and animations\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2762},"client/src/components/webgl-particle-system.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nexport function WebGLParticleSystem() {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<THREE.Scene>();\n  const rendererRef = useRef<THREE.WebGLRenderer>();\n  const particlesRef = useRef<THREE.Points>();\n  const mouseRef = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({ \n      alpha: true, \n      antialias: true,\n      powerPreference: \"high-performance\"\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.setClearColor(0x000000, 0);\n    mountRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    // Particle system\n    const particleCount = window.innerWidth < 768 ? 2000 : 5000;\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const velocities = new Float32Array(particleCount * 3);\n\n    for (let i = 0; i < particleCount; i++) {\n      const i3 = i * 3;\n      \n      // Position\n      positions[i3] = (Math.random() - 0.5) * 20;\n      positions[i3 + 1] = (Math.random() - 0.5) * 20;\n      positions[i3 + 2] = (Math.random() - 0.5) * 20;\n      \n      // Velocity\n      velocities[i3] = (Math.random() - 0.5) * 0.02;\n      velocities[i3 + 1] = (Math.random() - 0.5) * 0.02;\n      velocities[i3 + 2] = (Math.random() - 0.5) * 0.02;\n      \n      // Colors (cyan to purple gradient)\n      const hue = Math.random() * 0.3 + 0.5; // 0.5-0.8 (cyan to purple)\n      const color = new THREE.Color().setHSL(hue, 0.8, 0.6);\n      colors[i3] = color.r;\n      colors[i3 + 1] = color.g;\n      colors[i3 + 2] = color.b;\n    }\n\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n\n    // Particle material with WebGL shaders\n    const material = new THREE.PointsMaterial({\n      size: window.innerWidth < 768 ? 2 : 3,\n      vertexColors: true,\n      transparent: true,\n      opacity: 0.6,\n      blending: THREE.AdditiveBlending,\n      sizeAttenuation: true\n    });\n\n    const particles = new THREE.Points(geometry, material);\n    scene.add(particles);\n    particlesRef.current = particles;\n\n    // Mouse interaction\n    const handleMouseMove = (event: MouseEvent) => {\n      mouseRef.current.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouseRef.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    };\n\n    // Touch interaction for mobile\n    const handleTouchMove = (event: TouchEvent) => {\n      if (event.touches.length > 0) {\n        const touch = event.touches[0];\n        mouseRef.current.x = (touch.clientX / window.innerWidth) * 2 - 1;\n        mouseRef.current.y = -(touch.clientY / window.innerHeight) * 2 + 1;\n      }\n    };\n\n    // Animation loop\n    const animate = () => {\n      if (!particles || !renderer || !scene) return;\n\n      const positions = particles.geometry.attributes.position.array as Float32Array;\n      const colors = particles.geometry.attributes.color.array as Float32Array;\n\n      // Update particle positions with mouse interaction\n      for (let i = 0; i < particleCount; i++) {\n        const i3 = i * 3;\n        \n        // Mouse attraction effect\n        const mouseDistance = Math.sqrt(\n          Math.pow(positions[i3] - mouseRef.current.x * 5, 2) +\n          Math.pow(positions[i3 + 1] - mouseRef.current.y * 5, 2)\n        );\n        \n        if (mouseDistance < 3) {\n          const force = (3 - mouseDistance) / 3;\n          positions[i3] += (mouseRef.current.x * 5 - positions[i3]) * force * 0.02;\n          positions[i3 + 1] += (mouseRef.current.y * 5 - positions[i3 + 1]) * force * 0.02;\n          \n          // Color change on interaction\n          colors[i3] = 1; // Red component\n          colors[i3 + 1] = 0.5; // Green component\n          colors[i3 + 2] = 1; // Blue component\n        } else {\n          // Return to original colors\n          const hue = (i / particleCount) * 0.3 + 0.5;\n          const color = new THREE.Color().setHSL(hue, 0.8, 0.6);\n          colors[i3] = color.r;\n          colors[i3 + 1] = color.g;\n          colors[i3 + 2] = color.b;\n        }\n\n        // Continuous movement\n        positions[i3] += velocities[i3];\n        positions[i3 + 1] += velocities[i3 + 1];\n        positions[i3 + 2] += velocities[i3 + 2];\n\n        // Boundary wrapping\n        if (Math.abs(positions[i3]) > 10) velocities[i3] *= -1;\n        if (Math.abs(positions[i3 + 1]) > 10) velocities[i3 + 1] *= -1;\n        if (Math.abs(positions[i3 + 2]) > 10) velocities[i3 + 2] *= -1;\n      }\n\n      particles.geometry.attributes.position.needsUpdate = true;\n      particles.geometry.attributes.color.needsUpdate = true;\n      particles.rotation.y += 0.001;\n      particles.rotation.x += 0.0005;\n\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n\n    // Handle resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    // Event listeners\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('touchmove', handleTouchMove, { passive: true });\n    window.addEventListener('resize', handleResize);\n\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchmove', handleTouchMove);\n      window.removeEventListener('resize', handleResize);\n      \n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n      geometry.dispose();\n      material.dispose();\n    };\n  }, []);\n\n  return (\n    <div \n      ref={mountRef} \n      className=\"fixed inset-0 pointer-events-none z-0\"\n      style={{ \n        background: 'radial-gradient(ellipse at center, rgba(99, 102, 241, 0.1) 0%, transparent 70%)'\n      }}\n    />\n  );\n}","size_bytes":6461},"client/src/hooks/use-gsap-animations.tsx":{"content":"import { useEffect } from 'react';\n\ndeclare global {\n  interface Window {\n    gsap: any;\n    ScrollTrigger: any;\n  }\n}\n\nexport function useGSAPAnimations() {\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.gsap && window.ScrollTrigger) {\n      const gsap = window.gsap;\n      const ScrollTrigger = window.ScrollTrigger;\n      \n      gsap.registerPlugin(ScrollTrigger);\n\n      // Navbar blur effect\n      gsap.to('.nav', {\n        backdropFilter: 'blur(20px)',\n        background: 'rgba(15, 23, 42, 0.95)',\n        scrollTrigger: {\n          trigger: '.hero',\n          start: 'top -80px',\n          toggleActions: 'play none none reverse'\n        }\n      });\n\n      // Fade in animations\n      gsap.utils.toArray('.fade-in').forEach((elem: any) => {\n        gsap.fromTo(elem, \n          { y: 60, opacity: 0 },\n          {\n            y: 0,\n            opacity: 1,\n            duration: 1,\n            scrollTrigger: {\n              trigger: elem,\n              start: 'top 85%',\n              end: 'bottom 15%',\n            }\n          }\n        );\n      });\n\n      // Slide in left animations\n      gsap.utils.toArray('.slide-in-left').forEach((elem: any) => {\n        gsap.fromTo(elem,\n          { x: -60, opacity: 0 },\n          {\n            x: 0,\n            opacity: 1,\n            duration: 1,\n            scrollTrigger: {\n              trigger: elem,\n              start: 'top 85%',\n            }\n          }\n        );\n      });\n\n      // Slide in right animations\n      gsap.utils.toArray('.slide-in-right').forEach((elem: any) => {\n        gsap.fromTo(elem,\n          { x: 60, opacity: 0 },\n          {\n            x: 0,\n            opacity: 1,\n            duration: 1,\n            scrollTrigger: {\n              trigger: elem,\n              start: 'top 85%',\n            }\n          }\n        );\n      });\n\n      // Scale in animations\n      gsap.utils.toArray('.scale-in').forEach((elem: any) => {\n        gsap.fromTo(elem,\n          { scale: 0.8, opacity: 0 },\n          {\n            scale: 1,\n            opacity: 1,\n            duration: 0.8,\n            scrollTrigger: {\n              trigger: elem,\n              start: 'top 85%',\n            }\n          }\n        );\n      });\n\n      // Staggered animations for cards\n      gsap.utils.toArray('.services-grid .glass-card').forEach((card: any, index: number) => {\n        gsap.fromTo(card,\n          { y: 60, opacity: 0 },\n          {\n            y: 0,\n            opacity: 1,\n            duration: 0.8,\n            delay: index * 0.2,\n            scrollTrigger: {\n              trigger: card,\n              start: 'top 90%',\n            }\n          }\n        );\n      });\n\n      gsap.utils.toArray('.tech-cards .tech-card').forEach((card: any, index: number) => {\n        gsap.fromTo(card,\n          { y: 40, opacity: 0 },\n          {\n            y: 0,\n            opacity: 1,\n            duration: 0.6,\n            delay: index * 0.1,\n            scrollTrigger: {\n              trigger: card,\n              start: 'top 90%',\n            }\n          }\n        );\n      });\n\n      // Floating orbs continuous animation\n      gsap.to('.orb-1', {\n        x: 50,\n        y: -30,\n        duration: 8,\n        ease: 'sine.inOut',\n        yoyo: true,\n        repeat: -1\n      });\n\n      gsap.to('.orb-2', {\n        x: -40,\n        y: 40,\n        duration: 6,\n        ease: 'sine.inOut',\n        yoyo: true,\n        repeat: -1\n      });\n\n      gsap.to('.orb-3', {\n        x: -30,\n        y: -50,\n        duration: 10,\n        ease: 'sine.inOut',\n        yoyo: true,\n        repeat: -1\n      });\n\n      // Initial loading animation\n      gsap.fromTo('.hero-content', \n        { y: 50, opacity: 0 },\n        { y: 0, opacity: 1, duration: 1.2, ease: 'power2.out', delay: 0.3 }\n      );\n\n      return () => {\n        ScrollTrigger.getAll().forEach((trigger: any) => trigger.kill());\n      };\n    }\n  }, []);\n}\n","size_bytes":3888},"client/src/hooks/use-gsap-scroll-smoother.tsx":{"content":"import { useEffect } from 'react';\n\ndeclare global {\n  interface Window {\n    gsap: any;\n    ScrollTrigger: any;\n    ScrollSmoother: any;\n  }\n}\n\nexport function useGSAPScrollSmoother() {\n  useEffect(() => {\n    if (typeof window === 'undefined' || !window.gsap) return;\n    \n    const { gsap } = window;\n    \n    // Check if plugins are available\n    if (!window.ScrollTrigger || !window.ScrollSmoother) {\n      console.warn('GSAP plugins not loaded, skipping ScrollSmoother initialization');\n      return;\n    }\n    \n    // Register GSAP plugins\n    gsap.registerPlugin(window.ScrollTrigger, window.ScrollSmoother);\n\n    // Create ScrollSmoother instance for liquid smooth scrolling\n    const smoother = window.ScrollSmoother.create({\n      wrapper: \"#smooth-wrapper\",\n      content: \"#smooth-content\",\n      smooth: 2,\n      normalizeScroll: true,\n      ignoreMobileResize: true,\n      effects: true,\n    });\n\n    // Enhanced scroll-triggered animations that work with ScrollSmoother\n    gsap.utils.toArray('.liquid-section').forEach((section: any, index: number) => {\n      // Scale and fade animation with proper scroll-back behavior\n      gsap.fromTo(section, \n        { \n          scale: 0.8,\n          opacity: 0,\n          rotationX: -15,\n          filter: 'blur(10px)'\n        },\n        { \n          scale: 1,\n          opacity: 1,\n          rotationX: 0,\n          filter: 'blur(0px)',\n          duration: 1.5,\n          ease: 'power2.out',\n          scrollTrigger: {\n            trigger: section,\n            start: 'top 85%',\n            end: 'bottom 15%',\n            toggleActions: 'play none none reverse',\n            refreshPriority: -1,\n          }\n        }\n      );\n\n      // Parallax effect for backgrounds\n      if (section.querySelector('.bg-parallax')) {\n        gsap.to(section.querySelector('.bg-parallax'), {\n          yPercent: -50,\n          ease: 'none',\n          scrollTrigger: {\n            trigger: section,\n            start: 'top bottom',\n            end: 'bottom top',\n            scrub: true,\n          }\n        });\n      }\n    });\n\n    // Liquid cards stagger animation with scroll-back\n    gsap.utils.toArray('.liquid-card').forEach((card: any, index: number) => {\n      gsap.fromTo(card,\n        {\n          y: 100,\n          opacity: 0,\n          scale: 0.8,\n          rotationY: -45\n        },\n        {\n          y: 0,\n          opacity: 1,\n          scale: 1,\n          rotationY: 0,\n          duration: 1,\n          delay: index * 0.1,\n          ease: 'back.out(1.7)',\n          scrollTrigger: {\n            trigger: card,\n            start: 'top 90%',\n            toggleActions: 'play none none reverse',\n          }\n        }\n      );\n    });\n\n    // Text reveal animations with character-by-character effect\n    gsap.utils.toArray('.liquid-text').forEach((text: any) => {\n      const chars = text.textContent.split('');\n      text.innerHTML = chars.map((char: string) => \n        char === ' ' ? '&nbsp;' : `<span class=\"char\">${char}</span>`\n      ).join('');\n      \n      gsap.fromTo(text.querySelectorAll('.char'),\n        { \n          y: 100,\n          opacity: 0,\n          rotationX: -90\n        },\n        {\n          y: 0,\n          opacity: 1,\n          rotationX: 0,\n          duration: 0.6,\n          stagger: 0.02,\n          ease: 'back.out(2)',\n          scrollTrigger: {\n            trigger: text,\n            start: 'top 80%',\n            toggleActions: 'play none none reverse',\n          }\n        }\n      );\n    });\n\n    // Navigation background animation\n    const nav = document.querySelector('.liquid-nav');\n    if (nav) {\n      gsap.to(nav, {\n        backgroundColor: 'rgba(15, 23, 42, 0.95)',\n        backdropFilter: 'blur(20px)',\n        borderBottom: '1px solid rgba(99, 102, 241, 0.2)',\n        scrollTrigger: {\n          trigger: 'body',\n          start: 'top -100',\n          end: 'bottom bottom',\n          toggleActions: 'play none none reverse',\n        }\n      });\n    }\n\n    // Cleanup function\n    return () => {\n      if (window.ScrollTrigger) {\n        window.ScrollTrigger.getAll().forEach((trigger: any) => trigger.kill());\n      }\n      if (smoother) {\n        smoother.kill();\n      }\n    };\n  }, []);\n}","size_bytes":4193},"client/src/hooks/use-jeton-animations.tsx":{"content":"import { useEffect } from 'react';\n\ndeclare global {\n  interface Window {\n    gsap: any;\n    ScrollTrigger: any;\n  }\n}\n\nexport function useJetonAnimations() {\n  useEffect(() => {\n    if (typeof window === 'undefined' || !window.gsap) return;\n    \n    const { gsap } = window;\n    \n    if (!window.ScrollTrigger) {\n      console.warn('ScrollTrigger not loaded');\n      return;\n    }\n    \n    gsap.registerPlugin(window.ScrollTrigger);\n\n    // Jeton-style flowing text animations\n    const animateText = (selector: string, delay = 0) => {\n      const elements = document.querySelectorAll(selector);\n      elements.forEach((element, index) => {\n        const text = element.textContent || '';\n        const chars = text.split('');\n        \n        element.innerHTML = chars.map(char => \n          char === ' ' ? '&nbsp;' : `<span class=\"char\" style=\"display: inline-block;\">${char}</span>`\n        ).join('');\n        \n        const charElements = element.querySelectorAll('.char');\n        \n        gsap.fromTo(charElements, \n          {\n            y: 100,\n            opacity: 0,\n            rotation: 15,\n            scale: 0.3\n          },\n          {\n            y: 0,\n            opacity: 1,\n            rotation: 0,\n            scale: 1,\n            duration: 0.8,\n            ease: \"back.out(1.7)\",\n            stagger: 0.03,\n            delay: delay + (index * 0.1),\n            scrollTrigger: {\n              trigger: element,\n              start: \"top 80%\",\n              toggleActions: \"play none none reverse\"\n            }\n          }\n        );\n      });\n    };\n\n    // Flowing card animations like Jeton\n    const animateCards = () => {\n      const cards = document.querySelectorAll('.flow-card');\n      cards.forEach((card, index) => {\n        gsap.fromTo(card,\n          {\n            y: 150,\n            opacity: 0,\n            scale: 0.8,\n            rotationY: -25,\n            z: -100\n          },\n          {\n            y: 0,\n            opacity: 1,\n            scale: 1,\n            rotationY: 0,\n            z: 0,\n            duration: 1.2,\n            ease: \"power3.out\",\n            delay: index * 0.15,\n            scrollTrigger: {\n              trigger: card,\n              start: \"top 85%\",\n              end: \"bottom 20%\",\n              toggleActions: \"play none none reverse\"\n            }\n          }\n        );\n\n        // Hover effects\n        card.addEventListener('mouseenter', () => {\n          gsap.to(card, {\n            scale: 1.05,\n            rotationY: 5,\n            z: 50,\n            duration: 0.3,\n            ease: \"power2.out\"\n          });\n        });\n\n        card.addEventListener('mouseleave', () => {\n          gsap.to(card, {\n            scale: 1,\n            rotationY: 0,\n            z: 0,\n            duration: 0.3,\n            ease: \"power2.out\"\n          });\n        });\n      });\n    };\n\n    // Flowing section transitions\n    const animateSections = () => {\n      const sections = document.querySelectorAll('.flow-section');\n      sections.forEach((section, index) => {\n        const direction = index % 2 === 0 ? -100 : 100;\n        \n        gsap.fromTo(section,\n          {\n            x: direction,\n            opacity: 0,\n            scale: 0.95,\n            rotation: direction > 0 ? 2 : -2\n          },\n          {\n            x: 0,\n            opacity: 1,\n            scale: 1,\n            rotation: 0,\n            duration: 1.5,\n            ease: \"power3.out\",\n            scrollTrigger: {\n              trigger: section,\n              start: \"top 70%\",\n              end: \"bottom 30%\",\n              toggleActions: \"play none none reverse\"\n            }\n          }\n        );\n      });\n    };\n\n    // Liquid hero animation\n    const animateHero = () => {\n      const hero = document.querySelector('.liquid-hero');\n      if (!hero) return;\n\n      gsap.fromTo('.hero-title', \n        {\n          y: 100,\n          opacity: 0,\n          scale: 0.8\n        },\n        {\n          y: 0,\n          opacity: 1,\n          scale: 1,\n          duration: 1.5,\n          ease: \"power3.out\",\n          delay: 0.3\n        }\n      );\n\n      gsap.fromTo('.hero-subtitle', \n        {\n          y: 80,\n          opacity: 0\n        },\n        {\n          y: 0,\n          opacity: 1,\n          duration: 1.2,\n          ease: \"power3.out\",\n          delay: 0.6\n        }\n      );\n\n      gsap.fromTo('.hero-cta', \n        {\n          y: 60,\n          opacity: 0,\n          scale: 0.9\n        },\n        {\n          y: 0,\n          opacity: 1,\n          scale: 1,\n          duration: 1,\n          ease: \"back.out(1.7)\",\n          delay: 0.9\n        }\n      );\n    };\n\n    // Parallax background elements\n    const animateParallax = () => {\n      const parallaxElements = document.querySelectorAll('.parallax-bg');\n      parallaxElements.forEach((element) => {\n        gsap.to(element, {\n          yPercent: -30,\n          ease: \"none\",\n          scrollTrigger: {\n            trigger: element.parentElement,\n            start: \"top bottom\",\n            end: \"bottom top\",\n            scrub: 1\n          }\n        });\n      });\n    };\n\n    // Floating particles animation\n    const animateParticles = () => {\n      const particles = document.querySelectorAll('.floating-particle');\n      particles.forEach((particle, index) => {\n        gsap.to(particle, {\n          y: \"random(-100, 100)\",\n          x: \"random(-50, 50)\",\n          rotation: \"random(-180, 180)\",\n          duration: \"random(8, 15)\",\n          ease: \"none\",\n          repeat: -1,\n          yoyo: true,\n          delay: index * 0.5\n        });\n      });\n    };\n\n    // Initialize all animations\n    setTimeout(() => {\n      animateText('.flow-text');\n      animateCards();\n      animateSections();\n      animateHero();\n      animateParallax();\n      animateParticles();\n    }, 100);\n\n    // Cleanup\n    return () => {\n      if (window.ScrollTrigger) {\n        window.ScrollTrigger.getAll().forEach((trigger: any) => trigger.kill());\n      }\n    };\n  }, []);\n}","size_bytes":5972},"client/src/hooks/use-lenis.tsx":{"content":"import { useEffect, useRef } from 'react';\n\ndeclare global {\n  interface Window {\n    Lenis: any;\n  }\n}\n\nexport function useLenis() {\n  const lenisRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.Lenis) {\n      lenisRef.current = new window.Lenis({\n        duration: 1.2,\n        easing: (t: number) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n        direction: 'vertical',\n        gestureDirection: 'vertical',\n        smooth: true,\n        mouseMultiplier: 1,\n        smoothTouch: false,\n        touchMultiplier: 2,\n        infinite: false,\n      });\n\n      const raf = (time: number) => {\n        lenisRef.current?.raf(time);\n        requestAnimationFrame(raf);\n      };\n      requestAnimationFrame(raf);\n\n      return () => {\n        lenisRef.current?.destroy();\n      };\n    }\n  }, []);\n\n  const scrollTo = (target: string | HTMLElement, options?: { offset?: number }) => {\n    if (lenisRef.current) {\n      lenisRef.current.scrollTo(target, options);\n    }\n  };\n\n  return { scrollTo };\n}\n","size_bytes":1042},"client/src/hooks/use-liquid-animations.tsx":{"content":"import { useEffect } from 'react';\n\ndeclare global {\n  interface Window {\n    gsap: any;\n    ScrollTrigger: any;\n  }\n}\n\nexport function useLiquidAnimations() {\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.gsap && window.ScrollTrigger) {\n      const gsap = window.gsap;\n      const ScrollTrigger = window.ScrollTrigger;\n      \n      gsap.registerPlugin(ScrollTrigger);\n\n      // Liquid morphing effects for sections\n      gsap.utils.toArray('.liquid-section').forEach((section: any) => {\n        gsap.fromTo(section, \n          { \n            scale: 0.8,\n            opacity: 0,\n            filter: 'blur(20px)',\n            rotationX: -15\n          },\n          { \n            scale: 1,\n            opacity: 1,\n            filter: 'blur(0px)',\n            rotationX: 0,\n            duration: 1.5,\n            ease: 'power2.out',\n            scrollTrigger: {\n              trigger: section,\n              start: 'top 85%',\n              end: 'bottom 15%',\n            }\n          }\n        );\n      });\n\n      // Flowing text animations\n      gsap.utils.toArray('.liquid-text').forEach((text: any) => {\n        const chars = text.textContent.split('');\n        text.innerHTML = chars.map((char: string) => `<span class=\"char\">${char}</span>`).join('');\n        \n        gsap.fromTo(text.querySelectorAll('.char'),\n          { \n            y: 100,\n            opacity: 0,\n            rotationX: -90\n          },\n          {\n            y: 0,\n            opacity: 1,\n            rotationX: 0,\n            duration: 0.8,\n            stagger: 0.03,\n            ease: 'back.out(1.7)',\n            scrollTrigger: {\n              trigger: text,\n              start: 'top 80%',\n            }\n          }\n        );\n      });\n\n      // Liquid cards with morphing effect\n      gsap.utils.toArray('.liquid-card').forEach((card: any, index: number) => {\n        gsap.fromTo(card,\n          {\n            scale: 0,\n            rotation: -180,\n            opacity: 0,\n            filter: 'hue-rotate(180deg)'\n          },\n          {\n            scale: 1,\n            rotation: 0,\n            opacity: 1,\n            filter: 'hue-rotate(0deg)',\n            duration: 1.2,\n            delay: index * 0.1,\n            ease: 'elastic.out(1, 0.8)',\n            scrollTrigger: {\n              trigger: card,\n              start: 'top 85%',\n            }\n          }\n        );\n      });\n\n      return () => {\n        ScrollTrigger.getAll().forEach((trigger: any) => trigger.kill());\n      };\n    }\n  }, []);\n}","size_bytes":2512},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-scroll-smoother.tsx":{"content":"import { useEffect } from 'react';\n\ndeclare global {\n  interface Window {\n    gsap: any;\n    ScrollTrigger: any;\n    ScrollSmoother: any;\n  }\n}\n\nexport function useScrollSmoother() {\n  useEffect(() => {\n    // Load ScrollSmoother plugin\n    const loadScrollSmoother = async () => {\n      if (typeof window !== 'undefined' && window.gsap) {\n        // Register ScrollTrigger and ScrollSmoother\n        const { gsap } = window;\n        \n        // Check if ScrollSmoother is available\n        if (window.ScrollSmoother) {\n          gsap.registerPlugin(window.ScrollTrigger, window.ScrollSmoother);\n          \n          // Create ScrollSmoother instance\n          const smoother = window.ScrollSmoother.create({\n            wrapper: \"#smooth-wrapper\",\n            content: \"#smooth-content\",\n            smooth: 2,\n            normalizeScroll: true,\n            ignoreMobileResize: true,\n            effects: true,\n            preventDefault: true,\n          });\n\n          // Enhanced scroll-triggered animations that work with ScrollSmoother\n          gsap.utils.toArray('.liquid-section').forEach((section: any, index: number) => {\n            // Scale and fade animation\n            gsap.fromTo(section, \n              { \n                scale: 0.8,\n                opacity: 0,\n                rotationX: -15,\n                filter: 'blur(10px)'\n              },\n              { \n                scale: 1,\n                opacity: 1,\n                rotationX: 0,\n                filter: 'blur(0px)',\n                duration: 1.5,\n                ease: 'power2.out',\n                scrollTrigger: {\n                  trigger: section,\n                  start: 'top 85%',\n                  end: 'bottom 15%',\n                  toggleActions: 'play none none reverse',\n                  refreshPriority: -1,\n                }\n              }\n            );\n\n            // Parallax effect for backgrounds\n            if (section.querySelector('.bg-parallax')) {\n              gsap.to(section.querySelector('.bg-parallax'), {\n                yPercent: -50,\n                ease: 'none',\n                scrollTrigger: {\n                  trigger: section,\n                  start: 'top bottom',\n                  end: 'bottom top',\n                  scrub: true,\n                }\n              });\n            }\n          });\n\n          // Liquid cards stagger animation\n          gsap.utils.toArray('.liquid-card').forEach((card: any, index: number) => {\n            gsap.fromTo(card,\n              {\n                y: 100,\n                opacity: 0,\n                scale: 0.8,\n                rotationY: -45\n              },\n              {\n                y: 0,\n                opacity: 1,\n                scale: 1,\n                rotationY: 0,\n                duration: 1,\n                delay: index * 0.1,\n                ease: 'back.out(1.7)',\n                scrollTrigger: {\n                  trigger: card,\n                  start: 'top 90%',\n                  toggleActions: 'play none none reverse',\n                }\n              }\n            );\n          });\n\n          // Text reveal animations\n          gsap.utils.toArray('.liquid-text').forEach((text: any) => {\n            const chars = text.textContent.split('');\n            text.innerHTML = chars.map((char: string) => \n              char === ' ' ? '&nbsp;' : `<span class=\"char\">${char}</span>`\n            ).join('');\n            \n            gsap.fromTo(text.querySelectorAll('.char'),\n              { \n                y: 100,\n                opacity: 0,\n                rotationX: -90\n              },\n              {\n                y: 0,\n                opacity: 1,\n                rotationX: 0,\n                duration: 0.6,\n                stagger: 0.02,\n                ease: 'back.out(2)',\n                scrollTrigger: {\n                  trigger: text,\n                  start: 'top 80%',\n                  toggleActions: 'play none none reverse',\n                }\n              }\n            );\n          });\n\n          // Navigation background animation\n          const nav = document.querySelector('.liquid-nav');\n          if (nav) {\n            gsap.to(nav, {\n              backgroundColor: 'rgba(15, 23, 42, 0.95)',\n              backdropFilter: 'blur(20px)',\n              borderBottom: '1px solid rgba(99, 102, 241, 0.2)',\n              scrollTrigger: {\n                trigger: 'body',\n                start: 'top -100',\n                end: 'bottom bottom',\n                toggleActions: 'play none none reverse',\n              }\n            });\n          }\n\n          return smoother;\n        }\n      }\n    };\n\n    const timer = setTimeout(loadScrollSmoother, 1000);\n    \n    return () => {\n      clearTimeout(timer);\n      if (window.ScrollTrigger) {\n        window.ScrollTrigger.getAll().forEach((trigger: any) => trigger.kill());\n      }\n    };\n  }, []);\n}","size_bytes":4867},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/sanity.ts":{"content":"import { createClient } from '@sanity/client';\nimport imageUrlBuilder from '@sanity/image-url';\n\n// Sanity client configuration\nexport const sanityClient = createClient({\n  projectId: import.meta.env.VITE_SANITY_PROJECT_ID || 'demo-project',\n  dataset: import.meta.env.VITE_SANITY_DATASET || 'production',\n  useCdn: true,\n  apiVersion: '2023-05-03',\n  token: import.meta.env.VITE_SANITY_TOKEN,\n});\n\n// Image URL builder\nconst builder = imageUrlBuilder(sanityClient);\n\nexport function urlFor(source: any) {\n  return builder.image(source);\n}\n\n// Types for Sanity content\nexport interface SanityImage {\n  _type: 'image';\n  asset: {\n    _ref: string;\n    _type: 'reference';\n  };\n  alt?: string;\n}\n\nexport interface HeroContent {\n  _id: string;\n  title: string;\n  subtitle: string;\n  ctaText: string;\n  backgroundImage?: SanityImage;\n}\n\nexport interface ServiceContent {\n  _id: string;\n  title: string;\n  description: string;\n  icon: string;\n  gradient: string;\n}\n\n// Sanity queries\nexport const heroQuery = `*[_type == \"hero\"][0]{\n  _id,\n  title,\n  subtitle,\n  ctaText,\n  backgroundImage\n}`;\n\nexport const servicesQuery = `*[_type == \"service\"] | order(_createdAt asc){\n  _id,\n  title,\n  description,\n  icon,\n  gradient\n}`;\n\n// Fetch functions with fallback data (disabled API calls to prevent CORS errors)\nexport async function getHeroContent(): Promise<HeroContent> {\n  // Return fallback content directly to avoid CORS issues\n  return {\n    _id: 'fallback',\n    title: 'Digital Innovation Flows Through Everything',\n    subtitle: 'Experience the future of fintech with liquid-smooth interactions and revolutionary digital solutions',\n    ctaText: 'Experience the Flow',\n  };\n}\n\nexport async function getServicesContent(): Promise<ServiceContent[]> {\n  // Return fallback content directly to avoid CORS issues  \n  return [\n    {\n      _id: '1',\n      title: 'Quantum Payments',\n      description: 'Lightning-fast payment processing with quantum-encrypted security and real-time global settlement.',\n      icon: 'CreditCard',\n      gradient: 'from-indigo-500 to-purple-600'\n    },\n    {\n      _id: '2',\n      title: 'Neural Security',\n      description: 'AI-powered threat detection with blockchain immutability and quantum-resistant encryption.',\n      icon: 'Shield',\n      gradient: 'from-cyan-500 to-blue-600'\n    },\n    {\n      _id: '3',\n      title: 'Liquid Analytics',\n      description: 'Real-time insights that flow seamlessly through predictive AI and interactive visualizations.',\n      icon: 'TrendingUp',\n      gradient: 'from-purple-500 to-pink-600'\n    }\n  ];\n}","size_bytes":2574},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { Navigation } from '@/components/navigation';\nimport { useParticleBurst } from '@/components/particle-burst';\nimport { EnhancedSectionBackgrounds } from '@/components/enhanced-section-backgrounds';\nimport { GSAPScrollSmootherWrapper } from '@/components/gsap-scroll-smoother-wrapper';\nimport { useGSAPInit } from '@/hooks/use-gsap-init';\nimport { useGSAPScrollSmoother } from '@/hooks/use-gsap-scroll-smoother';\n\nexport default function Home() {\n  const { burst, triggerBurst } = useParticleBurst();\n  \n  // Initialize GSAP plugins\n  useGSAPInit();\n  useGSAPScrollSmoother();\n\n  const handleClick = (e: React.MouseEvent) => {\n    triggerBurst(e.clientX, e.clientY);\n  };\n\n  return (\n    <div id=\"smooth-wrapper\" className=\"min-h-screen bg-slate-950\">\n      <EnhancedSectionBackgrounds />\n      <Navigation />\n      \n      <main id=\"smooth-content\" className=\"container mx-auto px-4\" onClick={handleClick}>\n        {/* Hero Section */}\n        <section id=\"hero\" className=\"liquid-section min-h-screen flex items-center relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-slate-950 via-slate-900 to-purple-950 bg-parallax\"></div>\n          <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(120,119,198,0.1),transparent_70%)]\"></div>\n          \n          <div className=\"w-full relative z-10\">\n            <div className=\"max-w-7xl mx-auto px-8\">\n              <div className=\"text-center\">\n                <div className=\"mb-6 fade-in\">\n                  <span className=\"inline-block px-6 py-3 bg-gradient-to-r from-purple-500/20 to-blue-500/20 rounded-full border border-purple-500/30 text-purple-300 text-sm font-semibold tracking-wide\">\n                    Next-Generation Payment Platform\n                  </span>\n                </div>\n                \n                <h1 className=\"text-6xl md:text-8xl font-bold mb-8 text-white leading-tight slide-in-up\">\n                  <span className=\"bg-gradient-to-r from-purple-400 via-pink-400 to-cyan-400 bg-clip-text text-transparent\">\n                    One App for\n                  </span>\n                  <br />\n                  <span className=\"bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                    All Your Payments\n                  </span>\n                </h1>\n                \n                <p className=\"text-2xl text-gray-300 mb-12 leading-relaxed max-w-4xl mx-auto font-light fade-in\">\n                  Experience the future of digital payments with our unified platform. \n                  Send, receive, and manage all your transactions from a single, secure account.\n                </p>\n                \n                <div className=\"flex flex-col sm:flex-row gap-6 justify-center mb-16 scale-in\">\n                  <button className=\"group bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 px-12 py-6 rounded-2xl font-bold text-xl text-white transition-all duration-500 transform hover:scale-105 shadow-2xl relative overflow-hidden\">\n                    <span className=\"relative z-10\">Get Started Free</span>\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-pink-600 to-purple-600 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                  </button>\n                  <button className=\"group bg-transparent border-2 border-cyan-400/60 hover:border-cyan-400 px-12 py-6 rounded-2xl font-bold text-xl text-cyan-400 hover:text-white transition-all duration-300 transform hover:scale-105 hover:bg-cyan-400/10 backdrop-blur-sm\">\n                    <span className=\"flex items-center gap-3\">\n                      <span>Watch Demo</span>\n                      <span className=\"text-2xl group-hover:translate-x-1 transition-transform\">‚ñ∂</span>\n                    </span>\n                  </button>\n                </div>\n                \n                {/* Feature Stats */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 max-w-5xl mx-auto stats-grid\">\n                  <div className=\"text-center group cursor-pointer liquid-stat\">\n                    <div className=\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent mb-2 group-hover:scale-110 transition-transform\">\n                      200M+\n                    </div>\n                    <div className=\"text-gray-400 text-sm font-medium\">Active Users</div>\n                  </div>\n                  <div className=\"text-center group cursor-pointer liquid-stat\">\n                    <div className=\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent mb-2 group-hover:scale-110 transition-transform\">\n                      150+\n                    </div>\n                    <div className=\"text-gray-400 text-sm font-medium\">Countries</div>\n                  </div>\n                  <div className=\"text-center group cursor-pointer liquid-stat\">\n                    <div className=\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-green-400 to-emerald-400 bg-clip-text text-transparent mb-2 group-hover:scale-110 transition-transform\">\n                      99.9%\n                    </div>\n                    <div className=\"text-gray-400 text-sm font-medium\">Uptime</div>\n                  </div>\n                  <div className=\"text-center group cursor-pointer liquid-stat\">\n                    <div className=\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-orange-400 to-red-400 bg-clip-text text-transparent mb-2 group-hover:scale-110 transition-transform\">\n                      $1B+\n                    </div>\n                    <div className=\"text-gray-400 text-sm font-medium\">Processed Daily</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Features Section */}\n        <section id=\"features\" className=\"liquid-section py-32 relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-purple-950/20 to-transparent bg-parallax\"></div>\n          \n          <div className=\"max-w-7xl mx-auto px-8 relative z-10\">\n            <div className=\"text-center mb-20 fade-in\">\n              <h2 className=\"text-5xl md:text-6xl font-bold mb-6 text-white slide-in-up\">\n                <span className=\"bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent\">\n                  Everything You Need\n                </span>\n              </h2>\n              <p className=\"text-xl text-gray-300 max-w-3xl mx-auto font-light fade-in\">\n                Revolutionary financial technology that transforms how you manage money. \n                From instant transfers to AI-powered insights, experience the future of finance.\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 features-grid\">\n              <div className=\"liquid-card group relative bg-gradient-to-br from-slate-800/50 to-slate-900/50 p-8 rounded-3xl border border-purple-500/20 hover:border-purple-500/40 backdrop-blur-sm transition-all duration-500 hover:transform hover:scale-105\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/5 to-transparent rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mb-6 group-hover:rotate-6 transition-transform duration-500\">\n                    <span className=\"text-2xl\">üí≥</span>\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-white mb-4\">Digital Wallet</h3>\n                  <p className=\"text-gray-300 leading-relaxed mb-4\">\n                    Store multiple currencies, cryptocurrencies, and payment methods in one secure digital wallet. Support for 50+ fiat currencies and major cryptocurrencies.\n                  </p>\n                  <ul className=\"text-sm text-gray-400 space-y-2\">\n                    <li>‚Ä¢ Multi-currency support (USD, EUR, GBP, BTC, ETH)</li>\n                    <li>‚Ä¢ Real-time exchange rates</li>\n                    <li>‚Ä¢ Instant currency conversion</li>\n                    <li>‚Ä¢ Cold storage security</li>\n                  </ul>\n                </div>\n              </div>\n              \n              <div className=\"liquid-card group relative bg-gradient-to-br from-slate-800/50 to-slate-900/50 p-8 rounded-3xl border border-cyan-500/20 hover:border-cyan-500/40 backdrop-blur-sm transition-all duration-500 hover:transform hover:scale-105\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/5 to-transparent rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-500 to-blue-500 rounded-2xl flex items-center justify-center mb-6 group-hover:rotate-6 transition-transform duration-500\">\n                    <span className=\"text-2xl\">‚ö°</span>\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-white mb-4\">Instant Transfers</h3>\n                  <p className=\"text-gray-300 leading-relaxed mb-4\">\n                    Send money instantly to anyone, anywhere in the world with our lightning-fast transfer network. Average transaction time: 3.2 seconds globally.\n                  </p>\n                  <ul className=\"text-sm text-gray-400 space-y-2\">\n                    <li>‚Ä¢ Sub-5 second processing worldwide</li>\n                    <li>‚Ä¢ 24/7/365 availability</li>\n                    <li>‚Ä¢ Low fees (0.1% - 0.5%)</li>\n                    <li>‚Ä¢ Real-time transaction tracking</li>\n                  </ul>\n                </div>\n              </div>\n              \n              <div className=\"liquid-card group relative bg-gradient-to-br from-slate-800/50 to-slate-900/50 p-8 rounded-3xl border border-green-500/20 hover:border-green-500/40 backdrop-blur-sm transition-all duration-500 hover:transform hover:scale-105\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/5 to-transparent rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-500 rounded-2xl flex items-center justify-center mb-6 group-hover:rotate-6 transition-transform duration-500\">\n                    <span className=\"text-2xl\">üîí</span>\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-white mb-4\">Bank-Level Security</h3>\n                  <p className=\"text-gray-300 leading-relaxed mb-4\">\n                    Military-grade encryption, biometric authentication, and AI-powered fraud detection. Your security is our top priority with 99.99% uptime guarantee.\n                  </p>\n                  <ul className=\"text-sm text-gray-400 space-y-2\">\n                    <li>‚Ä¢ AES-256 encryption standard</li>\n                    <li>‚Ä¢ Biometric login (Face ID, Touch ID)</li>\n                    <li>‚Ä¢ AI fraud detection system</li>\n                    <li>‚Ä¢ Insurance coverage up to $1M</li>\n                  </ul>\n                </div>\n              </div>\n              \n              <div className=\"liquid-card group relative bg-gradient-to-br from-slate-800/50 to-slate-900/50 p-8 rounded-3xl border border-orange-500/20 hover:border-orange-500/40 backdrop-blur-sm transition-all duration-500 hover:transform hover:scale-105\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-orange-500/5 to-transparent rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-orange-500 to-red-500 rounded-2xl flex items-center justify-center mb-6 group-hover:rotate-6 transition-transform duration-500\">\n                    <span className=\"text-2xl\">üìä</span>\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-white mb-4\">Smart Analytics</h3>\n                  <p className=\"text-gray-300 leading-relaxed mb-4\">\n                    AI-powered spending insights, predictive budgeting, and personalized financial recommendations. Make data-driven financial decisions with confidence.\n                  </p>\n                  <ul className=\"text-sm text-gray-400 space-y-2\">\n                    <li>‚Ä¢ Automated expense categorization</li>\n                    <li>‚Ä¢ Predictive spending alerts</li>\n                    <li>‚Ä¢ Investment opportunity insights</li>\n                    <li>‚Ä¢ Custom financial goal tracking</li>\n                  </ul>\n                </div>\n              </div>\n              \n              <div className=\"liquid-card group relative bg-gradient-to-br from-slate-800/50 to-slate-900/50 p-8 rounded-3xl border border-pink-500/20 hover:border-pink-500/40 backdrop-blur-sm transition-all duration-500 hover:transform hover:scale-105\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-pink-500/5 to-transparent rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-pink-500 to-purple-500 rounded-2xl flex items-center justify-center mb-6 group-hover:rotate-6 transition-transform duration-500\">\n                    <span className=\"text-2xl\">üåê</span>\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-white mb-4\">Global Payments</h3>\n                  <p className=\"text-gray-300 leading-relaxed mb-4\">\n                    Seamlessly pay merchants, online services, and friends across 150+ countries. Best-in-class exchange rates and minimal fees.\n                  </p>\n                  <ul className=\"text-sm text-gray-400 space-y-2\">\n                    <li>‚Ä¢ 150+ countries supported</li>\n                    <li>‚Ä¢ Real-time currency conversion</li>\n                    <li>‚Ä¢ Merchant integration APIs</li>\n                    <li>‚Ä¢ QR code payments</li>\n                  </ul>\n                </div>\n              </div>\n              \n              <div className=\"liquid-card group relative bg-gradient-to-br from-slate-800/50 to-slate-900/50 p-8 rounded-3xl border border-blue-500/20 hover:border-blue-500/40 backdrop-blur-sm transition-all duration-500 hover:transform hover:scale-105\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/5 to-transparent rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-2xl flex items-center justify-center mb-6 group-hover:rotate-6 transition-transform duration-500\">\n                    <span className=\"text-2xl\">üì±</span>\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-white mb-4\">Mobile First</h3>\n                  <p className=\"text-gray-300 leading-relaxed mb-4\">\n                    Award-winning mobile apps with intuitive design. Rated #1 FinTech app with 4.9/5 stars across app stores worldwide.\n                  </p>\n                  <ul className=\"text-sm text-gray-400 space-y-2\">\n                    <li>‚Ä¢ iOS & Android native apps</li>\n                    <li>‚Ä¢ Offline transaction capability</li>\n                    <li>‚Ä¢ Apple Pay & Google Pay integration</li>\n                    <li>‚Ä¢ 4.9/5 star rating globally</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* How It Works Section */}\n        <section id=\"how-it-works\" className=\"liquid-section py-32 relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-slate-950 via-indigo-950/30 to-slate-950 bg-parallax\"></div>\n          \n          <div className=\"max-w-7xl mx-auto px-8 relative z-10\">\n            <div className=\"text-center mb-20 fade-in\">\n              <h2 className=\"text-5xl md:text-6xl font-bold mb-6 text-white slide-in-up\">\n                <span className=\"bg-gradient-to-r from-indigo-400 to-cyan-400 bg-clip-text text-transparent\">\n                  How It Works\n                </span>\n              </h2>\n              <p className=\"text-xl text-gray-300 max-w-3xl mx-auto font-light fade-in\">\n                Get started in minutes with our simple, secure onboarding process. Experience financial freedom in three easy steps.\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-12 mb-20\">\n              <div className=\"text-center liquid-card scale-in\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-indigo-500/20 to-blue-500/20 rounded-full border-2 border-indigo-500/30 flex items-center justify-center mx-auto mb-6\">\n                  <span className=\"text-3xl font-bold text-indigo-400\">1</span>\n                </div>\n                <h3 className=\"text-2xl font-bold text-white mb-4\">Sign Up</h3>\n                <p className=\"text-gray-300 leading-relaxed mb-4\">\n                  Create your account in under 2 minutes. Verify your identity with government-issued ID for maximum security.\n                </p>\n                <div className=\"text-sm text-gray-400 space-y-2\">\n                  <div>‚Ä¢ Email & phone verification</div>\n                  <div>‚Ä¢ ID document upload</div>\n                  <div>‚Ä¢ Biometric setup</div>\n                </div>\n              </div>\n\n              <div className=\"text-center liquid-card scale-in\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-full border-2 border-purple-500/30 flex items-center justify-center mx-auto mb-6\">\n                  <span className=\"text-3xl font-bold text-purple-400\">2</span>\n                </div>\n                <h3 className=\"text-2xl font-bold text-white mb-4\">Fund Your Wallet</h3>\n                <p className=\"text-gray-300 leading-relaxed mb-4\">\n                  Add money instantly from your bank account, card, or crypto wallet. Multiple funding options available worldwide.\n                </p>\n                <div className=\"text-sm text-gray-400 space-y-2\">\n                  <div>‚Ä¢ Bank transfer (ACH, SEPA)</div>\n                  <div>‚Ä¢ Debit/Credit cards</div>\n                  <div>‚Ä¢ Cryptocurrency deposits</div>\n                </div>\n              </div>\n\n              <div className=\"text-center liquid-card scale-in\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-green-500/20 to-emerald-500/20 rounded-full border-2 border-green-500/30 flex items-center justify-center mx-auto mb-6\">\n                  <span className=\"text-3xl font-bold text-green-400\">3</span>\n                </div>\n                <h3 className=\"text-2xl font-bold text-white mb-4\">Start Transacting</h3>\n                <p className=\"text-gray-300 leading-relaxed mb-4\">\n                  Send, receive, and manage your money globally. Pay friends, merchants, or invest in your financial future.\n                </p>\n                <div className=\"text-sm text-gray-400 space-y-2\">\n                  <div>‚Ä¢ Instant global transfers</div>\n                  <div>‚Ä¢ Merchant payments</div>\n                  <div>‚Ä¢ Investment opportunities</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Trust Section */}\n        <section id=\"trust\" className=\"liquid-section py-32 relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-slate-950 via-purple-950/30 to-slate-950 bg-parallax\"></div>\n          <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_30%_50%,rgba(59,130,246,0.1),transparent_50%)] parallax-slow\"></div>\n          <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_70%_50%,rgba(168,85,247,0.1),transparent_50%)] parallax-fast\"></div>\n          \n          <div className=\"max-w-7xl mx-auto px-8 relative z-10\">\n            <div className=\"text-center mb-20 fade-in\">\n              <h2 className=\"text-5xl md:text-6xl font-bold mb-6 text-white slide-in-up\">\n                <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                  Trusted Worldwide\n                </span>\n              </h2>\n              <p className=\"text-xl text-gray-300 max-w-3xl mx-auto font-light fade-in\">\n                Join 200 million+ users who trust Jeton with their financial future. Regulated and compliant in 150+ countries.\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-12 mb-20 trust-features\">\n              <div className=\"text-center group cursor-pointer liquid-feature scale-in\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-full border border-blue-500/30 flex items-center justify-center mx-auto mb-6 group-hover:scale-110 group-hover:border-blue-400/50 transition-all duration-300\">\n                  <span className=\"text-3xl\">‚ö°</span>\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-2\">Instant Processing</h3>\n                <p className=\"text-gray-400 text-sm mb-3\">Transactions processed in seconds, not hours</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>Average: 3.2 seconds globally</div>\n                  <div>Peak volume: 10M transactions/day</div>\n                </div>\n              </div>\n              \n              <div className=\"text-center group cursor-pointer liquid-feature scale-in\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-green-500/20 to-emerald-500/20 rounded-full border border-green-500/30 flex items-center justify-center mx-auto mb-6 group-hover:scale-110 group-hover:border-green-400/50 transition-all duration-300\">\n                  <span className=\"text-3xl\">üîí</span>\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-2\">Military Grade Security</h3>\n                <p className=\"text-gray-400 text-sm mb-3\">End-to-end encryption and biometric protection</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>Zero security breaches in 8 years</div>\n                  <div>SOC 2 Type II certified</div>\n                </div>\n              </div>\n              \n              <div className=\"text-center group cursor-pointer liquid-feature scale-in\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-full border border-purple-500/30 flex items-center justify-center mx-auto mb-6 group-hover:scale-110 group-hover:border-purple-400/50 transition-all duration-300\">\n                  <span className=\"text-3xl\">üí∞</span>\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-2\">Lowest Fees</h3>\n                <p className=\"text-gray-400 text-sm mb-3\">Transparent pricing with no hidden charges</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>Domestic: 0.1% | International: 0.5%</div>\n                  <div>Free P2P transfers under $1000</div>\n                </div>\n              </div>\n              \n              <div className=\"text-center group cursor-pointer liquid-feature scale-in\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-orange-500/20 to-red-500/20 rounded-full border border-orange-500/30 flex items-center justify-center mx-auto mb-6 group-hover:scale-110 group-hover:border-orange-400/50 transition-all duration-300\">\n                  <span className=\"text-3xl\">üåê</span>\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-2\">Global Reach</h3>\n                <p className=\"text-gray-400 text-sm mb-3\">Available in 150+ countries worldwide</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>Licensed in US, EU, UK, Asia-Pacific</div>\n                  <div>24/7 multilingual support</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Call to Action */}\n            <div className=\"text-center\">\n              <div className=\"bg-gradient-to-r from-slate-800/50 to-slate-900/50 backdrop-blur-sm rounded-3xl border border-purple-500/20 p-12 max-w-4xl mx-auto\">\n                <h3 className=\"text-4xl md:text-5xl font-bold mb-6 text-white\">\n                  Ready to Transform Your <span className=\"bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent\">Financial Life?</span>\n                </h3>\n                <p className=\"text-xl text-gray-300 mb-8 font-light\">\n                  Join millions who have already made the switch to seamless digital payments.\n                </p>\n                <button className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 px-12 py-6 rounded-2xl font-bold text-xl text-white transition-all duration-500 transform hover:scale-105 shadow-2xl\">\n                  Start Your Journey Today\n                </button>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Footer Section */}\n        <section id=\"footer\" className=\"liquid-section py-20 bg-gradient-to-t from-black to-slate-950 relative\">\n          <div className=\"max-w-7xl mx-auto px-8\">\n            <div className=\"text-center mb-16 fade-in\">\n              <div className=\"text-6xl md:text-8xl font-black mb-6 slide-in-up\">\n                <span className=\"bg-gradient-to-r from-purple-400 via-pink-400 to-cyan-400 bg-clip-text text-transparent\">\n                  JETON\n                </span>\n              </div>\n              <p className=\"text-xl text-gray-400 mb-8 fade-in\">\n                The future of payments is here. Simple, secure, and designed for everyone.\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-6 justify-center mb-12 scale-in\">\n                <button className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 px-8 py-4 rounded-2xl font-bold text-white transition-all duration-300 transform hover:scale-105 liquid-button\">\n                  Download App\n                </button>\n                <button className=\"bg-transparent border-2 border-cyan-400/60 hover:border-cyan-400 px-8 py-4 rounded-2xl font-bold text-cyan-400 hover:text-white transition-all duration-300 transform hover:scale-105 hover:bg-cyan-400/10 liquid-button\">\n                  Learn More\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 text-center text-gray-400 footer-grid\">\n              <div className=\"liquid-footer-item slide-in-left\">\n                <h4 className=\"text-white font-bold mb-4\">Product</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Digital Wallet</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Instant Transfers</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Global Payments</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Business Solutions</div>\n                </div>\n              </div>\n              \n              <div className=\"liquid-footer-item fade-in\">\n                <h4 className=\"text-white font-bold mb-4\">Company</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">About Us</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Careers</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Press</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Partners</div>\n                </div>\n              </div>\n              \n              <div className=\"liquid-footer-item fade-in\">\n                <h4 className=\"text-white font-bold mb-4\">Support</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Help Center</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Contact</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Security</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Status</div>\n                </div>\n              </div>\n              \n              <div className=\"liquid-footer-item slide-in-right\">\n                <h4 className=\"text-white font-bold mb-4\">Legal</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Privacy</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Terms</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Compliance</div>\n                  <div className=\"hover:text-purple-400 cursor-pointer transition-colors\">Licenses</div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"border-t border-slate-800 mt-16 pt-8 text-center text-gray-500 fade-in\">\n              <p>&copy; 2024 Jeton. All rights reserved. Making payments simple, secure, and accessible worldwide.</p>\n            </div>\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}","size_bytes":30367},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/cli-terminal-background.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\nconst securityCommands = [\n  {\n    command: \"nmap -sS -A target.domain.com\",\n    output: [\n      \"Starting Nmap 7.92 ( https://nmap.org )\",\n      \"Nmap scan report for target.domain.com (192.168.1.100)\",\n      \"Host is up (0.0012s latency).\",\n      \"PORT     STATE SERVICE VERSION\",\n      \"22/tcp   open  ssh     OpenSSH 8.2p1\",\n      \"80/tcp   open  http    Apache httpd 2.4.41\",\n      \"443/tcp  open  https   Apache httpd 2.4.41\",\n      \"Nmap done: 1 IP address (1 host up) scanned in 2.43 seconds\"\n    ]\n  },\n  {\n    command: \"wireshark -i eth0 -f 'port 443'\",\n    output: [\n      \"Capturing on 'Ethernet'\",\n      \"TLS packets detected: 1,247\",\n      \"Suspicious certificate found: CN=malicious.cert\",\n      \"‚ö†Ô∏è  ALERT: Potential man-in-the-middle attack\",\n      \"Blocking connection to 192.168.1.255\"\n    ]\n  },\n  {\n    command: \"python3 threat_detector.py --realtime\",\n    output: [\n      \"üîç Initializing AI threat detection engine...\",\n      \"‚úÖ Neural network model loaded (accuracy: 97.3%)\",\n      \"üåê Monitoring network traffic on all interfaces\",\n      \"üìä Processing 15,247 packets/second\",\n      \"üö® Detected: SQL injection attempt from 203.0.113.45\",\n      \"üõ°Ô∏è  Auto-blocked malicious IP in firewall\"\n    ]\n  },\n  {\n    command: \"metasploit-framework\",\n    output: [\n      \"      =[ metasploit v6.2.9-dev                          ]\",\n      \"+ -- --=[ 2230 exploits - 1177 auxiliary - 398 post       ]\",\n      \"+ -- --=[ 867 payloads - 45 encoders - 11 nops            ]\",\n      \"+ -- --=[ 9 evasion                                       ]\",\n      \"\",\n      \"msf6 > use auxiliary/scanner/portscan/syn\",\n      \"msf6 auxiliary(syn) > set RHOSTS 192.168.1.0/24\",\n      \"msf6 auxiliary(syn) > run\",\n      \"[*] Scanning 192.168.1.0/24...\"\n    ]\n  },\n  {\n    command: \"hashcat -a 0 -m 1000 hashes.txt rockyou.txt\",\n    output: [\n      \"hashcat (v6.2.5) starting...\",\n      \"OpenCL API (OpenCL 3.0 CUDA 11.8.89) - Platform #1\",\n      \"* Device #1: NVIDIA GeForce RTX 4080, 16256/16383 MB\",\n      \"\",\n      \"Cracking passwords...\",\n      \"5d41402abc4b2a76b9719d911017c592:hello\",\n      \"098f6bcd4621d373cade4e832627b4f6:test123\",\n      \"Status.......: Running\",\n      \"Speed.#1.....: 15847.2 MH/s (285ms)\"\n    ]\n  },\n  {\n    command: \"sudo fail2ban-client status\",\n    output: [\n      \"Status\",\n      \"|- Number of jail:      3\",\n      \"|- Jail list:   apache-auth, ssh, nginx-limit-req\",\n      \"\",\n      \"Status for the jail: ssh\",\n      \"|- Filter\",\n      \"|  |- Currently failed: 12\",\n      \"|  |- Total failed:     8,247\",\n      \"|  `- File list:        /var/log/auth.log\",\n      \"|- Actions\",\n      \"|  |- Currently banned: 45\",\n      \"|  `- Total banned:     1,832\"\n    ]\n  }\n];\n\ninterface Terminal {\n  id: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  currentCommandIndex: number;\n  currentOutputIndex: number;\n  isTyping: boolean;\n  typedText: string;\n  lastUpdate: number;\n}\n\nexport function CLITerminalBackground() {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [terminals, setTerminals] = useState<Terminal[]>([]);\n\n  useEffect(() => {\n    // Initialize terminals\n    const initializeTerminals = () => {\n      const newTerminals: Terminal[] = [\n        {\n          id: 'terminal-1',\n          x: 5,\n          y: 10,\n          width: 500,\n          height: 300,\n          currentCommandIndex: 0,\n          currentOutputIndex: 0,\n          isTyping: false,\n          typedText: '',\n          lastUpdate: Date.now()\n        },\n        {\n          id: 'terminal-2',\n          x: 60,\n          y: 40,\n          width: 450,\n          height: 250,\n          currentCommandIndex: 1,\n          currentOutputIndex: 0,\n          isTyping: false,\n          typedText: '',\n          lastUpdate: Date.now()\n        },\n        {\n          id: 'terminal-3',\n          x: 25,\n          y: 65,\n          width: 480,\n          height: 280,\n          currentCommandIndex: 2,\n          currentOutputIndex: 0,\n          isTyping: false,\n          typedText: '',\n          lastUpdate: Date.now()\n        }\n      ];\n      setTerminals(newTerminals);\n    };\n\n    initializeTerminals();\n\n    // Typing animation\n    const animateTyping = () => {\n      setTerminals(prev => prev.map(terminal => {\n        const now = Date.now();\n        const currentCommand = securityCommands[terminal.currentCommandIndex];\n        \n        if (!terminal.isTyping && now - terminal.lastUpdate > 2000) {\n          // Start typing new command\n          return {\n            ...terminal,\n            isTyping: true,\n            typedText: '',\n            lastUpdate: now\n          };\n        }\n        \n        if (terminal.isTyping && now - terminal.lastUpdate > 50) {\n          const targetText = `$ ${currentCommand.command}`;\n          \n          if (terminal.typedText.length < targetText.length) {\n            // Continue typing command\n            return {\n              ...terminal,\n              typedText: targetText.slice(0, terminal.typedText.length + 1),\n              lastUpdate: now\n            };\n          } else {\n            // Command finished, show output\n            return {\n              ...terminal,\n              isTyping: false,\n              currentCommandIndex: (terminal.currentCommandIndex + 1) % securityCommands.length,\n              lastUpdate: now\n            };\n          }\n        }\n        \n        return terminal;\n      }));\n    };\n\n    const interval = setInterval(animateTyping, 50);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div ref={containerRef} className=\"fixed inset-0 pointer-events-none overflow-hidden\">\n      {/* Dark background with grid */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-950 via-gray-900 to-slate-950\">\n        <div \n          className=\"absolute inset-0 opacity-10\"\n          style={{\n            backgroundImage: `\n              linear-gradient(rgba(34, 197, 94, 0.1) 1px, transparent 1px),\n              linear-gradient(90deg, rgba(34, 197, 94, 0.1) 1px, transparent 1px)\n            `,\n            backgroundSize: '40px 40px'\n          }}\n        />\n      </div>\n\n      {/* System stats overlay */}\n      <div className=\"absolute top-4 right-4 bg-black/80 backdrop-blur-md rounded-lg border border-green-500/30 p-4 font-mono text-xs\">\n        <div className=\"text-green-400 mb-2 flex items-center gap-2\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n          Security Operations Center\n        </div>\n        <div className=\"space-y-1 text-gray-300\">\n          <div className=\"flex justify-between\">\n            <span>Active Scans:</span>\n            <span className=\"text-cyan-400\">17</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Threats Blocked:</span>\n            <span className=\"text-red-400\">1,247</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>CPU Usage:</span>\n            <span className=\"text-yellow-400\">34%</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Memory:</span>\n            <span className=\"text-green-400\">8.2/32 GB</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Multiple terminal windows */}\n      {terminals.map((terminal, index) => (\n        <div\n          key={terminal.id}\n          className=\"absolute bg-black/90 backdrop-blur-md rounded-lg border border-green-500/30 overflow-hidden\"\n          style={{\n            left: `${terminal.x}%`,\n            top: `${terminal.y}%`,\n            width: `${Math.min(terminal.width, window.innerWidth * 0.4)}px`,\n            height: `${Math.min(terminal.height, window.innerHeight * 0.3)}px`,\n            zIndex: 10 + index,\n            transform: `scale(${0.8 + index * 0.1}) rotate(${(index - 1) * 2}deg)`\n          }}\n        >\n          {/* Terminal header */}\n          <div className=\"bg-green-500/20 px-4 py-2 border-b border-green-500/30 flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full\" />\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full\" />\n            <div className=\"w-3 h-3 bg-green-500 rounded-full\" />\n            <span className=\"ml-2 text-green-400 text-sm font-mono\">\n              security-tools-{index + 1}\n            </span>\n          </div>\n          \n          {/* Terminal content */}\n          <div className=\"p-4 h-full overflow-auto\">\n            <div className=\"text-green-400 font-mono text-xs leading-relaxed\">\n              {/* Previous commands history */}\n              {securityCommands.slice(0, terminal.currentCommandIndex).map((cmd, cmdIndex) => (\n                <div key={cmdIndex} className=\"mb-4\">\n                  <div className=\"text-green-300\">$ {cmd.command}</div>\n                  {cmd.output.map((line, lineIndex) => (\n                    <div \n                      key={lineIndex} \n                      className={`ml-2 ${\n                        line.includes('ALERT') || line.includes('üö®') ? 'text-red-400' :\n                        line.includes('‚úÖ') || line.includes('üõ°Ô∏è') ? 'text-green-400' :\n                        line.includes('‚ö†Ô∏è') ? 'text-yellow-400' :\n                        'text-gray-300'\n                      }`}\n                    >\n                      {line}\n                    </div>\n                  ))}\n                </div>\n              ))}\n              \n              {/* Current typing command */}\n              <div className=\"flex items-center\">\n                <span>{terminal.typedText}</span>\n                <span className=\"animate-pulse ml-1\">‚ñà</span>\n              </div>\n              \n              {/* Show current command output if finished typing */}\n              {!terminal.isTyping && terminal.typedText && (\n                <div className=\"mt-2\">\n                  {securityCommands[terminal.currentCommandIndex === 0 ? \n                    securityCommands.length - 1 : \n                    terminal.currentCommandIndex - 1\n                  ].output.map((line, lineIndex) => (\n                    <div \n                      key={lineIndex}\n                      className={`ml-2 ${\n                        line.includes('ALERT') || line.includes('üö®') ? 'text-red-400' :\n                        line.includes('‚úÖ') || line.includes('üõ°Ô∏è') ? 'text-green-400' :\n                        line.includes('‚ö†Ô∏è') ? 'text-yellow-400' :\n                        'text-gray-300'\n                      }`}\n                      style={{ \n                        animationDelay: `${lineIndex * 0.1}s`,\n                        opacity: 0,\n                        animation: `fadeIn 0.5s ease-in-out ${lineIndex * 0.1}s forwards`\n                      }}\n                    >\n                      {line}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      ))}\n\n      {/* Floating security indicators */}\n      <div className=\"absolute bottom-8 left-8 right-8 flex justify-between items-center pointer-events-none\">\n        {['FIREWALL: ACTIVE', 'IDS: MONITORING', 'AV: SCANNING', 'VPN: CONNECTED'].map((status, index) => (\n          <div \n            key={index}\n            className=\"bg-black/60 backdrop-blur-sm rounded-full px-4 py-2 border border-green-500/30\"\n          >\n            <div className=\"flex items-center gap-2 text-xs font-mono\">\n              <div \n                className=\"w-2 h-2 rounded-full animate-pulse\"\n                style={{\n                  backgroundColor: index === 1 ? '#22c55e' : '#10b981',\n                  animationDelay: `${index * 0.5}s`\n                }}\n              />\n              <span className=\"text-green-400\">{status}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* CSS animations */}\n      <style>\n        {`\n        @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(10px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n        `}\n      </style>\n    </div>\n  );\n}","size_bytes":12113},"client/src/components/enhanced-section-backgrounds.tsx":{"content":"import { RainingCodeBackground } from './raining-code-background';\nimport { motion } from 'framer-motion';\nimport { useEffect, useState } from 'react';\n\nfunction EnhancedSectionBackgrounds() {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      setMousePosition({ x: e.clientX, y: e.clientY });\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => window.removeEventListener('mousemove', handleMouseMove);\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0\" style={{ zIndex: -1, pointerEvents: 'none' }}>\n      {/* Animated gradient background */}\n      <motion.div\n        className=\"absolute inset-0 opacity-30\"\n        animate={{\n          background: [\n            'radial-gradient(circle at 0% 0%, rgba(0,128,255,0.1) 0%, rgba(0,0,0,0) 50%)',\n            'radial-gradient(circle at 100% 100%, rgba(0,128,255,0.1) 0%, rgba(0,0,0,0) 50%)',\n            'radial-gradient(circle at 0% 100%, rgba(0,128,255,0.1) 0%, rgba(0,0,0,0) 50%)',\n            'radial-gradient(circle at 100% 0%, rgba(0,128,255,0.1) 0%, rgba(0,0,0,0) 50%)',\n          ]\n        }}\n        transition={{\n          duration: 10,\n          repeat: Infinity,\n          repeatType: \"reverse\"\n        }}\n      />\n\n      {/* Mouse follow effect */}\n      <motion.div\n        className=\"absolute opacity-20\"\n        style={{\n          width: 800,\n          height: 800,\n          borderRadius: '50%',\n          background: 'radial-gradient(circle, rgba(0,255,255,0.1) 0%, rgba(0,0,0,0) 70%)',\n          x: mousePosition.x - 400,\n          y: mousePosition.y - 400,\n        }}\n        animate={{\n          scale: [1, 1.1, 1],\n        }}\n        transition={{\n          duration: 2,\n          repeat: Infinity,\n          repeatType: \"reverse\"\n        }}\n      />\n\n      {/* Matrix rain effect with reduced opacity */}\n      <div className=\"opacity-5\">\n        <RainingCodeBackground intensity=\"low\" theme=\"matrix\" />\n      </div>\n\n      {/* Ambient particles */}\n      <motion.div\n        className=\"absolute inset-0\"\n        style={{\n          background: 'radial-gradient(circle at 50% 50%, rgba(0,128,255,0.05) 0%, rgba(0,0,0,0) 70%)',\n        }}\n        animate={{\n          scale: [1, 1.2, 1],\n          opacity: [0.3, 0.5, 0.3],\n        }}\n        transition={{\n          duration: 5,\n          repeat: Infinity,\n          repeatType: \"reverse\"\n        }}\n      />\n    </div>\n  );\n}\n\nexport { EnhancedSectionBackgrounds };\n","size_bytes":2520},"client/src/components/gsap-scroll-smoother-wrapper.tsx":{"content":"interface GSAPScrollSmootherWrapperProps {\n  children: React.ReactNode;\n}\n\nexport function GSAPScrollSmootherWrapper({ children }: GSAPScrollSmootherWrapperProps) {\n\n  // Simplified wrapper without complex animations for now\n\n  return (\n    <div className=\"relative\">\n      {children}\n    </div>\n  );\n}","size_bytes":302},"client/src/components/network-visualization-background.tsx":{"content":"import { useEffect, useRef } from 'react';\n\ninterface Node {\n  id: string;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  type: 'server' | 'client' | 'router' | 'firewall' | 'threat';\n  connections: string[];\n  health: 'healthy' | 'warning' | 'critical';\n  size: number;\n}\n\ninterface DataPacket {\n  id: string;\n  sourceId: string;\n  targetId: string;\n  progress: number;\n  type: 'data' | 'threat' | 'secure';\n  speed: number;\n}\n\nexport function NetworkVisualizationBackground() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n  const nodesRef = useRef<Node[]>([]);\n  const packetsRef = useRef<DataPacket[]>([]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Initialize network nodes\n    const initializeNodes = () => {\n      const nodes: Node[] = [\n        // Central servers\n        { \n          id: 'server-1', x: canvas.width * 0.3, y: canvas.height * 0.4, vx: 0, vy: 0, \n          type: 'server', connections: ['router-1', 'firewall-1'], health: 'healthy', size: 15 \n        },\n        { \n          id: 'server-2', x: canvas.width * 0.7, y: canvas.height * 0.6, vx: 0, vy: 0, \n          type: 'server', connections: ['router-1', 'client-1'], health: 'healthy', size: 15 \n        },\n        \n        // Network infrastructure\n        { \n          id: 'router-1', x: canvas.width * 0.5, y: canvas.height * 0.3, vx: 0, vy: 0, \n          type: 'router', connections: ['server-1', 'server-2', 'firewall-1'], health: 'healthy', size: 12 \n        },\n        { \n          id: 'firewall-1', x: canvas.width * 0.2, y: canvas.height * 0.2, vx: 0, vy: 0, \n          type: 'firewall', connections: ['router-1'], health: 'warning', size: 10 \n        },\n        \n        // Client connections\n        { \n          id: 'client-1', x: canvas.width * 0.8, y: canvas.height * 0.8, vx: 0, vy: 0, \n          type: 'client', connections: ['server-2'], health: 'healthy', size: 8 \n        },\n        { \n          id: 'client-2', x: canvas.width * 0.1, y: canvas.height * 0.7, vx: 0, vy: 0, \n          type: 'client', connections: ['firewall-1'], health: 'healthy', size: 8 \n        },\n        \n        // Threat indicators\n        { \n          id: 'threat-1', x: canvas.width * 0.9, y: canvas.height * 0.1, vx: -1, vy: 1, \n          type: 'threat', connections: [], health: 'critical', size: 6 \n        }\n      ];\n      nodesRef.current = nodes;\n    };\n\n    // Generate data packets\n    const generatePacket = () => {\n      const nodes = nodesRef.current;\n      const validNodes = nodes.filter(n => n.type !== 'threat' && n.connections.length > 0);\n      \n      if (validNodes.length === 0) return;\n      \n      const sourceNode = validNodes[Math.floor(Math.random() * validNodes.length)];\n      const targetId = sourceNode.connections[Math.floor(Math.random() * sourceNode.connections.length)];\n      \n      const packet: DataPacket = {\n        id: `packet-${Date.now()}-${Math.random()}`,\n        sourceId: sourceNode.id,\n        targetId,\n        progress: 0,\n        type: Math.random() < 0.1 ? 'threat' : (Math.random() < 0.3 ? 'secure' : 'data'),\n        speed: 0.01 + Math.random() * 0.02\n      };\n      \n      packetsRef.current.push(packet);\n    };\n\n    initializeNodes();\n\n    // Colors for different elements\n    const colors = {\n      server: '#06b6d4',\n      client: '#10b981', \n      router: '#8b5cf6',\n      firewall: '#f59e0b',\n      threat: '#ef4444',\n      healthy: '#22c55e',\n      warning: '#f59e0b', \n      critical: '#ef4444',\n      connection: '#4b5563',\n      data: '#06b6d4',\n      secure: '#10b981',\n      threatPacket: '#ef4444'\n    };\n\n    const animate = () => {\n      // Clear canvas with fade effect\n      ctx.fillStyle = 'rgba(15, 23, 42, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      const nodes = nodesRef.current;\n      const packets = packetsRef.current;\n\n      // Draw connections\n      nodes.forEach(node => {\n        node.connections.forEach(targetId => {\n          const target = nodes.find(n => n.id === targetId);\n          if (target) {\n            ctx.strokeStyle = colors.connection;\n            ctx.lineWidth = 1;\n            ctx.globalAlpha = 0.3;\n            ctx.beginPath();\n            ctx.moveTo(node.x, node.y);\n            ctx.lineTo(target.x, target.y);\n            ctx.stroke();\n            ctx.globalAlpha = 1;\n          }\n        });\n      });\n\n      // Draw and update nodes\n      nodes.forEach(node => {\n        // Move threat nodes\n        if (node.type === 'threat') {\n          node.x += node.vx;\n          node.y += node.vy;\n          \n          // Bounce off edges\n          if (node.x <= 0 || node.x >= canvas.width) node.vx *= -1;\n          if (node.y <= 0 || node.y >= canvas.height) node.vy *= -1;\n        }\n\n        // Draw node\n        const color = colors[node.type];\n        const healthColor = colors[node.health];\n        \n        // Node glow effect\n        ctx.shadowBlur = 10;\n        ctx.shadowColor = color;\n        \n        // Main node circle\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(node.x, node.y, node.size, 0, Math.PI * 2);\n        ctx.fill();\n        \n        // Health indicator ring\n        ctx.strokeStyle = healthColor;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.arc(node.x, node.y, node.size + 3, 0, Math.PI * 2);\n        ctx.stroke();\n        \n        // Reset shadow\n        ctx.shadowBlur = 0;\n        \n        // Node labels\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '10px monospace';\n        ctx.textAlign = 'center';\n        const label = node.type.toUpperCase();\n        ctx.fillText(label, node.x, node.y - node.size - 8);\n      });\n\n      // Generate new packets occasionally\n      if (Math.random() < 0.03) {\n        generatePacket();\n      }\n\n      // Update and draw packets\n      packetsRef.current = packets.filter(packet => {\n        const source = nodes.find(n => n.id === packet.sourceId);\n        const target = nodes.find(n => n.id === packet.targetId);\n        \n        if (!source || !target) return false;\n        \n        // Update packet progress\n        packet.progress += packet.speed;\n        \n        if (packet.progress >= 1) return false; // Remove completed packets\n        \n        // Calculate packet position\n        const x = source.x + (target.x - source.x) * packet.progress;\n        const y = source.y + (target.y - source.y) * packet.progress;\n        \n        // Draw packet\n        const packetColor = packet.type === 'threat' ? colors.threatPacket :\n                           packet.type === 'secure' ? colors.secure : colors.data;\n        \n        ctx.fillStyle = packetColor;\n        ctx.shadowBlur = 5;\n        ctx.shadowColor = packetColor;\n        \n        ctx.beginPath();\n        ctx.arc(x, y, 3, 0, Math.PI * 2);\n        ctx.fill();\n        \n        // Add trailing effect for threats\n        if (packet.type === 'threat') {\n          ctx.strokeStyle = `${packetColor}40`;\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          const trailLength = 20;\n          const trailX = x - (target.x - source.x) * (trailLength / 100);\n          const trailY = y - (target.y - source.y) * (trailLength / 100);\n          ctx.moveTo(trailX, trailY);\n          ctx.lineTo(x, y);\n          ctx.stroke();\n        }\n        \n        ctx.shadowBlur = 0;\n        return true;\n      });\n\n      // Draw security metrics overlay\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      ctx.fillRect(20, 20, 250, 120);\n      ctx.strokeStyle = colors.secure;\n      ctx.lineWidth = 1;\n      ctx.strokeRect(20, 20, 250, 120);\n      \n      ctx.fillStyle = colors.secure;\n      ctx.font = 'bold 12px monospace';\n      ctx.textAlign = 'left';\n      ctx.fillText('NETWORK STATUS', 30, 40);\n      \n      ctx.font = '10px monospace';\n      ctx.fillStyle = '#ffffff';\n      \n      const stats = [\n        `Active Nodes: ${nodes.filter(n => n.type !== 'threat').length}`,\n        `Data Packets: ${packets.length}`,\n        `Threats Detected: ${nodes.filter(n => n.type === 'threat').length}`,\n        `Firewall Status: ACTIVE`,\n        `Network Health: ${nodes.filter(n => n.health === 'healthy').length}/${nodes.length} OK`\n      ];\n      \n      stats.forEach((stat, index) => {\n        ctx.fillText(stat, 30, 60 + index * 15);\n      });\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-950 via-slate-900 to-indigo-950\" />\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 opacity-70\"\n      />\n      \n      {/* Additional UI elements */}\n      <div className=\"absolute top-4 right-4 bg-black/80 backdrop-blur-md rounded-lg border border-cyan-500/30 p-4\">\n        <div className=\"text-cyan-400 font-mono text-sm mb-2 flex items-center gap-2\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n          Network Monitor\n        </div>\n        <div className=\"space-y-2 text-xs text-gray-300\">\n          <div className=\"flex justify-between\">\n            <span>Bandwidth:</span>\n            <span className=\"text-cyan-400\">1.2 Gbps</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Latency:</span>\n            <span className=\"text-green-400\">12ms</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Packet Loss:</span>\n            <span className=\"text-yellow-400\">0.01%</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Threat alert */}\n      <div className=\"absolute bottom-4 left-4 bg-red-900/80 backdrop-blur-md rounded-lg border border-red-500/50 p-3\">\n        <div className=\"flex items-center gap-2 text-red-400 font-mono text-sm\">\n          <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\n          Threat Detected - Quarantined\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10472},"client/src/components/raining-code-background.tsx":{"content":"import { useEffect, useRef } from 'react';\n\nconst codeCharacters = [\n  '0', '1', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n  '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+', '[', ']', '{', '}', '|', '\\\\', ':', ';', '\"', \"'\", '<', '>', ',', '.', '?', '/',\n  'Œ±', 'Œ≤', 'Œ≥', 'Œ¥', 'Œµ', 'Œ∂', 'Œ∑', 'Œ∏', 'Œπ', 'Œ∫', 'Œª', 'Œº', 'ŒΩ', 'Œæ', 'Œø', 'œÄ', 'œÅ', 'œÉ', 'œÑ', 'œÖ', 'œÜ', 'œá', 'œà', 'œâ'\n];\n\nconst securityTerms = [\n  'SECURE', 'ENCRYPT', 'FIREWALL', 'MALWARE', 'THREAT', 'PROTECT', 'MONITOR', 'DETECT', 'ANALYZE', 'BLOCK',\n  'HASH', 'TOKEN', 'AUTH', 'SSL', 'VPN', 'SCAN', 'PATCH', 'BACKUP', 'AUDIT', 'COMPLIANCE'\n];\n\ninterface RainingCodeBackgroundProps {\n  intensity?: 'low' | 'medium' | 'high';\n  theme?: 'matrix' | 'cyberpunk' | 'terminal';\n}\n\nexport function RainingCodeBackground({ \n  intensity = 'medium',\n  theme = 'matrix' \n}: RainingCodeBackgroundProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas dimensions\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Column configuration based on intensity\n    const columnCount = {\n      low: Math.floor(canvas.width / 20),\n      medium: Math.floor(canvas.width / 15),\n      high: Math.floor(canvas.width / 10)\n    }[intensity];\n\n    const fontSize = 14;\n    const columns = Array.from({ length: columnCount }, () => ({\n      y: Math.random() * canvas.height,\n      speed: Math.random() * 3 + 1,\n      chars: [] as Array<{ char: string; opacity: number; age: number; isSpecial: boolean }>,\n      lastDrop: 0\n    }));\n\n    // Theme colors\n    const themes = {\n      matrix: {\n        primary: '#00ff41',\n        secondary: '#008f11',\n        highlight: '#ffffff',\n        background: 'rgba(0, 0, 0, 0.05)'\n      },\n      cyberpunk: {\n        primary: '#00d4ff',\n        secondary: '#0080ff',\n        highlight: '#ff6b00',\n        background: 'rgba(10, 10, 40, 0.05)'\n      },\n      terminal: {\n        primary: '#00ff88',\n        secondary: '#00cc66',\n        highlight: '#ffff00',\n        background: 'rgba(0, 20, 0, 0.05)'\n      }\n    };\n\n    const currentTheme = themes[theme];\n\n    const animate = () => {\n      // Create trailing effect\n      ctx.fillStyle = currentTheme.background;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      columns.forEach((column, columnIndex) => {\n        const x = columnIndex * (canvas.width / columnCount);\n        \n        // Add new characters occasionally\n        if (Math.random() < 0.02 && Date.now() - column.lastDrop > 100) {\n          const isSpecial = Math.random() < 0.1; // 10% chance for special terms\n          const char = isSpecial \n            ? securityTerms[Math.floor(Math.random() * securityTerms.length)]\n            : codeCharacters[Math.floor(Math.random() * codeCharacters.length)];\n          \n          column.chars.unshift({\n            char,\n            opacity: 1,\n            age: 0,\n            isSpecial\n          });\n          column.lastDrop = Date.now();\n        }\n\n        // Update and draw characters\n        column.chars.forEach((charObj, charIndex) => {\n          const y = column.y + (charIndex * fontSize);\n          \n          // Age the character\n          charObj.age += 1;\n          charObj.opacity = Math.max(0, 1 - (charObj.age / 50));\n\n          if (charObj.isSpecial) {\n            // Special security terms styling\n            ctx.fillStyle = currentTheme.highlight;\n            ctx.font = `bold ${fontSize}px 'Fira Code', monospace`;\n            ctx.shadowBlur = 10;\n            ctx.shadowColor = currentTheme.highlight;\n          } else {\n            // Regular characters\n            const alpha = charIndex === 0 ? 1 : charObj.opacity;\n            ctx.fillStyle = charIndex === 0 \n              ? currentTheme.primary \n              : `${currentTheme.secondary}${Math.floor(alpha * 255).toString(16).padStart(2, '0')}`;\n            ctx.font = `${fontSize}px 'Fira Code', monospace`;\n            ctx.shadowBlur = charIndex === 0 ? 5 : 0;\n            ctx.shadowColor = currentTheme.primary;\n          }\n\n          ctx.fillText(charObj.char, x, y);\n          ctx.shadowBlur = 0; // Reset shadow\n        });\n\n        // Remove old characters\n        column.chars = column.chars.filter(char => char.opacity > 0.01);\n\n        // Move column down\n        column.y += column.speed;\n        if (column.y > canvas.height && column.chars.length === 0) {\n          column.y = -fontSize * 10;\n        }\n      });\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, [intensity, theme]);\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none overflow-hidden\">\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 opacity-30\"\n        style={{ mixBlendMode: 'screen' }}\n      />\n      \n      {/* Additional overlay effects */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-transparent to-slate-900/20\" />\n      \n      {/* Scanning line effect */}\n      <div \n        className=\"absolute left-0 right-0 h-px bg-gradient-to-r from-transparent via-green-500 to-transparent opacity-50 animate-pulse\"\n        style={{\n          top: '30%',\n          animation: 'scanline 8s linear infinite',\n        }}\n      />\n      \n      {/* Scanning line with inline styles */}\n      <style>\n        {`\n        @keyframes scanline {\n          0% { top: 0%; opacity: 0; }\n          10% { opacity: 1; }\n          90% { opacity: 1; }\n          100% { top: 100%; opacity: 0; }\n        }\n        `}\n      </style>\n    </div>\n  );\n}","size_bytes":6121},"client/src/components/server-room-background.tsx":{"content":"import { useEffect, useRef } from 'react';\n\ninterface ServerRack {\n  id: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  servers: Server[];\n  status: 'online' | 'warning' | 'offline';\n}\n\ninterface Server {\n  id: string;\n  y: number; // Relative to rack\n  height: number;\n  status: 'active' | 'idle' | 'error';\n  load: number; // 0-1\n  temp: number; // Temperature\n  blinkPhase: number;\n}\n\nexport function ServerRoomBackground() {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const racksRef = useRef<ServerRack[]>([]);\n\n  useEffect(() => {\n    // Initialize server racks\n    const initializeRacks = () => {\n      const racks: ServerRack[] = [];\n      const rackCount = 5;\n      \n      for (let i = 0; i < rackCount; i++) {\n        const servers: Server[] = [];\n        const serverCount = 8 + Math.floor(Math.random() * 4);\n        \n        for (let j = 0; j < serverCount; j++) {\n          servers.push({\n            id: `server-${i}-${j}`,\n            y: j * 25,\n            height: 20,\n            status: Math.random() < 0.85 ? 'active' : Math.random() < 0.9 ? 'idle' : 'error',\n            load: Math.random(),\n            temp: 35 + Math.random() * 30,\n            blinkPhase: Math.random() * Math.PI * 2\n          });\n        }\n        \n        racks.push({\n          id: `rack-${i}`,\n          x: 50 + i * 180,\n          y: 100,\n          width: 120,\n          height: serverCount * 25 + 40,\n          servers,\n          status: servers.some(s => s.status === 'error') ? 'warning' : 'online'\n        });\n      }\n      \n      racksRef.current = racks;\n    };\n\n    initializeRacks();\n\n    // Animation loop for blinking lights and server stats\n    const animateServers = () => {\n      racksRef.current.forEach(rack => {\n        rack.servers.forEach(server => {\n          // Update blinking phase\n          server.blinkPhase += 0.1 + (server.load * 0.1);\n          \n          // Simulate load changes\n          server.load += (Math.random() - 0.5) * 0.02;\n          server.load = Math.max(0, Math.min(1, server.load));\n          \n          // Temperature fluctuation\n          server.temp += (Math.random() - 0.5) * 0.5;\n          server.temp = Math.max(20, Math.min(80, server.temp));\n          \n          // Occasional status changes\n          if (Math.random() < 0.001) {\n            const statuses: Server['status'][] = ['active', 'idle', 'error'];\n            server.status = statuses[Math.floor(Math.random() * statuses.length)];\n          }\n        });\n      });\n    };\n\n    const interval = setInterval(animateServers, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return '#22c55e';\n      case 'idle': return '#3b82f6';\n      case 'error': return '#ef4444';\n      case 'warning': return '#f59e0b';\n      default: return '#6b7280';\n    }\n  };\n\n  const getLoadColor = (load: number) => {\n    if (load < 0.3) return '#22c55e';\n    if (load < 0.7) return '#f59e0b';\n    return '#ef4444';\n  };\n\n  return (\n    <div ref={containerRef} className=\"fixed inset-0 pointer-events-none overflow-hidden\">\n      {/* Dark server room background */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-slate-950 via-slate-900 to-slate-800\">\n        {/* Floor grid pattern */}\n        <div \n          className=\"absolute inset-0 opacity-10\"\n          style={{\n            backgroundImage: `\n              linear-gradient(rgba(59, 130, 246, 0.3) 1px, transparent 1px),\n              linear-gradient(90deg, rgba(59, 130, 246, 0.3) 1px, transparent 1px)\n            `,\n            backgroundSize: '60px 60px'\n          }}\n        />\n      </div>\n\n      {/* Server racks */}\n      <div className=\"absolute inset-0\">\n        {racksRef.current.map((rack, rackIndex) => (\n          <div\n            key={rack.id}\n            className=\"absolute bg-gray-800/80 backdrop-blur-sm rounded-lg border border-blue-500/30 overflow-hidden\"\n            style={{\n              left: `${rack.x}px`,\n              top: `${rack.y}px`,\n              width: `${rack.width}px`,\n              height: `${rack.height}px`,\n              transform: `perspective(800px) rotateY(${-10 + rackIndex * 5}deg) rotateX(5deg)`,\n              boxShadow: '0 20px 40px rgba(0,0,0,0.5)'\n            }}\n          >\n            {/* Rack header */}\n            <div className=\"bg-gray-700/80 px-2 py-1 border-b border-blue-500/30\">\n              <div className=\"flex justify-between items-center text-xs font-mono\">\n                <span className=\"text-blue-400\">RACK-{rackIndex + 1}</span>\n                <div \n                  className=\"w-2 h-2 rounded-full animate-pulse\"\n                  style={{ backgroundColor: getStatusColor(rack.status) }}\n                />\n              </div>\n            </div>\n\n            {/* Individual servers */}\n            <div className=\"p-2 space-y-1\">\n              {rack.servers.map((server, serverIndex) => (\n                <div\n                  key={server.id}\n                  className=\"relative bg-gray-900/60 rounded border border-gray-600/50 p-1\"\n                  style={{ height: `${server.height}px` }}\n                >\n                  {/* Server front panel */}\n                  <div className=\"flex items-center justify-between h-full\">\n                    {/* Status LEDs */}\n                    <div className=\"flex gap-1\">\n                      <div \n                        className=\"w-1 h-1 rounded-full\"\n                        style={{ \n                          backgroundColor: getStatusColor(server.status),\n                          opacity: server.status === 'active' ? \n                            0.5 + 0.5 * Math.sin(server.blinkPhase) : \n                            server.status === 'error' ? \n                              Math.sin(server.blinkPhase * 4) > 0 ? 1 : 0.2 : 0.6\n                        }}\n                      />\n                      <div \n                        className=\"w-1 h-1 rounded-full\"\n                        style={{ \n                          backgroundColor: getLoadColor(server.load),\n                          opacity: 0.3 + 0.7 * server.load\n                        }}\n                      />\n                      <div \n                        className=\"w-1 h-1 rounded-full bg-blue-400\"\n                        style={{ \n                          opacity: 0.2 + 0.8 * Math.sin(server.blinkPhase * 0.5)\n                        }}\n                      />\n                    </div>\n\n                    {/* Load bars */}\n                    <div className=\"flex-1 mx-2\">\n                      <div className=\"h-1 bg-gray-700 rounded overflow-hidden\">\n                        <div \n                          className=\"h-full transition-all duration-300\"\n                          style={{ \n                            width: `${server.load * 100}%`,\n                            backgroundColor: getLoadColor(server.load)\n                          }}\n                        />\n                      </div>\n                    </div>\n\n                    {/* Server number */}\n                    <div className=\"text-xs font-mono text-gray-400\">\n                      {String(serverIndex + 1).padStart(2, '0')}\n                    </div>\n                  </div>\n\n                  {/* Heat visualization */}\n                  {server.temp > 60 && (\n                    <div \n                      className=\"absolute inset-0 bg-red-500/20 rounded animate-pulse\"\n                      style={{ \n                        opacity: (server.temp - 60) / 20\n                      }}\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n\n            {/* Rack ventilation at bottom */}\n            <div className=\"absolute bottom-2 left-2 right-2 flex justify-center\">\n              <div className=\"flex gap-1\">\n                {Array.from({ length: 8 }).map((_, i) => (\n                  <div \n                    key={i}\n                    className=\"w-1 h-3 bg-blue-400/30 rounded\"\n                    style={{\n                      animation: `pulse ${1 + i * 0.1}s infinite alternate`\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Environmental monitoring */}\n      <div className=\"absolute top-4 left-4 bg-black/80 backdrop-blur-md rounded-lg border border-green-500/30 p-4\">\n        <div className=\"text-green-400 font-mono text-sm mb-3 flex items-center gap-2\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n          Data Center Environmental\n        </div>\n        <div className=\"space-y-2 text-xs\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-300\">Temperature:</span>\n            <span className=\"text-blue-400\">18.5¬∞C</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-300\">Humidity:</span>\n            <span className=\"text-green-400\">45%</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-300\">Power Usage:</span>\n            <span className=\"text-yellow-400\">2.8kW</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-300\">Uptime:</span>\n            <span className=\"text-green-400\">99.98%</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Server statistics */}\n      <div className=\"absolute top-4 right-4 bg-black/80 backdrop-blur-md rounded-lg border border-cyan-500/30 p-4\">\n        <div className=\"text-cyan-400 font-mono text-sm mb-3 flex items-center gap-2\">\n          <div className=\"w-2 h-2 bg-cyan-500 rounded-full animate-pulse\" />\n          Server Farm Status\n        </div>\n        <div className=\"space-y-2 text-xs\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-300\">Active Servers:</span>\n            <span className=\"text-green-400\">\n              {racksRef.current.reduce((total, rack) => \n                total + rack.servers.filter(s => s.status === 'active').length, 0\n              )}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-300\">Total Capacity:</span>\n            <span className=\"text-blue-400\">\n              {racksRef.current.reduce((total, rack) => total + rack.servers.length, 0)} Units\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-300\">Avg Load:</span>\n            <span className=\"text-yellow-400\">\n              {Math.round(\n                racksRef.current.reduce((total, rack) => \n                  total + rack.servers.reduce((sum, s) => sum + s.load, 0), 0\n                ) / racksRef.current.reduce((total, rack) => total + rack.servers.length, 0) * 100\n              )}%\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Warning alerts */}\n      <div className=\"absolute bottom-4 left-4 right-4 flex justify-between\">\n        {racksRef.current.some(rack => rack.status === 'warning') && (\n          <div className=\"bg-orange-900/80 backdrop-blur-md rounded-lg border border-orange-500/50 p-3\">\n            <div className=\"flex items-center gap-2 text-orange-400 font-mono text-sm\">\n              <div className=\"w-2 h-2 bg-orange-500 rounded-full animate-pulse\" />\n              Server Alert: High Temperature\n            </div>\n          </div>\n        )}\n        \n        <div className=\"bg-green-900/80 backdrop-blur-md rounded-lg border border-green-500/50 p-3\">\n          <div className=\"flex items-center gap-2 text-green-400 font-mono text-sm\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n            All Systems Operational\n          </div>\n        </div>\n      </div>\n\n      {/* Ambient lighting effects */}\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {Array.from({ length: 3 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute rounded-full opacity-20\"\n            style={{\n              left: `${20 + i * 30}%`,\n              top: `${60 + i * 10}%`,\n              width: '200px',\n              height: '100px',\n              background: `radial-gradient(ellipse, ${['#3b82f6', '#22c55e', '#f59e0b'][i]}40 0%, transparent 70%)`,\n              animation: `pulse ${3 + i}s ease-in-out infinite alternate`\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":12607},"client/src/hooks/use-gsap-init.tsx":{"content":"import { useEffect } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport { ScrollSmoother } from 'gsap/ScrollSmoother';\n\nexport function useGSAPInit() {\n  useEffect(() => {\n    // Register GSAP plugins\n    gsap.registerPlugin(ScrollTrigger, ScrollSmoother);\n    \n    // Refresh ScrollTrigger on mount\n    ScrollTrigger.refresh();\n    \n    return () => {\n      // Clean up ScrollTrigger instances on unmount\n      ScrollTrigger.getAll().forEach(trigger => trigger.kill());\n    };\n  }, []);\n}","size_bytes":540}},"version":1}