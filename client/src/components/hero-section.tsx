import { useEffect, useRef } from 'react';
import { useLenis } from '@/hooks/use-lenis';

export function HeroSection() {
  const { scrollTo } = useLenis();
  const particlesRef = useRef<HTMLDivElement>(null);
  const statsRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Create particles
    if (particlesRef.current) {
      const particleCount = 50;
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 15 + 's';
        particle.style.animationDuration = (Math.random() * 10 + 10) + 's';
        particlesRef.current.appendChild(particle);
      }
    }

    // Animate counters when visible
    const animateCounters = () => {
      if (typeof window !== 'undefined' && window.gsap && statsRef.current) {
        const counters = statsRef.current.querySelectorAll('[data-count]');
        counters.forEach(counter => {
          const target = parseFloat(counter.getAttribute('data-count') || '0');
          window.gsap.fromTo(counter, 
            { innerText: 0 },
            {
              duration: 2,
              innerText: target,
              snap: { innerText: target === 99.9 ? 0.1 : 1 },
              scrollTrigger: {
                trigger: counter,
                start: 'top 80%',
              },
              onUpdate: function() {
                const element = this.targets()[0] as HTMLElement;
                if (target === 99.9) {
                  element.innerText = parseFloat(element.innerText).toFixed(1);
                } else {
                  element.innerText = Math.ceil(parseFloat(element.innerText)).toString();
                }
              }
            }
          );
        });
      }
    };

    const timer = setTimeout(animateCounters, 1000);
    return () => clearTimeout(timer);
  }, []);

  const handleCTAClick = (e: React.MouseEvent<HTMLAnchorElement>, target: string) => {
    e.preventDefault();
    const targetElement = document.getElementById(target);
    if (targetElement) {
      scrollTo(targetElement, { offset: -80 });
    }
  };

  return (
    <section className="hero min-h-screen flex items-center relative pt-20">
      <div className="particles absolute w-full h-full overflow-hidden pointer-events-none" ref={particlesRef}>
        {/* Particles will be generated by useEffect */}
      </div>
      
      <div className="container max-w-6xl mx-auto px-8">
        <div className="hero-content text-center max-w-4xl mx-auto fade-in">
          <h1 className="text-4xl md:text-6xl font-bold mb-6 text-white drop-shadow-2xl">
            <span className="bg-gradient-to-r from-cyan-400 via-blue-500 to-indigo-600 bg-clip-text text-transparent">
              Secure Digital Infrastructure
            </span>
          </h1>
          <p className="text-xl md:text-xl text-white/90 mb-12 leading-relaxed drop-shadow-lg">
            Protecting your digital assets with enterprise-grade cybersecurity solutions. Advanced threat detection, real-time monitoring, and AI-powered defense systems.
          </p>
          
          <div className="hero-actions flex flex-col sm:flex-row gap-4 justify-center mb-16">
            <a 
              href="#services" 
              onClick={(e) => handleCTAClick(e, 'services')}
              className="bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-500 hover:to-orange-500 px-8 py-4 rounded-lg font-bold text-white transition-all duration-300 transform hover:scale-105 shadow-2xl"
              data-testid="hero-get-started"
            >
              üõ°Ô∏è Start Security Audit
            </a>
            <a 
              href="#contact" 
              onClick={(e) => handleCTAClick(e, 'contact')}
              className="bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 px-8 py-4 rounded-lg font-bold text-white transition-all duration-300 transform hover:scale-105 shadow-2xl"
              data-testid="hero-watch-demo"
            >
              üì∫ Watch Demo
            </a>
          </div>
          
          <div className="stats-grid grid grid-cols-1 md:grid-cols-4 gap-6" ref={statsRef}>
            <div className="stat-item text-center p-6 bg-black/50 backdrop-blur-md rounded-2xl border border-green-500/30 shadow-2xl" data-testid="stat-threat-detection">
              <span className="stat-number text-4xl font-bold text-green-400 block" data-count="99.9">0</span>%
              <div className="stat-label text-white/90 text-sm mt-2">Threat Detection</div>
            </div>
            <div className="stat-item text-center p-6 bg-black/50 backdrop-blur-md rounded-2xl border border-cyan-500/30 shadow-2xl" data-testid="stat-systems-protected">
              <span className="stat-number text-4xl font-bold text-cyan-400 block" data-count="2847">0</span>
              <div className="stat-label text-white/90 text-sm mt-2">Active Shields</div>
            </div>
            <div className="stat-item text-center p-6 bg-black/50 backdrop-blur-md rounded-2xl border border-red-500/30 shadow-2xl" data-testid="stat-threats-blocked">
              <span className="stat-number text-4xl font-bold text-red-400 block" data-count="1254">0</span>
              <div className="stat-label text-white/90 text-sm mt-2">Threats Blocked</div>
            </div>
            <div className="stat-item text-center p-6 bg-black/50 backdrop-blur-md rounded-2xl border border-yellow-500/30 shadow-2xl" data-testid="stat-monitoring">
              <span className="stat-number text-4xl font-bold text-yellow-400 block" data-count="24">0</span>/7
              <div className="stat-label text-white/90 text-sm mt-2">Monitoring</div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
